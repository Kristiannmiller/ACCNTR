import React from 'react';
import { useSitecoreContext } from '../enhancers/withSitecoreContext';
import { mapButtonToCommand, } from '@sitecore-jss/sitecore-jss/utils';
export const EditFrame = ({ children, dataSource, buttons, title, tooltip, cssClass, parameters, }) => {
    var _a;
    const { sitecoreContext } = useSitecoreContext();
    if (!sitecoreContext.pageEditing) {
        return React.createElement(React.Fragment, null, children);
    }
    const chromeData = {
        displayName: title,
        expandedDisplayName: tooltip,
    };
    const frameProps = {};
    frameProps.className = 'scLooseFrameZone';
    if (cssClass) {
        frameProps.className = `${frameProps.className} ${cssClass}`;
    }
    // item uri for edit frame target
    if (dataSource) {
        const databaseName = dataSource.databaseName || ((_a = sitecoreContext.route) === null || _a === void 0 ? void 0 : _a.databaseName);
        const language = dataSource.language || sitecoreContext.language;
        frameProps.sc_item = `sitecore://${databaseName}/${dataSource.itemId}?lang=${language}`;
        chromeData.contextItemUri = frameProps.sc_item;
    }
    chromeData.commands = buttons === null || buttons === void 0 ? void 0 : buttons.map((value) => {
        return mapButtonToCommand(value, dataSource === null || dataSource === void 0 ? void 0 : dataSource.itemId, parameters);
    });
    return (React.createElement("div", Object.assign({ className: "scLooseFrameZone" }, frameProps),
        React.createElement("span", { className: "scChromeData" }, JSON.stringify(chromeData)),
        children));
};
