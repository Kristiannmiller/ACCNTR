import React from 'react';
import { PlaceholderCommon } from '../components/PlaceholderCommon';
import { withComponentFactory } from './withComponentFactory';
/**
 * @param {WithPlaceholderSpec} placeholders
 * @param {WithPlaceholderOptions} [options]
 */
export function withPlaceholder(placeholders, options) {
    return (WrappedComponent) => {
        class WithPlaceholder extends PlaceholderCommon {
            constructor(props) {
                super(props);
            }
            render() {
                let childProps = Object.assign({}, this.props);
                delete childProps.componentFactory;
                if (options && options.propsTransformer) {
                    childProps = options.propsTransformer(childProps);
                }
                if (this.state.error) {
                    if (childProps.errorComponent) {
                        return React.createElement(childProps.errorComponent, { error: this.state.error });
                    }
                    return (React.createElement("div", { className: "sc-jss-placeholder-error" },
                        "A rendering error occurred: ",
                        this.state.error.message,
                        "."));
                }
                const renderingData = options && options.resolvePlaceholderDataFromProps
                    ? options.resolvePlaceholderDataFromProps(childProps)
                    : childProps.rendering;
                const definitelyArrayPlacholders = !Array.isArray(placeholders)
                    ? [placeholders]
                    : placeholders;
                definitelyArrayPlacholders.forEach((placeholder) => {
                    let placeholderData;
                    if (typeof placeholder !== 'string' && placeholder.placeholder && placeholder.prop) {
                        placeholderData = PlaceholderCommon.getPlaceholderDataFromRenderingData(renderingData, placeholder.placeholder);
                        if (placeholderData) {
                            childProps[placeholder.prop] = this.getComponentsForRenderingData(placeholderData);
                        }
                    }
                    else {
                        placeholderData = PlaceholderCommon.getPlaceholderDataFromRenderingData(renderingData, placeholder);
                        if (placeholderData) {
                            childProps[placeholder] = this.getComponentsForRenderingData(placeholderData);
                        }
                    }
                });
                return React.createElement(WrappedComponent, Object.assign({}, childProps));
            }
        }
        WithPlaceholder.propTypes = PlaceholderCommon.propTypes;
        return withComponentFactory(WithPlaceholder);
    };
}
