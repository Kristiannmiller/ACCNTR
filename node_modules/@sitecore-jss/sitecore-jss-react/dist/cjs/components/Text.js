"use strict";
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Text = void 0;
const react_1 = __importDefault(require("react"));
const Text = (_a) => {
    var { field, tag, editable = true, encode = true } = _a, otherProps = __rest(_a, ["field", "tag", "editable", "encode"]);
    if (!field || (!field.editable && (field.value === undefined || field.value === ''))) {
        return null;
    }
    // can't use editable value if we want to output unencoded
    if (!encode) {
        // eslint-disable-next-line no-param-reassign
        editable = false;
    }
    const isEditable = field.editable && editable;
    let output = isEditable
        ? field.editable || ''
        : field.value === undefined
            ? ''
            : field.value;
    // when string value isn't formatted, we should format line breaks
    if (!field.editable && typeof output === 'string') {
        const splitted = String(output).split('\n');
        if (splitted.length) {
            const formatted = [];
            splitted.forEach((str, i) => {
                const isLast = i === splitted.length - 1;
                formatted.push(str);
                if (!isLast) {
                    formatted.push(react_1.default.createElement("br", { key: i }));
                }
            });
            output = formatted;
        }
    }
    const setDangerously = isEditable || !encode;
    let children = null;
    const htmlProps = Object.assign({}, otherProps);
    if (setDangerously) {
        htmlProps.dangerouslySetInnerHTML = {
            __html: output,
        };
    }
    else {
        children = output;
    }
    if (tag || setDangerously) {
        return react_1.default.createElement(tag || 'span', htmlProps, children);
    }
    else {
        return react_1.default.createElement(react_1.default.Fragment, null, children);
    }
};
exports.Text = Text;
exports.Text.displayName = 'Text';
