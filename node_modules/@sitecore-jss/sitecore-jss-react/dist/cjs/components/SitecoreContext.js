"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.SitecoreContext = exports.ComponentFactoryReactContext = exports.SitecoreContextReactContext = void 0;
/* eslint-disable @typescript-eslint/no-explicit-any */
const react_1 = __importDefault(require("react"));
const react_2 = __importDefault(require("fast-deep-equal/es6/react"));
exports.SitecoreContextReactContext = react_1.default.createContext({});
exports.ComponentFactoryReactContext = react_1.default.createContext({});
class SitecoreContext extends react_1.default.Component {
    constructor(props) {
        super(props);
        /**
         * Update context state. Value can be @type {LayoutServiceData} which will be automatically transformed
         * or you can provide exact @type {SitecoreContextValue}
         * @param {SitecoreContextValue | LayoutServiceData} value New context value
         */
        this.setContext = (value) => {
            this.setState({
                context: value.sitecore
                    ? this.constructContext(value)
                    : Object.assign({}, value),
            });
        };
        const context = this.constructContext(props.layoutData);
        this.state = {
            context,
            setContext: this.setContext,
        };
    }
    constructContext(layoutData) {
        var _a;
        if (!layoutData) {
            return {
                pageEditing: false,
            };
        }
        return Object.assign({ route: layoutData.sitecore.route, itemId: (_a = layoutData.sitecore.route) === null || _a === void 0 ? void 0 : _a.itemId }, layoutData.sitecore.context);
    }
    componentDidUpdate(prevProps) {
        // In case if somebody will manage SitecoreContext state by passing fresh `layoutData` prop
        // instead of using `updateSitecoreContext`
        if (!(0, react_2.default)(prevProps.layoutData, this.props.layoutData)) {
            this.setContext(this.props.layoutData);
            return;
        }
    }
    render() {
        return (react_1.default.createElement(exports.ComponentFactoryReactContext.Provider, { value: this.props.componentFactory },
            react_1.default.createElement(exports.SitecoreContextReactContext.Provider, { value: this.state }, this.props.children)));
    }
}
exports.SitecoreContext = SitecoreContext;
SitecoreContext.displayName = 'SitecoreContext';
