"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Placeholder = void 0;
const react_1 = __importDefault(require("react"));
const PlaceholderCommon_1 = require("./PlaceholderCommon");
const withComponentFactory_1 = require("../enhancers/withComponentFactory");
const utils_1 = require("@sitecore-jss/sitecore-jss/utils");
/**
 * @param {HtmlElementRendering | ComponentRendering} rendering
 */
function isRawRendering(rendering) {
    return (!rendering.componentName &&
        rendering.name !== undefined);
}
class PlaceholderComponent extends PlaceholderCommon_1.PlaceholderCommon {
    constructor(props) {
        super(props);
        this.isEmpty = false;
    }
    componentDidMount() {
        super.componentDidMount();
        if (this.isEmpty && utils_1.HorizonEditor.isActive()) {
            utils_1.HorizonEditor.resetChromes();
        }
    }
    /**
     * In case we need to render an empty placeholder, some part of the markup will be inserted by the EE,
     * so we need to separate the empty placeholder's markup and allow React reconciliation to be executed correctly
     * and retain sibling tags
     * @param {React.ReactNode | React.ReactElement[]} node react node
     * @returns react node
     */
    renderEmptyPlaceholder(node) {
        return react_1.default.createElement("div", { className: "sc-jss-empty-placeholder" }, node);
    }
    render() {
        const childProps = Object.assign({}, this.props);
        delete childProps.componentFactory;
        if (this.state.error) {
            if (childProps.errorComponent) {
                return react_1.default.createElement(childProps.errorComponent, { error: this.state.error });
            }
            return (react_1.default.createElement("div", { className: "sc-jss-placeholder-error" },
                "A rendering error occurred: ",
                this.state.error.message,
                "."));
        }
        const renderingData = childProps.rendering;
        const placeholderData = PlaceholderCommon_1.PlaceholderCommon.getPlaceholderDataFromRenderingData(renderingData, this.props.name);
        const components = this.getComponentsForRenderingData(placeholderData);
        this.isEmpty = placeholderData.every((rendering) => isRawRendering(rendering));
        if (this.props.renderEmpty && this.isEmpty) {
            const rendered = this.props.renderEmpty(components);
            return components.length ? this.renderEmptyPlaceholder(rendered) : rendered;
        }
        else if (components.length && this.isEmpty) {
            return this.renderEmptyPlaceholder(components);
        }
        else if (this.props.render) {
            return this.props.render(components, placeholderData, childProps);
        }
        else if (this.props.renderEach) {
            const renderEach = this.props.renderEach;
            return components.map((component, index) => {
                if (component && component.props && component.props.type === 'text/sitecore') {
                    return component;
                }
                return renderEach(component, index);
            });
        }
        else {
            return components;
        }
    }
}
PlaceholderComponent.propTypes = PlaceholderCommon_1.PlaceholderCommon.propTypes;
exports.Placeholder = (0, withComponentFactory_1.withComponentFactory)(PlaceholderComponent);
