"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.fetchBYOCComponentServerProps = exports.BYOCComponent = exports.BYOC_COMPONENT_RENDERING_NAME = void 0;
const react_1 = __importDefault(require("react"));
const utils_1 = require("../utils");
const MissingComponent_1 = require("./MissingComponent");
const FEAAS = __importStar(require("@sitecore-feaas/clientside/react"));
exports.BYOC_COMPONENT_RENDERING_NAME = 'BYOCComponent';
const DefaultErrorComponent = (props) => {
    var _a;
    return (react_1.default.createElement("div", null,
        "A rendering error occurred: ", (_a = props.error) === null || _a === void 0 ? void 0 :
        _a.message,
        "."));
};
/**
 * BYOCComponent facilitate the rendering of external components. It manages potential errors,
 * missing components, and customization of error messages or alternative rendering components.
 * @param {ByocComponentProps} props component props
 * @returns dynamicly rendered component or Missing Component error frame
 */
class BYOCComponent extends react_1.default.Component {
    constructor(props) {
        super(props);
        this.state = {};
    }
    static getDerivedStateFromError(error) {
        // Update state so the next render will show the fallback UI.
        return { error: error };
    }
    componentDidCatch(error) {
        this.setState({ error });
    }
    render() {
        var _a, _b, _c;
        const props = this.props;
        if (this.state.error) {
            return this.props.errorComponent ? (react_1.default.createElement(this.props.errorComponent, { error: this.state.error })) : (react_1.default.createElement(DefaultErrorComponent, { error: this.state.error }));
        }
        const { ComponentName: componentName } = props.params || {};
        if (!componentName) {
            const noNameProps = {
                errorOverride: 'BYOC: The ComponentName for this rendering is missing',
            };
            return props.missingComponentComponent ? (react_1.default.createElement(this.props.missingComponentComponent, Object.assign({}, noNameProps))) : (react_1.default.createElement(MissingComponent_1.MissingComponent, Object.assign({}, noNameProps)));
        }
        const unRegisteredComponentProps = {
            rendering: {
                componentName: componentName,
            },
            errorOverride: 'BYOC: This component was not registered.',
        };
        const fallbackComponent = this.props.missingComponentComponent ? (react_1.default.createElement(this.props.missingComponentComponent, Object.assign({}, unRegisteredComponentProps))) : (react_1.default.createElement(MissingComponent_1.MissingComponent, Object.assign({}, unRegisteredComponentProps)));
        const ErrorComponent = this.props.errorComponent;
        let componentProps = {};
        if ((_a = props.params) === null || _a === void 0 ? void 0 : _a.ComponentProps) {
            try {
                componentProps = (_b = JSON.parse(props.params.ComponentProps)) !== null && _b !== void 0 ? _b : {};
            }
            catch (e) {
                console.error(`Parsing props for ${componentName} component from rendering params failed. Error: ${e}`);
                return ErrorComponent ? (react_1.default.createElement(ErrorComponent, { error: e })) : (react_1.default.createElement(DefaultErrorComponent, { error: e }));
            }
        }
        // apply props from item datasource
        const dataSourcesData = Object.assign(Object.assign({}, props.fetchedData), { _: (0, utils_1.getDataFromFields)((_c = props.fields) !== null && _c !== void 0 ? _c : {}) });
        // we render fallback on client to avoid problems with client-only components
        return (react_1.default.createElement(FEAAS.ExternalComponent, Object.assign({ componentName: componentName, clientFallback: fallbackComponent, datasources: dataSourcesData }, componentProps)));
    }
}
exports.BYOCComponent = BYOCComponent;
/**
 * Fetches server component props required for server rendering, based on rendering params.
 * @param {BYOCComponentParams} params component params
 */
function fetchBYOCComponentServerProps(params) {
    return __awaiter(this, void 0, void 0, function* () {
        const fetchDataOptions = params.ComponentDataOverride
            ? JSON.parse(params.ComponentDataOverride)
            : {};
        const fetchedData = yield FEAAS.DataSettings.fetch(fetchDataOptions || {});
        return {
            fetchedData,
        };
    });
}
exports.fetchBYOCComponentServerProps = fetchBYOCComponentServerProps;
