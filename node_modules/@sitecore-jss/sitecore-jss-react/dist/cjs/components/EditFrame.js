"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.EditFrame = void 0;
const react_1 = __importDefault(require("react"));
const withSitecoreContext_1 = require("../enhancers/withSitecoreContext");
const utils_1 = require("@sitecore-jss/sitecore-jss/utils");
const EditFrame = ({ children, dataSource, buttons, title, tooltip, cssClass, parameters, }) => {
    var _a;
    const { sitecoreContext } = (0, withSitecoreContext_1.useSitecoreContext)();
    if (!sitecoreContext.pageEditing) {
        return react_1.default.createElement(react_1.default.Fragment, null, children);
    }
    const chromeData = {
        displayName: title,
        expandedDisplayName: tooltip,
    };
    const frameProps = {};
    frameProps.className = 'scLooseFrameZone';
    if (cssClass) {
        frameProps.className = `${frameProps.className} ${cssClass}`;
    }
    // item uri for edit frame target
    if (dataSource) {
        const databaseName = dataSource.databaseName || ((_a = sitecoreContext.route) === null || _a === void 0 ? void 0 : _a.databaseName);
        const language = dataSource.language || sitecoreContext.language;
        frameProps.sc_item = `sitecore://${databaseName}/${dataSource.itemId}?lang=${language}`;
        chromeData.contextItemUri = frameProps.sc_item;
    }
    chromeData.commands = buttons === null || buttons === void 0 ? void 0 : buttons.map((value) => {
        return (0, utils_1.mapButtonToCommand)(value, dataSource === null || dataSource === void 0 ? void 0 : dataSource.itemId, parameters);
    });
    return (react_1.default.createElement("div", Object.assign({ className: "scLooseFrameZone" }, frameProps),
        react_1.default.createElement("span", { className: "scChromeData" }, JSON.stringify(chromeData)),
        children));
};
exports.EditFrame = EditFrame;
