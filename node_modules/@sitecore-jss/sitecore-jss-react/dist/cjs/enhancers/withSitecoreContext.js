"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.useSitecoreContext = exports.withSitecoreContext = void 0;
const react_1 = __importDefault(require("react"));
const SitecoreContext_1 = require("../components/SitecoreContext");
/**
 * @param {WithSitecoreContextOptions} [options]
 */
function withSitecoreContext(options) {
    return function withSitecoreContextHoc(Component) {
        return function WithSitecoreContext(props) {
            return (react_1.default.createElement(SitecoreContext_1.SitecoreContextReactContext.Consumer, null, (context) => (react_1.default.createElement(Component, Object.assign({}, props, { sitecoreContext: context.context, updateSitecoreContext: options && options.updatable && context.setContext })))));
        };
    };
}
exports.withSitecoreContext = withSitecoreContext;
/**
 * This hook grants acсess to the current Sitecore page context
 * by default JSS includes the following properties in this context:
 * - pageEditing - Provided by Layout Service, a boolean indicating whether the route is being accessed via the Experience Editor.
 * - pageState - Like pageEditing, but a string: normal, preview or edit.
 * - site - Provided by Layout Service, an object containing the name of the current Sitecore site context.
 *
 * @see https://jss.sitecore.com/docs/techniques/extending-layout-service/layoutservice-extending-context
 *
 * @param {WithSitecoreContextOptions} [options] hook options
 *
 * @example
 * const EditMode = () => {
 *    const { sitecoreContext } = useSitecoreContext();
 *    return <span>Edit Mode is {sitecoreContext.pageEditing ? 'active' : 'inactive'}</span>
 * }
 *
 * @example
 * const EditMode = () => {
 *    const { sitecoreContext, updateSitecoreContext } = useSitecoreContext({ updatable: true });
 *    const onClick = () => updateSitecoreContext({ pageEditing: true });
 *    return <span onClick={onClick}>Edit Mode is {sitecoreContext.pageEditing ? 'active' : 'inactive'}</span>
 * }
 * @returns {Object} { sitecoreContext, updateSitecoreContext }
 */
function useSitecoreContext(options) {
    const reactContext = react_1.default.useContext(SitecoreContext_1.SitecoreContextReactContext);
    const updatable = options === null || options === void 0 ? void 0 : options.updatable;
    return {
        sitecoreContext: reactContext.context,
        updateSitecoreContext: updatable ? reactContext.setContext : undefined,
    };
}
exports.useSitecoreContext = useSitecoreContext;
