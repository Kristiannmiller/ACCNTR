"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.withDatasourceCheck = exports.DefaultEditingError = void 0;
const react_1 = __importDefault(require("react"));
const withSitecoreContext_1 = require("./withSitecoreContext");
const DefaultEditingError = () => (react_1.default.createElement("div", { className: "sc-jss-editing-error", role: "alert" }, "Datasource is required. Please choose a content item for this component."));
exports.DefaultEditingError = DefaultEditingError;
/**
 * Checks whether a Sitecore datasource is present and renders appropriately depending on page mode (normal vs editing).
 * @param {WithDatasourceCheckOptions} [options]
 * @returns
 *  The wrapped component, if a datasource is present.
 *  A null component (in normal mode) or an error component (in editing mode), if a datasource is not present.
 */
function withDatasourceCheck(options) {
    return function withDatasourceCheckHoc(Component) {
        return function WithDatasourceCheck(props) {
            var _a, _b;
            const { sitecoreContext } = (0, withSitecoreContext_1.useSitecoreContext)();
            const EditingError = (_a = options === null || options === void 0 ? void 0 : options.editingErrorComponent) !== null && _a !== void 0 ? _a : exports.DefaultEditingError;
            return ((_b = props.rendering) === null || _b === void 0 ? void 0 : _b.dataSource) ? (react_1.default.createElement(Component, Object.assign({}, props))) : sitecoreContext.pageEditing ? (react_1.default.createElement(EditingError, null)) : null;
        };
    };
}
exports.withDatasourceCheck = withDatasourceCheck;
