import { ComponentFields } from '@sitecore-jss/sitecore-jss/layout';
export declare const convertKebabCasetoCamelCase: (str: string) => string;
/**
 * https://facebook.github.io/react/docs/dom-elements.html
 * We are only concerned with style at the moment, which needs to be converted from string to object to satisfy React.
 * We don't need to convert any other attributes (that we know of), because the placeholder renders them "as-is" by using the special "is" React prop.
 * For whatever reason though, the "style" prop is still validated as needing to be an object when using the "is" prop, which is why we need to convert from string to object.
 * @param {string} [style] style
 * @returns {Array} converted attributes
 */
export declare const convertStyleAttribute: (style?: string) => {};
export declare const convertAttributesToReactProps: (attributes: {
    [key: string]: unknown;
    style?: string;
    class?: string;
}) => [] | {
    [attr: string]: unknown;
};
/**
 * "class" property will be transformed into or appended to "className" instead.
 * @param {string} otherAttrs all other props included on the image component
 * @returns {void}
 */
export declare const addClassName: (otherAttrs: {
    [key: string]: unknown;
}) => void;
/**
 * Converts the given tag attributes object to a string
 * @param {Object.<string, unknown>} attributes the attributes object
 * @returns {string} string representation of the attributes
 */
export declare const getAttributesString: (attributes: {
    [key: string]: unknown;
}) => string;
/**
 * Used in FEAAS and BYOC implementations to convert datasource item field values into component props
 * @param {ComponentFields} fields field collection from Sitecore
 * @returns JSON object that can be used as props
 */
export declare const getDataFromFields: (fields: ComponentFields) => {
    [key: string]: unknown;
};
