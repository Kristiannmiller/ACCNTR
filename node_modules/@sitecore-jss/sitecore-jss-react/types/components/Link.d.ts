/// <reference types="@types/react" />
import React from 'react';
export interface LinkFieldValue {
    [attributeName: string]: unknown;
    href?: string;
    className?: string;
    class?: string;
    title?: string;
    target?: string;
    text?: string;
    anchor?: string;
    querystring?: string;
    linktype?: string;
}
export interface LinkField {
    value: LinkFieldValue;
    editableFirstPart?: string;
    editableLastPart?: string;
}
export type LinkProps = React.DetailedHTMLProps<React.AnchorHTMLAttributes<HTMLAnchorElement>, HTMLAnchorElement> & {
    /** The link field data. */
    field: LinkField | LinkFieldValue;
    /**
     * Can be used to explicitly disable inline editing.
     * If true and `field.editable` has a value, then `field.editable` will be processed and rendered as component output. If false, `field.editable` value will be ignored and not rendered.
     * @default true
     */
    editable?: boolean;
    /**
     * Displays a link text ('description' in Sitecore) even when children exist
     * NOTE: when in Sitecore Experience Editor, this setting is ignored due to technical limitations, and the description is always rendered.
     */
    showLinkTextWithChildrenPresent?: boolean;
};
export declare const Link: React.ForwardRefExoticComponent<Omit<LinkProps, "ref"> & React.RefAttributes<HTMLAnchorElement>>;
