/// <reference types="@types/react" />
import React from 'react';
import { ComponentFields } from '@sitecore-jss/sitecore-jss/layout';
import { MissingComponentProps } from './MissingComponent';
import * as FEAAS from '@sitecore-feaas/clientside/react';
export declare const BYOC_COMPONENT_RENDERING_NAME = "BYOCComponent";
/**
 * FEaaS props for server rendering.
 */
type BYOCServerProps = {
    /**
     * Fetched data from server component props for server rendering, based on rendering params.
     */
    fetchedData?: FEAAS.DataScopes;
};
/**
 * Data from rendering params on Sitecore's BYOC rendering
 */
export type BYOCComponentParams = {
    /**
     * Name of the component to render
     */
    ComponentName?: string;
    /**
     * JSON props to pass into rendered component
     */
    ComponentProps?: string;
    /**
     * A JSON object with data sources to be fetched and passed to the component
     */
    ComponentDataOverride?: string;
    /**
     * A string with classes that can be used to apply themes, via SXA functionality
     */
    styles?: string;
    RenderingIdentifier?: string;
};
/**
 * Props for BYOCComponent. Includes components list to load external components from.
 */
export type BYOCComponentClientProps = {
    /**
     * rendering params
     */
    params?: BYOCComponentParams;
    /**
     * fields from datasource items to be passed as rendered child component props
     */
    fields?: ComponentFields;
    /**
     * Error component override. To be shown when Renderer or underlying component throws
     */
    errorComponent?: React.ComponentClass<ErrorComponentProps> | React.FC<ErrorComponentProps>;
    /**
     * Override to indicate missing component situations. Would be shown when BYOC component is not registered
     * or ComponentName is missing
     */
    missingComponentComponent?: React.ComponentClass<MissingComponentProps> | React.FC<MissingComponentProps>;
};
export type BYOCComponentProps = BYOCComponentClientProps & BYOCServerProps;
type ErrorComponentProps = {
    [prop: string]: unknown;
    error?: Error;
};
/**
 * BYOCComponent facilitate the rendering of external components. It manages potential errors,
 * missing components, and customization of error messages or alternative rendering components.
 * @param {ByocComponentProps} props component props
 * @returns dynamicly rendered component or Missing Component error frame
 */
export declare class BYOCComponent extends React.Component<BYOCComponentProps> {
    state: Readonly<{
        error?: Error;
    }>;
    constructor(props: BYOCComponentProps);
    static getDerivedStateFromError(error: Error): {
        error: Error;
    };
    componentDidCatch(error: Error): void;
    render(): React.JSX.Element;
}
/**
 * Fetches server component props required for server rendering, based on rendering params.
 * @param {BYOCComponentParams} params component params
 */
export declare function fetchBYOCComponentServerProps(params: BYOCComponentParams): Promise<BYOCComponentProps>;
export {};
