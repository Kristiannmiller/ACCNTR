import { JSX } from 'react';
import * as FEAAS from '@sitecore-feaas/clientside/react';
import { ComponentFields, LayoutServicePageState } from '@sitecore-jss/sitecore-jss/layout';
export declare const FEAAS_COMPONENT_RENDERING_NAME = "FEaaSComponent";
/**
 * Params from a Sitecore FEaaS rendering
 */
export type FEaaSComponentParams = {
    LibraryId?: string;
    ComponentId?: string;
    ComponentVersion?: string;
    ComponentRevision?: RevisionType;
    ComponentHostName?: string;
    ComponentInstanceId?: string;
    ComponentDataOverride?: string;
    ComponentHTMLOverride?: string;
    styles?: string;
    RenderingIdentifier?: string;
};
type RevisionType = number | 'staged' | 'published' | 'saved';
/**
 * FEaaS props for server rendering.
 */
type FEaaSComponentServerProps = {
    /**
     * HTML template for presentation rendered inside the component
     */
    template?: string;
    /**
     * Default revision to be fetched. Should be 'staged' for editing/preview. Can be overriden by params.ComponentRevision
     */
    revisionFallback?: RevisionType;
    /**
     * Fetched data from server component props for server rendering, based on rendering params.
     */
    fetchedData?: FEAAS.DataScopes;
};
/**
 * FEaaS props for client side component. Should be used as fallback when server props are not provided.
 * Would also be passed on server to avoid hydration issues
 */
type FEaaSComponentClientProps = {
    /**
     * parameters from Sitecore's FEAAS component
     */
    params?: FEaaSComponentParams;
    /**
     * field data from component's datasource
     */
    fields?: ComponentFields;
};
export type FEaaSComponentProps = FEaaSComponentServerProps & FEaaSComponentClientProps;
/**
 * @param {FEaaSComponentProps} props component props
 */
export declare const FEaaSComponent: (props: FEaaSComponentProps) => JSX.Element;
/**
 * Fetches server component props required for server rendering, based on rendering params.
 * Component endpoint will either be retrieved from params or from endpointOverride
 * @param {FEaaSComponentParams} params component params
 * @param {LayoutServicePageState} [pageState] page state to determine which component variant to use
 * @param {string} [endpointOverride] optional override for component endpoint
 */
export declare function fetchFEaaSComponentServerProps(params: FEaaSComponentParams, pageState?: LayoutServicePageState, endpointOverride?: string): Promise<FEaaSComponentProps>;
/**
 * Build component endpoint URL from component's params
 * @param {FEaaSComponentParams} params rendering parameters for FEAAS component
 * @param {RevisionType} revisionFallback fallback revision to fetch if revision is absent in params
 * @returns component endpoint URL
 */
export declare const composeComponentEndpoint: (params: FEaaSComponentParams, revisionFallback: RevisionType) => string;
export {};
