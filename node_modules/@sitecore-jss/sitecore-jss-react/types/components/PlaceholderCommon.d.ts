/// <reference types="@types/react" />
import React, { ComponentType } from 'react';
import { ComponentFactory } from './sharedTypes';
import { ComponentRendering, RouteData, Field, Item, HtmlElementRendering } from '@sitecore-jss/sitecore-jss/layout';
type ErrorComponentProps = {
    [prop: string]: unknown;
};
/** Provided for the component which represents rendering data */
export type ComponentProps = {
    [key: string]: unknown;
    rendering: ComponentRendering;
};
export interface PlaceholderProps {
    [key: string]: unknown;
    /** Name of the placeholder to render. */
    name: string;
    /** Rendering data to be used when rendering the placeholder. */
    rendering: ComponentRendering | RouteData;
    /**
     * A factory function that will receive a componentName and return an instance of a React component.
     * When rendered within a <SitecoreContext> component, defaults to the context componentFactory.
     */
    componentFactory?: ComponentFactory;
    /**
     * An object of field names/values that are aggregated and propagated through the component tree created by a placeholder.
     * Any component or placeholder rendered by a placeholder will have access to this data via `props.fields`.
     */
    fields?: {
        [name: string]: Field | Item[];
    };
    /**
     * An object of rendering parameter names/values that are aggregated and propagated through the component tree created by a placeholder.
     * Any component or placeholder rendered by a placeholder will have access to this data via `props.params`.
     */
    params?: {
        [name: string]: string;
    };
    /**
     * Modify final props of component (before render) provided by rendering data.
     * Can be used in case when you need to insert additional data into the component.
     * @param {ComponentProps} componentProps component props to be modified
     * @returns {ComponentProps} modified or initial props
     */
    modifyComponentProps?: (componentProps: ComponentProps) => ComponentProps;
    /**
     * A component that is rendered in place of any components that are in this placeholder,
     * but do not have a definition in the componentFactory (i.e. don't have a React implementation)
     */
    missingComponentComponent?: React.ComponentClass<unknown> | React.FC<unknown>;
    /**
     * A component that is rendered in place of any components that are hidden
     */
    hiddenRenderingComponent?: React.ComponentClass<unknown> | React.FC<unknown>;
    /**
     * A component that is rendered in place of the placeholder when an error occurs rendering
     * the placeholder
     */
    errorComponent?: React.ComponentClass<ErrorComponentProps> | React.FC<ErrorComponentProps>;
}
export declare class PlaceholderCommon<T extends PlaceholderProps> extends React.Component<T> {
    nodeRefs: Element[];
    state: Readonly<{
        error?: Error;
    }>;
    constructor(props: T);
    static getPlaceholderDataFromRenderingData(rendering: ComponentRendering | RouteData, name: string): (ComponentRendering | HtmlElementRendering)[];
    componentDidMount(): void;
    componentDidUpdate(): void;
    componentDidCatch(error: Error): void;
    getSXAParams(rendering: ComponentRendering): {
        styles?: undefined;
    } | {
        styles: string;
    };
    getComponentsForRenderingData(placeholderData: (ComponentRendering | HtmlElementRendering)[]): React.ReactElement<{
        [attr: string]: unknown;
    }, string | React.JSXElementConstructor<any>>[];
    getComponentForRendering(renderingDefinition: ComponentRendering): ComponentType | null;
    addRef(nodeRef: Element): void;
    createRawElement(elem: HtmlElementRendering, baseProps: {
        key?: string;
    }): React.ReactElement<{
        [attr: string]: unknown;
        key?: string;
        dangerouslySetInnerHTML?: {
            __html: string | null;
        };
    }, string | React.JSXElementConstructor<any>>;
    updateKeyAttributes(): void;
}
export {};
