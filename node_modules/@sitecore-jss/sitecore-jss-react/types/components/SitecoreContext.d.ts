/// <reference types="@types/react" />
import React from 'react';
import { ComponentFactory } from './sharedTypes';
import { LayoutServiceContext, LayoutServiceData, RouteData } from '../index';
export interface SitecoreContextProps {
    componentFactory: ComponentFactory;
    layoutData?: LayoutServiceData;
    children: React.ReactNode;
}
export interface SitecoreContextState {
    setContext: (value: SitecoreContextValue | LayoutServiceData) => void;
    context: SitecoreContextValue;
}
export declare const SitecoreContextReactContext: React.Context<SitecoreContextState>;
export declare const ComponentFactoryReactContext: React.Context<ComponentFactory>;
export type SitecoreContextValue = LayoutServiceContext & {
    itemId?: string;
    route?: RouteData;
};
export declare class SitecoreContext extends React.Component<SitecoreContextProps, SitecoreContextState> {
    static displayName: string;
    constructor(props: SitecoreContextProps);
    constructContext(layoutData?: LayoutServiceData): SitecoreContextValue;
    componentDidUpdate(prevProps: SitecoreContextProps): void;
    /**
     * Update context state. Value can be @type {LayoutServiceData} which will be automatically transformed
     * or you can provide exact @type {SitecoreContextValue}
     * @param {SitecoreContextValue | LayoutServiceData} value New context value
     */
    setContext: (value: SitecoreContextValue | LayoutServiceData) => void;
    render(): React.JSX.Element;
}
