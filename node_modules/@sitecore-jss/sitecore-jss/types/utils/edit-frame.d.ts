export declare type ChromeCommand = {
    isDivider: boolean;
    click: string;
    header: string;
    icon: string;
    tooltip: string | null;
    type: string | null;
};
export declare const DefaultEditFrameButtonIds: {
    edit: string;
};
export declare const DefaultEditFrameButton: {
    insert: {
        header: string;
        icon: string;
        click: string;
        tooltip: string;
    };
    editRelatedItem: {
        header: string;
        icon: string;
        click: string;
        tooltip: string;
    };
    edit: {
        header: string;
        icon: string;
        fields: string[];
        tooltip: string;
    };
};
export declare const DefaultEditFrameButtons: ({
    header: string;
    icon: string;
    click: string;
    tooltip: string;
} | {
    header: string;
    icon: string;
    fields: string[];
    tooltip: string;
})[];
export declare type EditFrameDataSource = {
    itemId: string;
    databaseName?: string;
    language?: string;
};
export declare type BaseEditButton = {
    isDivider?: boolean;
    header?: string;
    icon?: string;
    tooltip?: string;
};
export declare type FieldEditButton = BaseEditButton & {
    fields: string[];
};
export declare type WebEditButton = BaseEditButton & {
    click: string;
    parameters?: Record<string, string | number | boolean | undefined | null>;
    type?: string;
};
export declare type EditButtonTypes = WebEditButton | FieldEditButton | '|';
/**
 * Map the edit button types to chrome data
 * @param {EditButtonTypes } button the edit button to build a ChromeCommand for
 * @param {string} itemId the ID of the item the EditFrame is associated with
 * @param {Record<string, string | number | boolean | undefined | null>} frameParameters additional parameters passed to the EditFrame
 */
export declare function mapButtonToCommand(button: EditButtonTypes, itemId?: string, frameParameters?: Record<string, string | number | boolean | undefined | null>): ChromeCommand;
/**
 * Build a ChromeCommand from a web edit button. Merging the parameters from the button, frame and id
 * @param {WebEditButton } button the web edit button to build a ChromeCommand for
 * @param {string} itemId the ID of the item the EditFrame is associated with
 * @param {Record<string, string>} frameParameters additional parameters passed to the EditFrame
 */
export declare function commandBuilder(button: WebEditButton, itemId?: string, frameParameters?: Record<string, string | number | boolean | undefined | null>): ChromeCommand;
