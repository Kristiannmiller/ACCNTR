import * as BYOC from '@sitecore/byoc/react';
import React from 'react';
import { HTMLNode, renderHTMLContent } from '../dom/html.js';
import { FEAASCDNStylesheetParams, FEAASCDNStylesheetSource, FEAASComponentProps } from './index.js';
export * from '../headless.js';
export { External, FEAASExternalPropsObject, linkComponents } from './FEAASExternal.js';
export * from './index.js';
export { renderHTMLContent };
/**
 * Set custom implementation for a HTML tag name. Useful for Next.js Image component, handling image optimization.
 *
 * @param Component
 */
export declare function setElementImplementation(tagName: string, Component: React.Component<Record<string, string>> | React.FC<Record<string, string>>): void;
type FEEASReactComponentFetch = string[] | string | null | undefined | boolean;
export declare function normalizeFetchAttribute(fetch: FEEASReactComponentFetch): any[];
export type FEAASReactComponentProps = FEAASComponentProps & {
    fetch?: FEEASReactComponentFetch;
    preload?: boolean;
    lastModified?: Date | string;
    renderNode?: (node: HTMLNode, attributes: Record<string, any>) => JSX.Element | Record<string, any> | null;
};
/**
 * A component to include a stylesheet using a <link> tag. Placing one in the HEAD ensures that there will be no flash
 * of unstyled content.
 *
 * @param {FEAASCDNStylesheetParams | FEAASCDNStylesheetSource} props  - The properties for including the stylesheet.
 * @returns {JSX.Element} The <link> element for the stylesheet.
 */
export declare const FEAASReactStylesheet: (props: FEAASCDNStylesheetParams | FEAASCDNStylesheetSource) => React.JSX.Element;
/**
 * An asynchronous wrapper over FEAAS.Component for use in React, especially suited for Next.js.
 * This component fetches HTML and data asynchronously for server-side rendering with data mapping.
 *
 * @param {FEAASReactComponentProps} props  - The properties for the component.
 * @returns {Promise<JSX.Element>} The JSX element representing the component.
 */
export declare const FEAASReactServerComponent: ({ data, fetch, ...props }: FEAASReactComponentProps) => Promise<React.JSX.Element>;
/**
 * A wrapper over FEAAS.Component for use in React. It converts a passed template HTML into React,
 * allowing external components in the render tree. Data can be provided in JSON format.
 *
 * @param {FEAASReactComponentProps} props  - The properties for the component.
 * @returns {JSX.Element} The JSX element representing the component.
 */
export declare function FEAASReactComponent({ data, lastModified, fetchedData, renderNode, ...props }: FEAASReactComponentProps & {
    fetchedData?: any;
}): React.JSX.Element;
/**
 * Converts an HTMLNode into a React tree, ensuring proper context access for external components.
 *
 * @param {HTMLNode} node        - The HTML node to be converted.
 * @param {any}      [callback]  - Callback to customize turning of HTML node into react tree.
 * @param {any}      [key]       - The key for the React element.
 * @returns {React.ReactNode} The resulting React node.
 */
export declare function HTMLNodeToReact(node: HTMLNode, callback?: (node: HTMLNode, attributes: Record<string, any>) => [tagName: any, attributes: Record<string, any>], key?: any): React.ReactNode;
export type ExternalComponentProps = BYOC.ComponentProps;
export type ContextProperties = BYOC.ContextProperties;
export declare const enableNextClientsideComponents: typeof BYOC.enableNextClientsideComponents;
export declare const setContextProperties: typeof BYOC.setContextProperties;
export declare const ExternalComponentBundle: typeof BYOC.Bundle;
export declare const ExternalComponent: typeof BYOC.Component;
export declare const ReactExternalComponent: typeof BYOC.RegularComponent;
export declare const NextExternalComponent: typeof BYOC.NextComponent;
export declare const Component: typeof FEAASReactComponent;
export declare const ServerComponent: ({ data, fetch, ...props }: FEAASReactComponentProps) => Promise<React.JSX.Element>;
export declare const Stylesheet: (props: FEAASCDNStylesheetParams | FEAASCDNStylesheetSource) => React.JSX.Element;
//# sourceMappingURL=react.d.ts.map