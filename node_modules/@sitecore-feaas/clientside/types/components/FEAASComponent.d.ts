import { ControlledPromise } from '../utils/promise.js';
import { DataOptions } from '../utils/settings.js';
import { FEAASElement } from './FEAASElement.js';
export declare function FEAASComponentsProps(element: FEAASElement): {
    data: DataOptions;
    cdn: string;
    library: string;
    component: string;
    version: string;
    revision: number | "staged" | "published" | "saved";
    hostname: string;
    template: string;
    instance: string;
    editable: boolean;
    suspended: boolean;
    lastModified: string;
    fetch: string[];
};
export type FEAASComponentsProps = ReturnType<typeof FEAASComponentsProps>;
/**
 * - Initialization lifecycle:
 * - - `set(props)`
 * - - `scheduleRender()` - any attribute change causes render to schedule to next frame
 * - - `whenRendered.restart()` - rendering promise is reset and will resolve after render
 * - - `advance()` - called on next frame
 * - - `if (isReadyToLoad()) => boolean` - check if component has all necessary properties to load
 * - - `load() => payload` => component is loaded
 * - - `onLoad?(payload)` => invoke loaded callback for cached version of a component
 * - - `advance()` => going further in state machine
 * - - `flush()` => flushes all react changes if needed
 * - - `update()` => component-specific method (or react) to render changes to dom
 * - - `render(payload, props)` => render means react
 * - - `whenRendered.resolve()` - rendering promise is resolved after rendering
 * - - IF CACHE WAS STALE - FETCH AND RENDER AGAIN
 * - - `fetchByPassingCache()` - load up-to-date version of a component
 * - - `onLoad(newPayload) `
 * - - `advance()` => going further in state machine
 * - - `flush()` => flushes all react changes if needed
 * - - `update()` => component-specific method (or react) to render changes to dom
 * - - `render(payload, props)` => render means react
 * - - `whenRendered.resolve()` - rendering promise is resolved after rendering
 * - - `whenLoaded.resolved()` - resolved after loading of up to date component
 */
export declare class FEAASComponent extends FEAASElement<FEAASComponentsProps, string> {
    readyData: any;
    whenDataReady: ControlledPromise<any>;
    static observedAttributes: string[];
    defaultProps: Partial<{
        data: DataOptions;
        cdn: string;
        library: string;
        component: string;
        version: string;
        revision: number | "staged" | "published" | "saved";
        hostname: string;
        template: string;
        instance: string;
        editable: boolean;
        suspended: boolean;
        lastModified: string;
        fetch: string[];
    }>;
    needsRefresh: boolean;
    needsToFetchTemplate: boolean;
    setData(data: DataOptions): void;
    getProps(): {
        data: DataOptions;
        cdn: string;
        library: string;
        component: string;
        version: string;
        revision: number | "staged" | "published" | "saved";
        hostname: string;
        template: string;
        instance: string;
        editable: boolean;
        suspended: boolean;
        lastModified: string;
        fetch: string[];
    };
    isJSONAttribute(prop: keyof FEAASComponentsProps): boolean;
    attributeChangedCallback(name: string, oldValue: string, newValue: string): void;
    fetchData(): Promise<void>;
    getEditor(): any;
    constructor();
    edit(): boolean;
    getOriginal(): FEAASComponent;
    isReadyToLoad(): boolean;
    onLoad: (html: string) => void;
    load(): Promise<string>;
    alreadyRendered: boolean;
    flush(): void;
    update(): void;
}
type FetchKeyword = 'data' | 'template' | 'stylesheet';
declare module 'react' {
    namespace JSX {
        interface IntrinsicElements {
            'feaas-component': {
                data?: any;
                class?: string;
                suppressHydrationWarning?: boolean;
                template?: string;
                instance?: string;
                editable?: boolean;
                children?: any;
                dangerouslySetInnerHTML?: {
                    __html: string;
                };
                'last-modified'?: string;
                fetch?: `${FetchKeyword} ${FetchKeyword} ${FetchKeyword}` | `${FetchKeyword} ${FetchKeyword}` | `${FetchKeyword}` | '';
            } & ({
                /**
                 * @deprecated Use cdn instead.
                 */
                hostname?: string;
                cdn?: string;
                library: string;
                component: string;
                version?: string;
                revision?: FEAASComponentsProps['revision'];
            } | {
                src: string;
            } | {
                template: string;
            });
        }
    }
}
export { FEAASComponent as Component, FEAASComponentsProps as ComponentProps };
//# sourceMappingURL=FEAASComponent.d.ts.map