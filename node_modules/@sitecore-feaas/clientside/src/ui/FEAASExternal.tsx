import * as BYOC from '@sitecore/byoc'
import React from 'react'
import ReactDOM from 'react-dom'
import { FEAASElement } from '../components/FEAASElement.js'
import { ReactJSX, ReactModules } from '../components/FEAASReactElement.js'
import { Component, FEAASComponentProps } from './react.js'

export const FEAASExternalPropsObject = BYOC.getMergedComponentProperties

export function FEAASExternalProps(element: FEAASElement): FEAASExternalProps {
  const props = BYOC.objectKeysToCamelCase(
    Array.from(element.attributes).reduce((prev, { name, value }) => {
      if (name == 'data-external-id') name = 'component-name'
      return Object.assign(prev, { [name]: value })
    }, {} as any)
  ) as FEAASExternalProps
  return FEAASExternalPropsObject(props).merged
}

export type FEAASExternalProps = { componentName: string; [key: string]: any }

export default class FEAASExternal extends FEAASElement<FEAASExternalProps, ReactModules> {
  load() {
    return Promise.resolve({ React, ReactDOM })
  }

  // observe all arttribute changes
  _setAttribute: typeof HTMLElement.prototype.setAttribute
  connectedCallback() {
    if (!this._setAttribute) {
      this._setAttribute = this.setAttribute
      this.setAttribute = function (name, value) {
        const old = this.getAttribute(value)
        this._setAttribute(name, value)
        this.attributeChangedCallback(name, old, value)
      }
    }
    super.connectedCallback()
  }

  update() {
    const Component = BYOC.getComponent(this.getComponentName())?.component
    if (!Component && this.getAttribute('hydrate') == 'false') return
    return super.update()
  }

  render(props: FEAASExternalProps, { React }: ReactModules): ReactJSX {
    const Component = BYOC.getComponent(this.getComponentName())?.component as any
    if (!Component) {
      console.warn(`FEAASExternal: \`${this.getComponentName()}\` is not registered`)
    }
    return <>{Component && <Component componentName={this.getComponentName()} {...props} />}</>
  }

  getComponentName() {
    return this.getAttribute('data-external-id')
  }

  getProps() {
    return FEAASExternalProps(this)
  }

  static Preview(props: Partial<FEAASComponentProps<any>> & { src: string }) {
    const src =
      props?.src || (typeof window !== 'undefined' ? window.location.search.match(/feaasSrc=([^&]+)/)?.[1] : null)
    return src ? <Component src={src} {...props} /> : null
  }

  static linkComponents(components: Promise<any>[]): () => any {
    return () => components.map((components) => null)
  }

  static registered: BYOC.RegisteredComponents = BYOC.registered
  static registerComponent = BYOC.registerComponent
  static setRegistrationCallback = BYOC.setRegistrationCallback
  static getComponent = BYOC.getComponent
}

FEAASExternal.register('feaas-external')

export const { linkComponents } = FEAASExternal
export { FEAASExternal as External }
