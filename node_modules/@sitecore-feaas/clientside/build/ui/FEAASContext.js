import { FEAASElement } from '../components/FEAASElement.js';
import { ControlledPromise } from '../utils/promise.js';
export function FEAASContextProps(element) {
    var _a, _b, _c, _d, _e;
    return {
        library: element === null || element === void 0 ? void 0 : element.getAttribute('library'),
        src: (_a = element === null || element === void 0 ? void 0 : element.getAttribute('src')) !== null && _a !== void 0 ? _a : '/context.js',
        // override environment
        environment: (_b = element === null || element === void 0 ? void 0 : element.getAttribute('environment')) !== null && _b !== void 0 ? _b : undefined,
        frontend: (_c = element === null || element === void 0 ? void 0 : element.getAttribute('frontend')) !== null && _c !== void 0 ? _c : 'https://components.sitecorecloud.io',
        backend: (_d = element === null || element === void 0 ? void 0 : element.getAttribute('backend')) !== null && _d !== void 0 ? _d : 'https://components.sitecorecloud.io/api',
        cdn: (_e = element === null || element === void 0 ? void 0 : element.getAttribute('cdn')) !== null && _e !== void 0 ? _e : 'https://feaas.blob.core.windows.net',
        auth: null,
        isolate: (element === null || element === void 0 ? void 0 : element.getAttribute('isolate')) == null || (element === null || element === void 0 ? void 0 : element.getAttribute('isolate')) == 'true'
    };
}
/**
 * Context provides shared parameters and react providers for its nested elements. It loads lazily once any of its
 * nested components load. Just placing it on the page without any consumers does not impose any overhead.
 */
class FEAASContext extends FEAASElement {
    constructor() {
        super(...arguments);
        this.defaultProps = {
            isolate: true
        };
        this.onStatusChange = (status, sdk) => {
            if (status == 'ready') {
                this.whenSDKReady.resolve(sdk);
                this.dispatchEvent(new CustomEvent('feaasReady', { bubbles: true, composed: true, detail: sdk }));
            }
        };
        this.whenSDKReady = ControlledPromise((sdk) => {
            this.sdk = sdk;
        });
    }
    getProps() {
        return FEAASContextProps(this);
    }
    load() {
        return this.import(this.formatURL(this.props.src, this.props.frontend));
    }
    isReadyToLoad() {
        return super.isReadyToLoad() && this.props.library != null;
    }
    // Remove global styles
    getTheme(theme) {
        return theme;
    }
    getRoot() {
        if (this.getAttribute('isolate') === 'false')
            return this;
        return this.shadowRoot || this.attachShadow({ mode: 'open' });
    }
    getReactRootElement() {
        //if (!this.props.isolate) return this.getRoot()
        if (!this.reactRootElement) {
            this.reactRootElement = document.createElement('div');
            this.getRoot().appendChild(this.reactRootElement);
        }
        return this.reactRootElement;
    }
    /** Pull in children FEAAS react elements into the shadow DOM so they receieve the styles */
    connectedCallback() {
        this.setAttribute('feaas-role', 'ui');
        //if (this.props.isolate)
        Array.from(this.children).forEach((child) => {
            this.getRoot().appendChild(child);
        });
        document.addEventListener('feaasMount', this);
        document.addEventListener('feaasUnmount', this);
        super.connectedCallback();
    }
    disconnectedCallback() {
        document.removeEventListener('feaasMount', this);
        document.removeEventListener('feaasUnmount', this);
        super.disconnectedCallback();
    }
    getPortalRoot() {
        return this.getRoot();
    }
    render({ children, library }, { AppContext, Chakra: { Button, Tooltip }, React }) {
        const portalProps = {
            containerRef: { current: this.getPortalRoot() }
        };
        Tooltip.defaultProps = {
            hasArrow: true,
            placement: 'top',
            portalProps
        };
        return (React.createElement(AppContext, { environment: this.props.environment, backend: this.props.backend, libraryId: this.props.library, container: this.getRoot(), auth: this.props.auth, getTheme: this.getTheme, onStatusChange: this.onStatusChange, modalProps: {
                portalProps
            }, chakraProps: {
                resetScope: ':where([feaas-role="ui"])',
                cssVarsRoot: ':host',
                resetCSS: true,
                toastOptions: {
                    portalProps
                }
            } }, children));
    }
}
FEAASContext.observedAttributes = ['library', 'component', 'version', 'revision', 'hostname', 'template'];
export { FEAASContext };
export { FEAASContext as Context };
FEAASContext.register('feaas-context');
//# sourceMappingURL=FEAASContext.js.map