import { FEAASElement } from '../components/FEAASElement.js';
export function FEAASPickerProps(element) {
    var _a, _b;
    return {
        part: (element === null || element === void 0 ? void 0 : element.getAttribute('part')) || 'picker',
        slot: (element === null || element === void 0 ? void 0 : element.getAttribute('part')) || 'picker',
        mode: element === null || element === void 0 ? void 0 : element.getAttribute('mode'),
        dialog: element === null || element === void 0 ? void 0 : element.getAttribute('dialog'),
        placeholder: (element === null || element === void 0 ? void 0 : element.getAttribute('placeholder')) || 'No theme',
        frontend: (_a = element === null || element === void 0 ? void 0 : element.getContextAttribute('frontend')) !== null && _a !== void 0 ? _a : 'https://components.sitecorecloud.io',
        src: (_b = element === null || element === void 0 ? void 0 : element.getAttribute('src')) !== null && _b !== void 0 ? _b : '/picker.js',
        hidden: (element === null || element === void 0 ? void 0 : element.getAttribute('hidden')) != null,
        variant: element === null || element === void 0 ? void 0 : element.getAttribute('variant'),
        context: undefined,
        onClose: undefined,
        setAttribute: undefined,
        getAttribute: undefined
    };
}
class FEAASPicker extends FEAASElement {
    constructor() {
        super(...arguments);
        this.defaultProps = {
            hidden: false
        };
    }
    getProps() {
        return FEAASPickerProps(this);
    }
    load() {
        return this.import(this.formatURL(this.props.src, this.props.frontend));
    }
    connectedCallback() {
        this.setAttribute('feaas-role', 'ui');
        super.connectedCallback();
    }
    render({ placeholder, context, mode, dialog, children, variant }, { Picker, React, useContext, EnvironmentContext, useLibrary, useSDK, BYOC }) {
        var _a, _b, _c;
        const [renders, forceRender] = React.useReducer((c) => c + 1, 0);
        const sdk = useSDK();
        const env = useContext(EnvironmentContext);
        const collections = useLibrary('collections');
        const components = useLibrary('components');
        const datasources = useSDK('datasources');
        const library = useLibrary();
        // @ts-ignore temporary workaround until we release all environments
        const rules = ((_b = (_a = library === null || library === void 0 ? void 0 : library.stylesheets) === null || _a === void 0 ? void 0 : _a.first) === null || _b === void 0 ? void 0 : _b.rules) || ((_c = library === null || library === void 0 ? void 0 : library.stylesheet) === null || _c === void 0 ? void 0 : _c.styles);
        const expandedComponents = useSDK('renderingHost.expandedComponents');
        var settings = context === null || context === void 0 ? void 0 : context.getAttribute('data');
        if (settings) {
            try {
                settings = JSON.parse(settings);
            }
            catch (e) { }
        }
        if (context) {
            var embedDefinition = sdk.ExternalComponent.getDefinition(context);
            var isUnconfigured = embedDefinition && !embedDefinition.getConfiguration(context);
            var externalComponent = (embedDefinition === null || embedDefinition === void 0 ? void 0 : embedDefinition.type) == 'feaas'
                ? components.find((c) => c.id == context.getAttribute('component'))
                : BYOC === null || BYOC === void 0 ? void 0 : BYOC.getComponent(String(context.getAttribute('data-external-id')));
        }
        return (React.createElement(Picker, { cdn: env.cdn, rules: rules, collections: collections, themeContext: context, placeholder: placeholder, embed: externalComponent, externalComponents: expandedComponents, datasources: datasources, data: settings, versionId: context === null || context === void 0 ? void 0 : context.getAttribute('version'), mode: mode || (isUnconfigured ? 'library' : externalComponent ? 'context' : null), setAttribute: (context, attribute, value) => {
                if (attribute == 'data' && value)
                    value = JSON.stringify(value);
                this.props.setAttribute(context, attribute, value);
                forceRender();
            }, getAttribute: (c, property) => context === null || context === void 0 ? void 0 : context.getAttribute(property), dialog: dialog, context: context, variant: variant, onModeChange: (mode, dialog) => {
                this.set({ mode, dialog });
            } }, children));
    }
}
FEAASPicker.observedAttributes = ['library', 'mode', 'frontend', 'src', 'hidden', 'variant', 'dialog'];
export { FEAASPicker };
export { FEAASPicker as Picker };
FEAASPicker.register('feaas-picker');
//# sourceMappingURL=FEAASPicker.js.map