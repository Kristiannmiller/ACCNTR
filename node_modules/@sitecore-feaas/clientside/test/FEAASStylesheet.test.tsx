import { afterAll, beforeEach, beforeAll, describe, expect, it, vi } from 'vitest'
import { FEAASStylesheet } from '../src/components/FEAASStylesheet.js'
import { renderDOMContent } from '../src/dom/rendering.js'
import { clearFetchCache, DEFAULT_CDN_URL, findStylesheet, loadStylesheet } from '../src/headless.js'

const earliest = new Date(2000, 1, 1, 0, 0, 0)
const earlier = new Date(2000, 1, 2, 0, 0, 0)
const now = new Date(2000, 1, 2, 12, 0, 0)

describe('Stylesheet', () => {
  beforeAll(() => {
    // vi.useFakeTimers()
    vi.setSystemTime(now)
  })
  beforeEach(() => {
    document.open()
    document.write('<html><head></head><body></body></html')
    document.close()
    clearFetchCache()
  })
  it('should instantiate', () => {
    expect(new FEAASStylesheet()).toBeInstanceOf(FEAASStylesheet)
  })
  it('should not load unconfigured stylesheet', async () => {
    const spy = vi.spyOn(global, 'fetch')
    document.body.innerHTML = '<feaas-stylesheet cdn="CDN" revision="R"></feaas-stylesheet>'
    expect(spy).toHaveBeenCalledTimes(0)
  })
  it('should load stylesheet (cold cache)', async () => {
    const spy = vi.spyOn(global, 'fetch')
    spy.mockImplementation(async (url: string, options: Parameters<typeof fetch>[1] = {}) => {
      return new Response('FRESH {}', {
        headers: {
          date: now.toUTCString(),
          'last-modified': earlier.toUTCString()
        }
      })
    })

    document.body.innerHTML = '<feaas-stylesheet library="L" cdn="CDN" revision="R"></feaas-stylesheet>'

    const stylesheet = document.body.firstElementChild as FEAASStylesheet

    await expect(stylesheet.whenRendered).resolves.toEqual(stylesheet)
    expect(spy).toHaveBeenCalledTimes(1)

    expect(document.head.querySelector('style').textContent).toContain('FRESH')
  })
  it('should load stylesheet with minimum parameters(cold cache)', async () => {
    const spy = vi.spyOn(global, 'fetch')
    spy.mockImplementation(async (url: string, options: Parameters<typeof fetch>[1] = {}) => {
      if (url.match(DEFAULT_CDN_URL + '/styles/L/published.css'))
        return new Response('FRESH {}', {
          headers: {
            date: now.toUTCString(),
            'last-modified': earlier.toUTCString()
          }
        })
    })

    document.body.innerHTML = '<feaas-stylesheet library="L"></feaas-stylesheet>'

    const stylesheet = document.body.firstElementChild as FEAASStylesheet

    await expect(stylesheet.whenRendered).resolves.toEqual(stylesheet)
    expect(spy).toHaveBeenCalledTimes(1)

    expect(document.head.querySelector('style').textContent).toContain('FRESH')
  })

  it('should invalidate stylesheet cache', async () => {
    const spy = vi.spyOn(global, 'fetch')
    spy.mockImplementation(async (url: string, options: Parameters<typeof fetch>[1] = {}) => {
      if (url.match('CDN/styles/L/published.css') && options?.method != 'HEAD') {
        return new Response('FRESH {}', {
          headers: {
            date: earlier.toUTCString(),
            'last-modified': earlier.toUTCString()
          }
        })
      } else if (url.match('CDN/styles/L/published.css') && options?.method == 'HEAD') {
        return new Response(null, {
          headers: {
            date: earlier.toUTCString(),
            'last-modified': earlier.toUTCString()
          }
        })
      }
    })

    document.body.innerHTML = '<feaas-stylesheet library="L" cdn="CDN" revision="published"></feaas-stylesheet>'

    const stylesheet = document.body.firstElementChild as FEAASStylesheet

    await expect(stylesheet.whenRendered).resolves.toEqual(stylesheet)
    expect(spy).toHaveBeenCalledTimes(2)

    expect(document.head.querySelector('style').textContent).toContain('FRESH')
  })
  it('should update stylesheet while using stale cache', async () => {
    const spy = vi.spyOn(global, 'fetch')
    spy.mockImplementation(async (url: string, options: Parameters<typeof fetch>[1] = {}) => {
      if (url.match('CDN/styles/L/staged.css') && options?.method != 'HEAD' && options?.['cache'] != 'reload') {
        // Serve from cache
        return new Response('YESTERDAY {}', {
          headers: {
            date: earlier.toUTCString(),
            'last-modified': earliest.toUTCString()
          }
        })
      } else if (url.match('CDN/styles/L/staged.css') && options?.method == 'HEAD') {
        // Validate
        return new Response(null, {
          headers: {
            date: now.toUTCString(),
            'last-modified': earlier.toUTCString()
          }
        })
      } else {
        return new Response('FRESH {}', {
          headers: {
            date: now.toUTCString(),
            'last-modified': earlier.toUTCString()
          }
        })
      }
    })

    document.body.innerHTML = '<feaas-stylesheet library="L" cdn="CDN" revision="staged"></feaas-stylesheet>'

    const stylesheet = document.body.firstElementChild as FEAASStylesheet

    await expect(stylesheet.whenRendered).resolves.toEqual(stylesheet)
    expect(spy).toHaveBeenCalledTimes(2)
    expect(document.head.querySelector('style').textContent).toContain('YESTERDAY {}')

    // whenLoaded only fires when ensures that up-to-date version is loaded
    await expect(stylesheet.whenLoaded).resolves.toBeTruthy()
    expect(spy).toHaveBeenCalledTimes(3)
    expect(document.head.querySelector('style').textContent).toContain('FRESH {}')
  })

  it('should load stylesheet statically', async () => {
    const spy = vi.spyOn(global, 'fetch')
    spy.mockImplementation(async (url: string, options: Parameters<typeof fetch>[1] = {}) => {
      if (url.match('CDN/styles/L/published.css') && options?.method != 'HEAD' && options?.['cache'] != 'reload') {
        // Serve from cache
        return new Response('YESTERDAY {}', {
          headers: {
            date: earlier.toUTCString(),
            'last-modified': earliest.toUTCString()
          }
        })
      } else if (url.match('CDN/styles/L/published.css') && options?.method == 'HEAD') {
        // Validate
        return new Response(null, {
          headers: {
            date: now.toUTCString(),
            'last-modified': earlier.toUTCString()
          }
        })
      } else {
        return new Response('FRESH {}', {
          headers: {
            date: now.toUTCString(),
            'last-modified': earlier.toUTCString()
          }
        })
      }
    })

    await expect(
      loadStylesheet({
        cdn: 'CDN',
        library: 'L',
        revision: 'published'
      }).then((r) => r.textContent)
    ).resolves.toEqual('FRESH {}')
    await expect(loadStylesheet(`http://CDN/L/published.css`).then((r) => r.textContent)).resolves.toEqual('FRESH {}')
  })

  describe('.findStylesheet', () => {
    it('should find FEAASStylesheet', async () => {
      const spy = vi.spyOn(global, 'fetch')
      spy.mockImplementation(async (url: string, options: Parameters<typeof fetch>[1] = {}) => {
        // Serve from cache
        return new Response('CSS {}', {
          headers: {
            date: earlier.toUTCString(),
            'last-modified': earliest.toUTCString()
          }
        })
      })

      document.body.innerHTML = '<feaas-stylesheet library="L" cdn="https://CDN" revision="staged"></feaas-stylesheet>'
      const stylesheet = document.body.firstElementChild as FEAASStylesheet
      await stylesheet.whenRendered
      expect(findStylesheet({ library: 'L', cdn: 'https://CDN', revision: 'staged' })?.textContent).toEqual('CSS {}')
    })
  })
  it('should find stylesheet by its edge url', async () => {
    document.body.innerHTML =
      '<link rel="http://edge-platform-staging.sitecore-staging.cloud/v1/files/components/styles/L.css?sitecoreContextId=abc/>'
    expect(findStylesheet({ library: 'L', cdn: 'https://CDN', revision: 'staged' })).toEqual(
      document.body.firstElementChild
    )
    expect(findStylesheet({ library: 'L', cdn: 'https://CDN', revision: 'published' })).toEqual(
      document.body.firstElementChild
    )
    expect(findStylesheet({ library: 'T', cdn: 'https://CDN', revision: 'staged' })).toEqual(null)
    expect(findStylesheet({ library: 'T', cdn: 'https://CDN', revision: 'published' })).toEqual(null)
  })
  it('should reload stylesheet embedded as edge url', async () => {
    const spy = vi.spyOn(global, 'fetch')
    spy.mockImplementation(async (url: string, options: Parameters<typeof fetch>[1] = {}) => {
      if (
        !url.includes(
          'http://edge-platform-staging.sitecore-staging.cloud/v1/files/components/styles/L.css?sitecoreContextId=abc'
        )
      )
        return

      if (options?.method != 'HEAD') {
        // Serve from cache
        return new Response('YESTERDAY {}', {
          headers: {
            date: earlier.toUTCString(),
            'last-modified': earliest.toUTCString()
          }
        })
      } else if (options?.method == 'HEAD') {
        return new Response(null, {
          headers: {
            date: now.toUTCString(),
            'last-modified': earlier.toUTCString()
          }
        })
      } else {
        return new Response('FRESH {}', {
          headers: {
            date: now.toUTCString(),
            'last-modified': earlier.toUTCString()
          }
        })
      }
    })

    document.body.innerHTML =
      '<link rel="stylesheet" href="http://edge-platform-staging.sitecore-staging.cloud/v1/files/components/styles/L.css?sitecoreContextId=abc" />'

    const stylesheet = await loadStylesheet({ library: 'L', cdn: 'https://CDN', revision: 'staged' })
    expect(stylesheet?.tagName).toEqual('STYLE')
    expect(stylesheet?.getAttribute('data-href')).toEqual(
      'http://edge-platform-staging.sitecore-staging.cloud/v1/files/components/styles/L.css?sitecoreContextId=abc'
    )
  })
  it("should not attempt to reload edge stylesheet if it's up to date", async () => {
    const spy = vi.spyOn(global, 'fetch')
    spy.mockImplementation(async (url: string, options: Parameters<typeof fetch>[1] = {}) => {
      if (
        !url.includes(
          'http://edge-platform-staging.sitecore-staging.cloud/v1/files/components/styles/L.css?sitecoreContextId=abc'
        )
      )
        return

      if (options?.method != 'HEAD') {
        // Serve from cache
        return new Response('YESTERDAY {}', {
          headers: {
            date: now.toUTCString(),
            'last-modified': earliest.toUTCString()
          }
        })
      }
    })

    document.body.innerHTML =
      '<link rel="stylesheet" href="http://edge-platform-staging.sitecore-staging.cloud/v1/files/components/styles/L.css?sitecoreContextId=abc" />'

    const stylesheet = await loadStylesheet({ library: 'L', cdn: 'https://CDN', revision: 'staged' })
    expect(stylesheet?.tagName).toEqual('LINK')
    expect(stylesheet).toEqual(document.body.firstElementChild)
  })
})
