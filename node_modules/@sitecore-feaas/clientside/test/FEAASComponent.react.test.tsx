import React, { useContext } from 'react'
import ReactDOM from 'react-dom'
import { describe, expect, it, beforeEach, vi } from 'vitest'
import {
  Component,
  ExternalComponent,
  FEAASElement,
  registerComponent,
  setElementImplementation
} from '../src/ui/react.js'

function Hello(props: { firstName: string; telephone: string }) {
  const context = useContext(DataContext)

  return React.createElement(
    'div',
    {},
    `
Hello my name is ${props.firstName || 'Unknown'} (${typeof props.firstName}) and my tel is ${
      props.telephone || 'Unknown'
    } (${typeof props.telephone}).
And context value is ${context}`
  )
}
const helloSchema = {
  name: 'MyTestComponent',
  properties: {
    firstName: {
      type: 'string'
    },
    telephone: {
      type: 'number'
    }
  }
} as const

function HelloData(props: { firstName: string; telephone: string; datasources: any; superobject: any }) {
  const context = useContext(DataContext)

  return React.createElement(
    'div',
    {},
    `
Hello my name is ${props.firstName || 'Unknown'} (${typeof props.firstName}) and my tel is ${
      props.telephone || 'Unknown'
    } (${typeof props.telephone}).
And context value is ${context}.
Typeof datasources: ${typeof props.datasources} with keys ${Object.keys(props.datasources || {})})
Typeof superobject ${typeof props.superobject}, ${JSON.stringify(props.superobject)})`
  )
}
const helloDataSchema = {
  name: 'MyTestDataComponent',
  properties: {
    firstName: {
      type: 'string'
    },
    telephone: {
      type: 'number'
    },
    superobject: {
      type: 'object'
    }
  }
} as const

export async function validate(react: any, html: string) {
  const div = document.createElement('div')
  document.body.appendChild(div)
  const root = ReactDOM.render(react, div)
  expect(div.innerHTML).toEqual(html)

  const div2 = document.createElement('div')
  document.body.appendChild(div2)
  div2.innerHTML = html

  var onHydrate
  const promise = new Promise((r) => {
    onHydrate = r
  })
  ReactDOM.hydrate(react, div2, onHydrate)
  await promise
  expect(div2.innerHTML).toEqual(html)
}

const DataContext = React.createContext('DEFAULT')

describe('React', () => {
  beforeEach(() => {
    document.open()
    document.write('<html><head></head><body></body></html>')
    document.close()
  })
  it('render react component', async () => {
    await validate(
      <section>
        <Component src='library/test' />
      </section>,
      '<section><feaas-component class="-feaas" library="library" component="test" src="library/test"></feaas-component></section>'
    )
  })
  it('render react with empty template', async () => {
    await validate(
      <section>
        <Component src='library/test' template=''></Component>
      </section>,
      '<section><feaas-component class="-feaas" library="library" component="test" src="library/test"></feaas-component></section>'
    )
  })
  it('render react component with src and overrides', async () => {
    await validate(
      <section>
        <Component src='library/test' component='test2'></Component>
      </section>,
      '<section><feaas-component class="-feaas" library="library" component="test2" src="library/test"></feaas-component></section>'
    )
  })
  it('render react component with extras', async () => {
    await validate(
      <section>
        <Component src='library/test' version='v1'></Component>
      </section>,
      '<section><feaas-component class="-feaas" library="library" component="test" version="v1" src="library/test"></feaas-component></section>'
    )
  })
  it('render react template', async () => {
    await validate(
      <section>
        <Component src='library/test' template={'<div data-path-src="abc">'}></Component>
      </section>,
      '<section><feaas-component class="-feaas" library="library" component="test" src="library/test"><div data-path-src="abc"></div></feaas-component></section>'
    )
  })
  it('render template with data and src', async () => {
    await validate(
      <section>
        <Component src='library/test' template={'<div data-path-src="abc">'} data={{ abc: 321 }}></Component>
      </section>,
      '<section><feaas-component class="-feaas" library="library" component="test" src="library/test" data="{&quot;abc&quot;:321}"><div data-path-src="abc"></div></feaas-component></section>'
    )
  })
  it('render template with data but without src', async () => {
    validate(
      <section>
        <Component
          library='library'
          component='test'
          template={'<div data-path-src="abc">'}
          data={{ abc: 321 }}
        ></Component>
      </section>,
      '<section><feaas-component class="-feaas" library="library" component="test" data="{&quot;abc&quot;:321}"><div data-path-src="abc"></div></feaas-component></section>'
    )
  })
  it('render template with style attribute', async () => {
    validate(
      <section>
        <Component template={'<div data-path-src="abc">'} data={{ abc: 321 }}></Component>
      </section>,
      '<section><feaas-component class="-feaas" data="{&quot;abc&quot;:321}"><div data-path-src="abc"></div></feaas-component></section>'
    )
  })
  it('render unwrapped external component with stringified values', async () => {
    registerComponent(Hello, helloSchema)
    validate(
      <section>
        <ExternalComponent componentName='MyTestComponent' telephone={'12345'} firstName='Yarik' />
      </section>,
      '<section><feaas-external data-external-id="MyTestComponent" telephone="12345" first-name="Yarik" hydrate="false"><div>\n' +
        'Hello my name is Yarik (string) and my tel is 12345 (number).\n' +
        'And context value is DEFAULT</div></feaas-external></section>'
    )
  })
  it('render wrapped external component with parsed values', async () => {
    registerComponent(Hello, helloSchema)
    validate(
      <section>
        <Component
          template={
            '<feaas-external telephone="12345" first-name="Yarik" data-external-id="MyTestComponent"></feaas-external>'
          }
          data={{ abc: 321 }}
        ></Component>
      </section>,
      '<section><feaas-component class="-feaas" data="{&quot;abc&quot;:321}"><feaas-external data-external-id="MyTestComponent" telephone="12345" first-name="Yarik" hydrate="false"><div>\n' +
        'Hello my name is Yarik (string) and my tel is 12345 (number).\n' +
        'And context value is DEFAULT</div></feaas-external></feaas-component></section>'
    )
  })
  it('render wrapped external component and parse data object', async () => {
    registerComponent(HelloData, helloDataSchema)
    validate(
      <DataContext.Provider value='INHERITED'>
        <section>
          <Component
            template={
              '<feaas-external data-path-attributes="my.$" first-name="Yarik" data-external-id="MyTestDataComponent"></feaas-external>'
            }
            data={{ my: { telephone: 321, superobject: { a: 1, b: 2 } } }}
          ></Component>
        </section>
      </DataContext.Provider>,
      `<section><feaas-component class="-feaas" data="{&quot;my&quot;:{&quot;telephone&quot;:321,&quot;superobject&quot;:{&quot;a&quot;:1,&quot;b&quot;:2}}}"><feaas-external data-external-id="MyTestDataComponent" telephone="321" superobject="{&quot;a&quot;:1,&quot;b&quot;:2}" data-path-attributes="my.$" first-name="Yarik" data-attributes-keys="telephone,superobject" datasources="{&quot;my&quot;:{&quot;telephone&quot;:321,&quot;superobject&quot;:{&quot;a&quot;:1,&quot;b&quot;:2}}}" hydrate="false"><div>
Hello my name is Yarik (string) and my tel is 321 (number).
And context value is INHERITED.
Typeof datasources: object with keys my)
Typeof superobject object, {"a":1,"b":2})</div></feaas-external></feaas-component></section>`
    )
  })
  it('render wrapped external component with context provider', async () => {
    registerComponent(Hello, helloSchema)
    validate(
      <DataContext.Provider value='INHERITED'>
        <section>
          <Component
            template={
              '<feaas-external telephone="12345" first-name="Yarik" data-external-id="MyTestComponent"></feaas-external>'
            }
            data={{ abc: 321 }}
          ></Component>
        </section>
      </DataContext.Provider>,
      '<section><feaas-component class="-feaas" data="{&quot;abc&quot;:321}"><feaas-external data-external-id="MyTestComponent" telephone="12345" first-name="Yarik" hydrate="false"><div>\n' +
        'Hello my name is Yarik (string) and my tel is 12345 (number).\n' +
        'And context value is INHERITED</div></feaas-external></feaas-component></section>'
    )
  })
  it('render wrapped external component with context provider and data mapping', async () => {
    registerComponent(Hello, helloSchema)
    validate(
      <DataContext.Provider value='INHERITED'>
        <section>
          <Component
            template={
              '<feaas-external data-path-attributes="$" first-name="Yarik" data-path-attributes="$" data-external-id="MyTestComponent"></feaas-external>'
            }
            data={{ telephone: 321 }}
          ></Component>
        </section>
      </DataContext.Provider>,
      '<section><feaas-component class="-feaas" data="{&quot;telephone&quot;:321}"><feaas-external data-external-id="MyTestComponent" telephone="321" data-path-attributes="$" first-name="Yarik" data-attributes-keys="telephone" datasources="{&quot;_&quot;:{&quot;telephone&quot;:321}}" hydrate="false"><div>\n' +
        'Hello my name is Yarik (string) and my tel is 321 (number).\n' +
        'And context value is INHERITED</div></feaas-external></feaas-component></section>'
    )
  })
  it('render wrapped external component with context provider and data mapping asyncronously', async () => {
    registerComponent(Hello, helloSchema)
    validate(
      <DataContext.Provider value='INHERITED'>
        <section>
          <Component
            template={
              '<feaas-external data-path-attributes="$" first-name="Yarik" data-path-attributes="$" data-external-id="MyTestComponent"></feaas-external>'
            }
            data={{ telephone: 321 }}
          ></Component>
        </section>
      </DataContext.Provider>,
      '<section><feaas-component class="-feaas" data="{&quot;telephone&quot;:321}"><feaas-external data-external-id="MyTestComponent" telephone="321" data-path-attributes="$" first-name="Yarik" data-attributes-keys="telephone" datasources="{&quot;_&quot;:{&quot;telephone&quot;:321}}" hydrate="false"><div>\n' +
        'Hello my name is Yarik (string) and my tel is 321 (number).\n' +
        'And context value is INHERITED</div></feaas-external></feaas-component></section>'
    )
  })
  it('render external component after resetting of a template', async () => {
    registerComponent(HelloData, helloDataSchema)
    const now = new Date()
    const spy = vi.spyOn(global, 'fetch')
    spy.mockImplementation(async (url: string, options: Parameters<typeof fetch>[1] = {}) => {
      return new Response(
        '<feaas-external data-external-id="MyTestDataComponent" first-name="Yarik" data-path-attributes="_"></feaas-external>',
        {
          headers: {
            date: now.toUTCString(),
            'last-modified': now.toUTCString()
          }
        }
      )
    })
    validate(
      <DataContext.Provider value='INHERITED'>
        <section>
          <Component
            src='a/b'
            data={{ _: { telephone: 321, superobject: { '1': 2 } } }}
            fetch={['template']}
          ></Component>
        </section>
      </DataContext.Provider>,
      '<section><feaas-component class="-feaas" library="a" component="b" src="a/b" fetch="template" data="{&quot;_&quot;:{&quot;telephone&quot;:321,&quot;superobject&quot;:{&quot;1&quot;:2}}}"></feaas-component></section>'
    )

    await (document.querySelector('feaas-component') as FEAASElement)?.whenRendered
    await (document.querySelector('feaas-external') as FEAASElement)?.whenRendered

    expect(document.querySelector('feaas-component').outerHTML).toEqual(
      '<feaas-component class="-feaas" library="a" component="b" src="a/b" fetch="template" data="{&quot;_&quot;:{&quot;telephone&quot;:321,&quot;superobject&quot;:{&quot;1&quot;:2}}}"><feaas-external data-external-id="MyTestDataComponent" first-name="Yarik" data-path-attributes="_" telephone="321" superobject="{&quot;1&quot;:2}" data-attributes-keys="telephone,superobject" datasources="{&quot;_&quot;:{&quot;telephone&quot;:321,&quot;superobject&quot;:{&quot;1&quot;:2}}}"><div>\n' +
        'Hello my name is Yarik (string) and my tel is 321 (number).\n' +
        'And context value is DEFAULT.\n' +
        'Typeof datasources: object with keys _)\n' +
        'Typeof superobject object, {"1":2})</div></feaas-external></feaas-component>'
    )
  })
  it('render not map attributes of external component with given array', async () => {
    registerComponent(Hello, helloSchema)
    validate(
      <DataContext.Provider value='INHERITED'>
        <section>
          <Component
            template={
              '<feaas-external first-name="Yarik" data-path-attributes="$" data-external-id="MyTestComponent"></feaas-external>'
            }
            data={[{ telephone: 321 }]}
          ></Component>
        </section>
      </DataContext.Provider>,
      '<section><feaas-component class="-feaas" data="[{&quot;telephone&quot;:321}]"><feaas-external data-external-id="MyTestComponent" first-name="Yarik" data-path-attributes="$" datasources="{&quot;_&quot;:[{&quot;telephone&quot;:321}]}" hydrate="false"><div>\n' +
        'Hello my name is Yarik (string) and my tel is Unknown (undefined).\n' +
        'And context value is INHERITED</div></feaas-external></feaas-component></section>'
    )
  })

  describe('setImageComponent', () => {
    afterEach(() => {
      setElementImplementation('img', null)
    })
    it('allow component customization', async () => {
      const ImageComponent = (props: any) => React.createElement('x-img', props)
      setElementImplementation('img', ImageComponent)
      await validate(
        <section>
          <Component
            src='library/test'
            template={'<img data-path-src="abc" alt="test">'}
            data={{ abc: 321 }}
          ></Component>
        </section>,
        '<section><feaas-component class="-feaas" library="library" component="test" src="library/test" data="{&quot;abc&quot;:321}"><x-img data-path-src="abc" alt="test" src="321"></x-img></feaas-component></section>'
      )
    })
  })
  describe('renderNode', () => {
    it(' should replace elements', async () => {
      validate(
        <section>
          <Component
            template={'<div data-path-src="abc">'}
            data={{ abc: 321 }}
            renderNode={(node, attributes) => {
              if (node.localName == 'div') {
                return <h2 data-as='div' {...attributes} />
              }
            }}
          ></Component>
        </section>,
        '<section><feaas-component class="-feaas" data="{&quot;abc&quot;:321}"><h2 data-as="div" data-path-src="abc"></h2></feaas-component></section>'
      )
    })
    it(' should replace parent elements', async () => {
      validate(
        <section>
          <Component
            template={'<div data-path-src="abc"><span>123</span></h2></div>'}
            data={{ abc: 321 }}
            renderNode={(node, attributes) => {
              if (node.localName == 'div') {
                return <h2 data-as='div' {...attributes} />
              }
            }}
          ></Component>
        </section>,
        '<section><feaas-component class="-feaas" data="{&quot;abc&quot;:321}"><h2 data-as="div" data-path-src="abc"><span>123</span></h2></feaas-component></section>'
      )
    })
    it(' should replace children elements', async () => {
      validate(
        <section>
          <Component
            template={'<div data-path-src="abc"><span>123</span></h2></div>'}
            data={{ abc: 321 }}
            renderNode={(node, attributes) => {
              if (node.localName == 'div') {
                return (
                  <h2 data-as='div' {...attributes}>
                    Replacement
                  </h2>
                )
              }
            }}
          ></Component>
        </section>,
        '<section><feaas-component class="-feaas" data="{&quot;abc&quot;:321}"><h2 data-as="div" data-path-src="abc">Replacement</h2></feaas-component></section>'
      )
    })
  })
})
