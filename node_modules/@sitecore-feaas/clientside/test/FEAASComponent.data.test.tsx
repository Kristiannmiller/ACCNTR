import { beforeAll, beforeEach, describe, expect, it, vi } from 'vitest'
import { FEAASComponent } from '../src/components/FEAASComponent.js'
import { clearFetchCache } from '../src/fetch.js'

const earliest = new Date(2000, 1, 1, 0, 0, 0)
const earlier = new Date(2000, 1, 2, 0, 0, 0)
const now = new Date(2000, 1, 2, 12, 0, 0)

var delayLength = 16
describe('FEAAS component data', () => {
  beforeAll(() => {
    vi.setSystemTime(now)
    FEAASComponent.register('feaas-component')
  })

  beforeEach(() => {
    document.write()
    clearFetchCache()
  })

  const checkRaceCondition = async (promises: { promise: Promise<any>; name: string }[]) => {
    const resolved: { promise: Promise<any>; name: string }[] = []
    await Promise.all(
      promises.map(async (p) => {
        await p.promise
        resolved.push(p)
      })
    )
    expect(resolved.map(({ name }) => name)).to.eql(promises.map(({ name }) => name))
  }

  const freshRequestSpy = (dataDelay = 1, htmlDelay = 1, stylesDelay = 1) => {
    return vi
      .spyOn(global, 'fetch')
      .mockImplementation(async (url: string, options: Parameters<typeof fetch>[1] = {}) => {
        if (url.includes('.css')) {
          await new Promise((resolve) => setTimeout(resolve, stylesDelay * delayLength))
          return new Response('YESTERDAY {}', {
            headers: {
              date: now.toUTCString(),
              'last-modified': earliest.toUTCString()
            }
          })
        }

        if (url.includes('CDN')) {
          await new Promise((resolve) => setTimeout(resolve, htmlDelay * delayLength))
          return new Response('<var data-path="text">Default</var>', {
            headers: {
              date: now.toUTCString(),
              'last-modified': earlier.toUTCString()
            }
          })
        }

        if (url === 'http://my-url') {
          await new Promise((resolve) => setTimeout(resolve, dataDelay * delayLength))
          return new Response(JSON.stringify({ text: 'My new text' }), {})
        }

        if (url === 'http://my-url2') {
          await new Promise((resolve) => setTimeout(resolve, dataDelay * delayLength))
          return new Response(JSON.stringify({ text: 'My new text2' }), {})
        }
      })
  }

  describe('Should render component using stale cache, no data initially, then data as object', async () => {
    const runWithDelay = async (delays: number[]) => {
      const spy = freshRequestSpy(delays[0], delays[1], delays[2])
      document.body.innerHTML = `<feaas-component library="L" cdn="CDN" component="C" version="V" revision="R"></feaas-component>`
      const component = document.body.firstElementChild as FEAASComponent
      const updateCall = vi.spyOn(component, 'update')
      await expect(component.whenDataReady).resolves.toEqual({})
      await expect(component.whenRendered).resolves.toEqual(component)
      await expect(component.whenLoaded).resolves.toBeTruthy()
      expect(component.readyData).toEqual({})
      expect(component.innerHTML).toEqual('<var data-path="text">Default</var>')
      expect(spy).toHaveBeenCalledTimes(2)
      await checkRaceCondition([
        { promise: component.whenDataReady, name: 'when data ready' },
        { promise: component.whenRendered, name: 'when rendered' },
        { promise: component.whenLoaded, name: 'when loaded' }
      ])
      expect(updateCall).toHaveBeenCalledTimes(1)
      component.setAttribute('data', '{"text": "this is text"}')
      await expect(component.whenDataReady).resolves.toEqual({ text: 'this is text' })
      await expect(component.whenRendered).resolves.toEqual(component)
      expect(updateCall).toHaveBeenCalledTimes(2)
      expect(component.innerHTML).toEqual('<var data-path="text">this is text</var>')
      expect(component.readyData).toEqual({ text: 'this is text' })
      expect(spy).toHaveBeenCalledTimes(2)
      await expect(component.whenLoaded).resolves.toBeTruthy()
      await checkRaceCondition([
        { promise: component.whenDataReady, name: 'when data ready' },
        { promise: component.whenRendered, name: 'when rendered' },
        { promise: component.whenLoaded, name: 'when loaded' }
      ])
      component.set({ data: { text: 'this is updated text' } })
      await expect(component.whenDataReady).resolves.toEqual({ text: 'this is updated text' })
      await expect(component.whenRendered).resolves.toEqual(component)
      expect(updateCall).toHaveBeenCalledTimes(3)
      expect(component.innerHTML).toEqual('<var data-path="text">this is updated text</var>')
    }

    it('DATA -> HTML -> STYLESHEET', async () => await runWithDelay([1, 2, 3]))
    it('DATA -> STYLESHEET -> HTML', async () => await runWithDelay([1, 3, 2]))
    it('HTML -> DATA -> STYLESHEET', async () => await runWithDelay([2, 1, 3]))
    it('STYLESHEET -> DATA -> HTML', async () => await runWithDelay([2, 3, 1]))
    it('HTML -> STYLESHEET -> DATA', async () => await runWithDelay([3, 1, 2]))
    it('STYLESHEET -> HTML -> DATA', async () => await runWithDelay([3, 2, 1]))
  })

  describe('Should render component using stale cache and data as object first, then settings', () => {
    const runWithDelay = async (delays: number[]) => {
      const spy = freshRequestSpy(delays[0], delays[1], delays[2])
      document.body.innerHTML = `<feaas-component data='{"text": "this is text"}' library="L" cdn="CDN" component="C" version="V" revision="R"></feaas-component>`
      const component = document.body.firstElementChild as FEAASComponent
      const updateCall = vi.spyOn(component, 'update')
      await expect(component.whenDataReady).resolves.toEqual({ text: 'this is text' })
      await expect(component.whenRendered).resolves.toEqual(component)
      await expect(component.whenLoaded).resolves.toBeTruthy()
      expect(component.readyData).toEqual({ text: 'this is text' })
      expect(component.innerHTML).toEqual('<var data-path="text">this is text</var>')
      expect(spy).toHaveBeenCalledTimes(2)
      await checkRaceCondition([
        { promise: component.whenDataReady, name: 'when data ready' },
        { promise: component.whenRendered, name: 'when rendered' },
        { promise: component.whenLoaded, name: 'when loaded' }
      ])
      expect(updateCall).toHaveBeenCalledTimes(1)
      component.setAttribute('data', '{"jsonpath": "$", "url": "http://my-url"}')
      await expect(component.whenDataReady).resolves.toEqual({ text: 'My new text' })
      await expect(component.whenRendered).resolves.toEqual(component)
      expect(updateCall).toHaveBeenCalledTimes(2)
      expect(component.innerHTML).toEqual('<var data-path="text">My new text</var>')
      expect(component.readyData).toEqual({ text: 'My new text' })
      expect(spy).toHaveBeenCalledTimes(3)
      await expect(component.whenLoaded).resolves.toBeTruthy()
      await checkRaceCondition([
        { promise: component.whenDataReady, name: 'when data ready' },
        { promise: component.whenRendered, name: 'when rendered' },
        { promise: component.whenLoaded, name: 'when loaded' }
      ])
    }

    it('DATA -> HTML -> STYLESHEET', async () => await runWithDelay([1, 2, 3]))
    it('DATA -> STYLESHEET -> HTML', async () => await runWithDelay([1, 3, 2]))
    it('HTML -> DATA -> STYLESHEET', async () => await runWithDelay([2, 1, 3]))
    it('STYLESHEET -> DATA -> HTML', async () => await runWithDelay([2, 3, 1]))
    it('HTML -> STYLESHEET -> DATA', async () => await runWithDelay([3, 1, 2]))
    it('STYLESHEET -> HTML -> DATA', async () => await runWithDelay([3, 2, 1]))
  })

  describe('Should render component using stale cache and data as settings', () => {
    const runWithDelay = async (delays: number[]) => {
      const spy = freshRequestSpy(delays[0], delays[1], delays[2])
      document.body.innerHTML = `<feaas-component data='{ "jsonpath": "$", "url": "http://my-url" }' library="L" cdn="CDN" component="C" version="V" revision="R"></feaas-component>`
      const component = document.body.firstElementChild as FEAASComponent
      const updateCall = vi.spyOn(component, 'update')
      await expect(component.whenDataReady).resolves.toEqual({ text: 'My new text' })
      await expect(component.whenRendered).resolves.toEqual(component)
      await expect(component.whenLoaded).resolves.toBeTruthy()
      expect(component.readyData).toEqual({ text: 'My new text' })
      expect(component.innerHTML).toEqual('<var data-path="text">My new text</var>')
      expect(spy).toHaveBeenCalledTimes(3)
      await checkRaceCondition([
        { promise: component.whenDataReady, name: 'when data ready' },
        { promise: component.whenRendered, name: 'when rendered' },
        { promise: component.whenLoaded, name: 'when loaded' }
      ])
      expect(updateCall).toHaveBeenCalledTimes(1)
    }

    it('DATA -> HTML -> STYLESHEET', async () => await runWithDelay([1, 2, 3]))
    it('DATA -> STYLESHEET -> HTML', async () => await runWithDelay([1, 3, 2]))
    it('HTML -> DATA -> STYLESHEET', async () => await runWithDelay([2, 1, 3]))
    it('STYLESHEET -> DATA -> HTML', async () => await runWithDelay([2, 3, 1]))
    it('HTML -> STYLESHEET -> DATA', async () => await runWithDelay([3, 1, 2]))
    it('STYLESHEET -> HTML -> DATA', async () => await runWithDelay([3, 2, 1]))
  })

  describe('Should render component using stale cache and data as mapping', () => {
    const runWithDelay = async (delays: number[]) => {
      const spy = freshRequestSpy(delays[0], delays[1], delays[2])
      document.body.innerHTML = `<feaas-component data='{ "datasource-1": {"jsonpath": "$", "url": "http://my-url"}, "datasource-2": {"jsonpath": "$", "url": "http://my-url2"} }' data-path="datasource-2.text" library="L" cdn="CDN" component="C" version="V" revision="R"></feaas-component>`
      const component = document.body.firstElementChild as FEAASComponent
      const updateCall = vi.spyOn(component, 'update')
      await expect(component.whenDataReady).resolves.toEqual({
        'datasource-1': { text: 'My new text' },
        'datasource-2': { text: 'My new text2' }
      })
      await expect(component.whenRendered).resolves.toEqual(component)
      await expect(component.whenLoaded).resolves.toBeTruthy()
      expect(component.readyData).toEqual({
        'datasource-1': { text: 'My new text' },
        'datasource-2': { text: 'My new text2' }
      })
      expect(component.innerHTML).toEqual('My new text2')
      expect(spy).toHaveBeenCalledTimes(4)
      await checkRaceCondition([
        { promise: component.whenDataReady, name: 'when data ready' },
        { promise: component.whenRendered, name: 'when rendered' },
        { promise: component.whenLoaded, name: 'when loaded' }
      ])
      expect(updateCall).toHaveBeenCalledTimes(1)
    }

    it('DATA -> HTML -> STYLESHEET', async () => await runWithDelay([1, 2, 3]))
    it('DATA -> STYLESHEET -> HTML', async () => await runWithDelay([1, 3, 2]))
    it('HTML -> DATA -> STYLESHEET', async () => await runWithDelay([2, 1, 3]))
    it('STYLESHEET -> DATA -> HTML', async () => await runWithDelay([2, 3, 1]))
    it('HTML -> STYLESHEET -> DATA', async () => await runWithDelay([3, 1, 2]))
    it('STYLESHEET -> HTML -> DATA', async () => await runWithDelay([3, 2, 1]))
  })

  // TODO
  it.skip('Should render component using non-stale cache and data as settings', async () => {})
})
