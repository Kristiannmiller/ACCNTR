import { beforeEach, describe, it, assert, beforeAll, expect, afterEach } from 'vitest'
import { FEAASElement, ReactPayload } from '../src/headless.js'
import { FEAASContextProps, FEAASContext } from '../src/ui/FEAASContext.js'
import { JSDOM } from 'jsdom'
import { vi } from 'vitest'
import { ReactNode, ReactElement, JSXElementConstructor } from 'react'

describe('React', function () {
  describe('FEAASContext', () => {
    beforeEach(() => {
      document.open()
      document.write('<html><head></head><body></body></html>')
      document.close()
    })
    afterEach(() => {
      document.body.innerHTML = ''
    })
    it('should initiate loading with isolation', async () => {
      // @ts-ignore
      const spyLoad = vi.spyOn(FEAASContext.prototype, 'import')
      // @ts-ignore
      spyLoad.mockImplementation(async (url: string) => {
        if (url.match('test.js')) {
          return Promise.all([import('react'), import('react-dom'), import('react-dom/client')]).then(
            ([React, ReactDOM, ReactDOMClient]) => {
              return {
                React,
                ReactDOM,
                ReactDOMClient,
                Chakra: { Tooltip: {} },
                AppContext: ({ libraryId }: any) => <p>Context {libraryId}</p>
              }
            }
          )
        }
      })
      // Fixme change to production component
      document.body.innerHTML = '<feaas-context src="test.js" library="abc" isolate="false"></feaas-context>'

      const component = document.body.firstElementChild as FEAASContext

      await expect(component.whenRendered).resolves.toEqual(component)
      expect(spyLoad).toHaveBeenCalledTimes(1)

      expect(component.outerHTML).toBe(
        '<feaas-context src="test.js" library="abc" isolate="false" frontend="https://components.sitecorecloud.io" backend="https://components.sitecorecloud.io/api" cdn="https://feaas.blob.core.windows.net" feaas-role="ui"><div><p>Context abc</p></div></feaas-context>'
      )
    })
    it('should initiate loading without isolation', async () => {
      // @ts-ignore
      const spyLoad = vi.spyOn(FEAASContext.prototype, 'import')
      // @ts-ignore
      spyLoad.mockImplementation(async (url: string) => {
        if (url.match('test.js')) {
          return Promise.all([import('react'), import('react-dom'), import('react-dom/client')]).then(
            ([React, ReactDOM, ReactDOMClient]) => {
              return {
                React,
                ReactDOM,
                ReactDOMClient,
                Chakra: { Tooltip: {} },
                AppContext: ({ libraryId }: any) => <p>Context {libraryId}</p>
              }
            }
          )
        }
      })
      // Fixme change to production component
      document.body.innerHTML = '<feaas-context src="test.js" library="abc" isolate="false"></feaas-context>'

      const component = document.body.firstElementChild as FEAASContext

      await expect(component.whenRendered).resolves.toEqual(component)
      expect(spyLoad).toHaveBeenCalledTimes(1)

      expect(component.outerHTML).toBe(
        '<feaas-context src="test.js" library="abc" isolate="false" frontend="https://components.sitecorecloud.io" backend="https://components.sitecorecloud.io/api" cdn="https://feaas.blob.core.windows.net" feaas-role="ui"><div><p>Context abc</p></div></feaas-context>'
      )
    })
    it('should initiate loading with isolation', async () => {
      // @ts-ignore
      const spyLoad = vi.spyOn(FEAASContext.prototype, 'import')
      // @ts-ignore
      spyLoad.mockImplementation(async (url: string) => {
        if (url.match('test.js')) {
          return Promise.all([import('react'), import('react-dom'), import('react-dom/client')]).then(
            ([React, ReactDOM, ReactDOMClient]) => {
              return {
                React,
                ReactDOM,
                ReactDOMClient,
                Chakra: { Tooltip: {} },
                AppContext: ({ libraryId }: any) => <p>Context {libraryId}</p>
              }
            }
          )
        }
      })
      // Fixme change to production component
      document.body.innerHTML = '<feaas-context src="test.js" library="abc"></feaas-context>'

      const component = document.body.firstElementChild as FEAASContext

      await expect(component.whenRendered).resolves.toEqual(component)
      expect(spyLoad).toHaveBeenCalledTimes(1)

      expect(component.outerHTML).toBe(
        '<feaas-context src="test.js" library="abc" frontend="https://components.sitecorecloud.io" backend="https://components.sitecorecloud.io/api" cdn="https://feaas.blob.core.windows.net" feaas-role="ui"></feaas-context>'
      )
      expect(component.shadowRoot.innerHTML).toBe('<div><p>Context abc</p></div>')
    })
    it('should nest components and render them in order', async () => {
      const renders = [] as FEAASElement[]
      class FEAASElementTestRenderOrder extends FEAASElement {
        update() {
          renders.push(this)
        }
      }
      FEAASElementTestRenderOrder.register('feaas-element-test-order')

      const top = document.createElement('feaas-element-test-order') as FEAASElement
      top.innerHTML = `
      <feaas-element-test-order>
        <feaas-element-test-order></feaas-element-test-order>
        <feaas-element-test-order></feaas-element-test-order>
      </feaas-element-test-order>
      <feaas-element-test-order></feaas-element-test-order>
      <feaas-element-test-order>
        <feaas-element-test-order></feaas-element-test-order>
      </feaas-element-test-order>
    `
      document.body.appendChild(top)
      await expect(top.whenRendered).resolves.toEqual(top)
      expect(top.descendants).toEqual([
        top.children[0],
        top.children[0].children[0],

        top.children[0].children[1],

        top.children[1],

        top.children[2],

        top.children[2].children[0]
      ])
      expect(renders).toEqual([
        top.children[0].children[0],
        top.children[0].children[1],
        top.children[0],
        top.children[1],
        top.children[2].children[0],
        top.children[2],
        top
      ])
    })

    it('should nest components into context', async () => {
      const renders = [] as FEAASElement[]
      class FEAASElementTestRenderOrder extends FEAASElement {
        render(props: any, payload: any): ReactNode {
          return null
        }
        load() {
          return this.import('context.js')
        }
      }
      ;[FEAASElementTestRenderOrder, FEAASContext].forEach((klass) => {
        // @ts-ignore
        const spyLoad = vi.spyOn(klass.prototype, 'import')
        // @ts-ignore
        spyLoad.mockImplementation(async (url: string) => {
          if (url.match('context.js')) {
            return Promise.all([import('react'), import('react-dom'), import('react-dom/client')]).then(
              ([React, ReactDOM, ReactDOMClient]) => {
                return {
                  React,
                  ReactDOM,
                  ReactDOMClient,
                  Chakra: { Tooltip: {} },
                  AppContext: ({ libraryId }: any) => <p>Context {libraryId}</p>
                }
              }
            )
          }
        })
        const spyRender = vi.spyOn(klass.prototype, 'render')
        spyRender.mockImplementation(function (this: FEAASContext, { children }, { React }) {
          renders.push(this)
          return <>{children}</>
        })
      })

      FEAASElementTestRenderOrder.register('feaas-element-test-nesting')

      const context = document.createElement('feaas-context') as FEAASElement
      context.setAttribute('library', 'library1')
      const top = document.createElement('feaas-element-test-nesting') as FEAASElement
      top.innerHTML = `
      <feaas-element-test-nesting>
        <feaas-element-test-nesting></feaas-element-test-nesting>
        <feaas-element-test-nesting></feaas-element-test-nesting>
      </feaas-element-test-nesting>
      <feaas-element-test-nesting></feaas-element-test-nesting>
      <feaas-element-test-nesting>
        <feaas-element-test-nesting></feaas-element-test-nesting>
      </feaas-element-test-nesting>
    `
      document.body.appendChild(context)
      context.render = function () {
        renders.push(this)
        return FEAASContext.prototype.render.apply(this, arguments)
      }
      document.body.appendChild(top)
      await expect(top.whenRendered).resolves.toEqual(top)
      await expect(context.whenRendered).resolves.toEqual(context)
      expect(top.refs.top).toEqual(context)
      expect(top.refs.topReact).toEqual(context)
      expect(top.refs.parentReact).toEqual(context)
      expect(context.descendants).toEqual([
        top,
        top.children[0],
        top.children[0].children[0],

        top.children[0].children[1],

        top.children[1],

        top.children[2],

        top.children[2].children[0]
      ])
      // FIXME: Currently re-renders happen on each element addition
      //expect(renders).toEqual([
      //  context,
      //  top.children[0].children[0],
      //  top.children[0].children[1],
      //  top.children[0],
      //  top.children[1],
      //  top.children[2].children[0],
      //  top.children[2],
      //  top
      //])

      const els = [
        context,
        top.children[0].children[0],
        top.children[0].children[1],
        top.children[0],
        top.children[1],
        top.children[2].children[0],
        top.children[2],
        top
      ].forEach((el) => expect(renders).toContain(el))
    })
  })
})
