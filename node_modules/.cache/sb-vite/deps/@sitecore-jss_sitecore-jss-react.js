import {
  require_react_dom
} from "./chunk-LCJX5DYK.js";
import {
  require_react
} from "./chunk-D3I3COXH.js";
import {
  __commonJS,
  __esm,
  __export,
  __toCommonJS,
  __toESM
} from "./chunk-LK32TJAX.js";

// node_modules/ms/index.js
var require_ms = __commonJS({
  "node_modules/ms/index.js"(exports, module) {
    var s2 = 1e3;
    var m = s2 * 60;
    var h2 = m * 60;
    var d = h2 * 24;
    var w2 = d * 7;
    var y3 = d * 365.25;
    module.exports = function(val, options) {
      options = options || {};
      var type = typeof val;
      if (type === "string" && val.length > 0) {
        return parse3(val);
      } else if (type === "number" && isFinite(val)) {
        return options.long ? fmtLong(val) : fmtShort(val);
      }
      throw new Error(
        "val is not a non-empty string or a valid number. val=" + JSON.stringify(val)
      );
    };
    function parse3(str) {
      str = String(str);
      if (str.length > 100) {
        return;
      }
      var match = /^(-?(?:\d+)?\.?\d+) *(milliseconds?|msecs?|ms|seconds?|secs?|s|minutes?|mins?|m|hours?|hrs?|h|days?|d|weeks?|w|years?|yrs?|y)?$/i.exec(
        str
      );
      if (!match) {
        return;
      }
      var n = parseFloat(match[1]);
      var type = (match[2] || "ms").toLowerCase();
      switch (type) {
        case "years":
        case "year":
        case "yrs":
        case "yr":
        case "y":
          return n * y3;
        case "weeks":
        case "week":
        case "w":
          return n * w2;
        case "days":
        case "day":
        case "d":
          return n * d;
        case "hours":
        case "hour":
        case "hrs":
        case "hr":
        case "h":
          return n * h2;
        case "minutes":
        case "minute":
        case "mins":
        case "min":
        case "m":
          return n * m;
        case "seconds":
        case "second":
        case "secs":
        case "sec":
        case "s":
          return n * s2;
        case "milliseconds":
        case "millisecond":
        case "msecs":
        case "msec":
        case "ms":
          return n;
        default:
          return void 0;
      }
    }
    function fmtShort(ms) {
      var msAbs = Math.abs(ms);
      if (msAbs >= d) {
        return Math.round(ms / d) + "d";
      }
      if (msAbs >= h2) {
        return Math.round(ms / h2) + "h";
      }
      if (msAbs >= m) {
        return Math.round(ms / m) + "m";
      }
      if (msAbs >= s2) {
        return Math.round(ms / s2) + "s";
      }
      return ms + "ms";
    }
    function fmtLong(ms) {
      var msAbs = Math.abs(ms);
      if (msAbs >= d) {
        return plural(ms, msAbs, d, "day");
      }
      if (msAbs >= h2) {
        return plural(ms, msAbs, h2, "hour");
      }
      if (msAbs >= m) {
        return plural(ms, msAbs, m, "minute");
      }
      if (msAbs >= s2) {
        return plural(ms, msAbs, s2, "second");
      }
      return ms + " ms";
    }
    function plural(ms, msAbs, n, name) {
      var isPlural = msAbs >= n * 1.5;
      return Math.round(ms / n) + " " + name + (isPlural ? "s" : "");
    }
  }
});

// node_modules/debug/src/common.js
var require_common = __commonJS({
  "node_modules/debug/src/common.js"(exports, module) {
    function setup(env) {
      createDebug.debug = createDebug;
      createDebug.default = createDebug;
      createDebug.coerce = coerce;
      createDebug.disable = disable;
      createDebug.enable = enable;
      createDebug.enabled = enabled;
      createDebug.humanize = require_ms();
      createDebug.destroy = destroy;
      Object.keys(env).forEach((key) => {
        createDebug[key] = env[key];
      });
      createDebug.names = [];
      createDebug.skips = [];
      createDebug.formatters = {};
      function selectColor(namespace) {
        let hash = 0;
        for (let i = 0; i < namespace.length; i++) {
          hash = (hash << 5) - hash + namespace.charCodeAt(i);
          hash |= 0;
        }
        return createDebug.colors[Math.abs(hash) % createDebug.colors.length];
      }
      createDebug.selectColor = selectColor;
      function createDebug(namespace) {
        let prevTime;
        let enableOverride = null;
        let namespacesCache;
        let enabledCache;
        function debug2(...args) {
          if (!debug2.enabled) {
            return;
          }
          const self2 = debug2;
          const curr = Number(/* @__PURE__ */ new Date());
          const ms = curr - (prevTime || curr);
          self2.diff = ms;
          self2.prev = prevTime;
          self2.curr = curr;
          prevTime = curr;
          args[0] = createDebug.coerce(args[0]);
          if (typeof args[0] !== "string") {
            args.unshift("%O");
          }
          let index = 0;
          args[0] = args[0].replace(/%([a-zA-Z%])/g, (match, format) => {
            if (match === "%%") {
              return "%";
            }
            index++;
            const formatter = createDebug.formatters[format];
            if (typeof formatter === "function") {
              const val = args[index];
              match = formatter.call(self2, val);
              args.splice(index, 1);
              index--;
            }
            return match;
          });
          createDebug.formatArgs.call(self2, args);
          const logFn = self2.log || createDebug.log;
          logFn.apply(self2, args);
        }
        debug2.namespace = namespace;
        debug2.useColors = createDebug.useColors();
        debug2.color = createDebug.selectColor(namespace);
        debug2.extend = extend;
        debug2.destroy = createDebug.destroy;
        Object.defineProperty(debug2, "enabled", {
          enumerable: true,
          configurable: false,
          get: () => {
            if (enableOverride !== null) {
              return enableOverride;
            }
            if (namespacesCache !== createDebug.namespaces) {
              namespacesCache = createDebug.namespaces;
              enabledCache = createDebug.enabled(namespace);
            }
            return enabledCache;
          },
          set: (v3) => {
            enableOverride = v3;
          }
        });
        if (typeof createDebug.init === "function") {
          createDebug.init(debug2);
        }
        return debug2;
      }
      function extend(namespace, delimiter) {
        const newDebug = createDebug(this.namespace + (typeof delimiter === "undefined" ? ":" : delimiter) + namespace);
        newDebug.log = this.log;
        return newDebug;
      }
      function enable(namespaces) {
        createDebug.save(namespaces);
        createDebug.namespaces = namespaces;
        createDebug.names = [];
        createDebug.skips = [];
        const split = (typeof namespaces === "string" ? namespaces : "").trim().replace(/\s+/g, ",").split(",").filter(Boolean);
        for (const ns of split) {
          if (ns[0] === "-") {
            createDebug.skips.push(ns.slice(1));
          } else {
            createDebug.names.push(ns);
          }
        }
      }
      function matchesTemplate(search, template) {
        let searchIndex = 0;
        let templateIndex = 0;
        let starIndex = -1;
        let matchIndex = 0;
        while (searchIndex < search.length) {
          if (templateIndex < template.length && (template[templateIndex] === search[searchIndex] || template[templateIndex] === "*")) {
            if (template[templateIndex] === "*") {
              starIndex = templateIndex;
              matchIndex = searchIndex;
              templateIndex++;
            } else {
              searchIndex++;
              templateIndex++;
            }
          } else if (starIndex !== -1) {
            templateIndex = starIndex + 1;
            matchIndex++;
            searchIndex = matchIndex;
          } else {
            return false;
          }
        }
        while (templateIndex < template.length && template[templateIndex] === "*") {
          templateIndex++;
        }
        return templateIndex === template.length;
      }
      function disable() {
        const namespaces = [
          ...createDebug.names,
          ...createDebug.skips.map((namespace) => "-" + namespace)
        ].join(",");
        createDebug.enable("");
        return namespaces;
      }
      function enabled(name) {
        for (const skip of createDebug.skips) {
          if (matchesTemplate(name, skip)) {
            return false;
          }
        }
        for (const ns of createDebug.names) {
          if (matchesTemplate(name, ns)) {
            return true;
          }
        }
        return false;
      }
      function coerce(val) {
        if (val instanceof Error) {
          return val.stack || val.message;
        }
        return val;
      }
      function destroy() {
        console.warn("Instance method `debug.destroy()` is deprecated and no longer does anything. It will be removed in the next major version of `debug`.");
      }
      createDebug.enable(createDebug.load());
      return createDebug;
    }
    module.exports = setup;
  }
});

// node_modules/debug/src/browser.js
var require_browser = __commonJS({
  "node_modules/debug/src/browser.js"(exports, module) {
    exports.formatArgs = formatArgs;
    exports.save = save;
    exports.load = load;
    exports.useColors = useColors;
    exports.storage = localstorage();
    exports.destroy = /* @__PURE__ */ (() => {
      let warned = false;
      return () => {
        if (!warned) {
          warned = true;
          console.warn("Instance method `debug.destroy()` is deprecated and no longer does anything. It will be removed in the next major version of `debug`.");
        }
      };
    })();
    exports.colors = [
      "#0000CC",
      "#0000FF",
      "#0033CC",
      "#0033FF",
      "#0066CC",
      "#0066FF",
      "#0099CC",
      "#0099FF",
      "#00CC00",
      "#00CC33",
      "#00CC66",
      "#00CC99",
      "#00CCCC",
      "#00CCFF",
      "#3300CC",
      "#3300FF",
      "#3333CC",
      "#3333FF",
      "#3366CC",
      "#3366FF",
      "#3399CC",
      "#3399FF",
      "#33CC00",
      "#33CC33",
      "#33CC66",
      "#33CC99",
      "#33CCCC",
      "#33CCFF",
      "#6600CC",
      "#6600FF",
      "#6633CC",
      "#6633FF",
      "#66CC00",
      "#66CC33",
      "#9900CC",
      "#9900FF",
      "#9933CC",
      "#9933FF",
      "#99CC00",
      "#99CC33",
      "#CC0000",
      "#CC0033",
      "#CC0066",
      "#CC0099",
      "#CC00CC",
      "#CC00FF",
      "#CC3300",
      "#CC3333",
      "#CC3366",
      "#CC3399",
      "#CC33CC",
      "#CC33FF",
      "#CC6600",
      "#CC6633",
      "#CC9900",
      "#CC9933",
      "#CCCC00",
      "#CCCC33",
      "#FF0000",
      "#FF0033",
      "#FF0066",
      "#FF0099",
      "#FF00CC",
      "#FF00FF",
      "#FF3300",
      "#FF3333",
      "#FF3366",
      "#FF3399",
      "#FF33CC",
      "#FF33FF",
      "#FF6600",
      "#FF6633",
      "#FF9900",
      "#FF9933",
      "#FFCC00",
      "#FFCC33"
    ];
    function useColors() {
      if (typeof window !== "undefined" && window.process && (window.process.type === "renderer" || window.process.__nwjs)) {
        return true;
      }
      if (typeof navigator !== "undefined" && navigator.userAgent && navigator.userAgent.toLowerCase().match(/(edge|trident)\/(\d+)/)) {
        return false;
      }
      let m;
      return typeof document !== "undefined" && document.documentElement && document.documentElement.style && document.documentElement.style.WebkitAppearance || // Is firebug? http://stackoverflow.com/a/398120/376773
      typeof window !== "undefined" && window.console && (window.console.firebug || window.console.exception && window.console.table) || // Is firefox >= v31?
      // https://developer.mozilla.org/en-US/docs/Tools/Web_Console#Styling_messages
      typeof navigator !== "undefined" && navigator.userAgent && (m = navigator.userAgent.toLowerCase().match(/firefox\/(\d+)/)) && parseInt(m[1], 10) >= 31 || // Double check webkit in userAgent just in case we are in a worker
      typeof navigator !== "undefined" && navigator.userAgent && navigator.userAgent.toLowerCase().match(/applewebkit\/(\d+)/);
    }
    function formatArgs(args) {
      args[0] = (this.useColors ? "%c" : "") + this.namespace + (this.useColors ? " %c" : " ") + args[0] + (this.useColors ? "%c " : " ") + "+" + module.exports.humanize(this.diff);
      if (!this.useColors) {
        return;
      }
      const c = "color: " + this.color;
      args.splice(1, 0, c, "color: inherit");
      let index = 0;
      let lastC = 0;
      args[0].replace(/%[a-zA-Z%]/g, (match) => {
        if (match === "%%") {
          return;
        }
        index++;
        if (match === "%c") {
          lastC = index;
        }
      });
      args.splice(lastC, 0, c);
    }
    exports.log = console.debug || console.log || (() => {
    });
    function save(namespaces) {
      try {
        if (namespaces) {
          exports.storage.setItem("debug", namespaces);
        } else {
          exports.storage.removeItem("debug");
        }
      } catch (error) {
      }
    }
    function load() {
      let r;
      try {
        r = exports.storage.getItem("debug") || exports.storage.getItem("DEBUG");
      } catch (error) {
      }
      if (!r && typeof process !== "undefined" && "env" in process) {
        r = process.env.DEBUG;
      }
      return r;
    }
    function localstorage() {
      try {
        return localStorage;
      } catch (error) {
      }
    }
    module.exports = require_common()(exports);
    var { formatters } = module.exports;
    formatters.j = function(v3) {
      try {
        return JSON.stringify(v3);
      } catch (error) {
        return "[UnexpectedJSONParseError]: " + error.message;
      }
    };
  }
});

// node_modules/cross-fetch/dist/browser-ponyfill.js
var require_browser_ponyfill = __commonJS({
  "node_modules/cross-fetch/dist/browser-ponyfill.js"(exports, module) {
    var __global__ = typeof globalThis !== "undefined" && globalThis || typeof self !== "undefined" && self || typeof global !== "undefined" && global;
    var __globalThis__ = function() {
      function F3() {
        this.fetch = false;
        this.DOMException = __global__.DOMException;
      }
      F3.prototype = __global__;
      return new F3();
    }();
    (function(globalThis2) {
      var irrelevant = function(exports2) {
        var g = typeof globalThis2 !== "undefined" && globalThis2 || typeof self !== "undefined" && self || // eslint-disable-next-line no-undef
        typeof global !== "undefined" && global || {};
        var support = {
          searchParams: "URLSearchParams" in g,
          iterable: "Symbol" in g && "iterator" in Symbol,
          blob: "FileReader" in g && "Blob" in g && function() {
            try {
              new Blob();
              return true;
            } catch (e) {
              return false;
            }
          }(),
          formData: "FormData" in g,
          arrayBuffer: "ArrayBuffer" in g
        };
        function isDataView(obj) {
          return obj && DataView.prototype.isPrototypeOf(obj);
        }
        if (support.arrayBuffer) {
          var viewClasses = [
            "[object Int8Array]",
            "[object Uint8Array]",
            "[object Uint8ClampedArray]",
            "[object Int16Array]",
            "[object Uint16Array]",
            "[object Int32Array]",
            "[object Uint32Array]",
            "[object Float32Array]",
            "[object Float64Array]"
          ];
          var isArrayBufferView = ArrayBuffer.isView || function(obj) {
            return obj && viewClasses.indexOf(Object.prototype.toString.call(obj)) > -1;
          };
        }
        function normalizeName(name) {
          if (typeof name !== "string") {
            name = String(name);
          }
          if (/[^a-z0-9\-#$%&'*+.^_`|~!]/i.test(name) || name === "") {
            throw new TypeError('Invalid character in header field name: "' + name + '"');
          }
          return name.toLowerCase();
        }
        function normalizeValue(value) {
          if (typeof value !== "string") {
            value = String(value);
          }
          return value;
        }
        function iteratorFor(items) {
          var iterator = {
            next: function() {
              var value = items.shift();
              return { done: value === void 0, value };
            }
          };
          if (support.iterable) {
            iterator[Symbol.iterator] = function() {
              return iterator;
            };
          }
          return iterator;
        }
        function Headers2(headers) {
          this.map = {};
          if (headers instanceof Headers2) {
            headers.forEach(function(value, name) {
              this.append(name, value);
            }, this);
          } else if (Array.isArray(headers)) {
            headers.forEach(function(header) {
              if (header.length != 2) {
                throw new TypeError("Headers constructor: expected name/value pair to be length 2, found" + header.length);
              }
              this.append(header[0], header[1]);
            }, this);
          } else if (headers) {
            Object.getOwnPropertyNames(headers).forEach(function(name) {
              this.append(name, headers[name]);
            }, this);
          }
        }
        Headers2.prototype.append = function(name, value) {
          name = normalizeName(name);
          value = normalizeValue(value);
          var oldValue = this.map[name];
          this.map[name] = oldValue ? oldValue + ", " + value : value;
        };
        Headers2.prototype["delete"] = function(name) {
          delete this.map[normalizeName(name)];
        };
        Headers2.prototype.get = function(name) {
          name = normalizeName(name);
          return this.has(name) ? this.map[name] : null;
        };
        Headers2.prototype.has = function(name) {
          return this.map.hasOwnProperty(normalizeName(name));
        };
        Headers2.prototype.set = function(name, value) {
          this.map[normalizeName(name)] = normalizeValue(value);
        };
        Headers2.prototype.forEach = function(callback, thisArg) {
          for (var name in this.map) {
            if (this.map.hasOwnProperty(name)) {
              callback.call(thisArg, this.map[name], name, this);
            }
          }
        };
        Headers2.prototype.keys = function() {
          var items = [];
          this.forEach(function(value, name) {
            items.push(name);
          });
          return iteratorFor(items);
        };
        Headers2.prototype.values = function() {
          var items = [];
          this.forEach(function(value) {
            items.push(value);
          });
          return iteratorFor(items);
        };
        Headers2.prototype.entries = function() {
          var items = [];
          this.forEach(function(value, name) {
            items.push([name, value]);
          });
          return iteratorFor(items);
        };
        if (support.iterable) {
          Headers2.prototype[Symbol.iterator] = Headers2.prototype.entries;
        }
        function consumed(body) {
          if (body._noBody) return;
          if (body.bodyUsed) {
            return Promise.reject(new TypeError("Already read"));
          }
          body.bodyUsed = true;
        }
        function fileReaderReady(reader) {
          return new Promise(function(resolve, reject) {
            reader.onload = function() {
              resolve(reader.result);
            };
            reader.onerror = function() {
              reject(reader.error);
            };
          });
        }
        function readBlobAsArrayBuffer(blob) {
          var reader = new FileReader();
          var promise = fileReaderReady(reader);
          reader.readAsArrayBuffer(blob);
          return promise;
        }
        function readBlobAsText(blob) {
          var reader = new FileReader();
          var promise = fileReaderReady(reader);
          var match = /charset=([A-Za-z0-9_-]+)/.exec(blob.type);
          var encoding = match ? match[1] : "utf-8";
          reader.readAsText(blob, encoding);
          return promise;
        }
        function readArrayBufferAsText(buf) {
          var view = new Uint8Array(buf);
          var chars = new Array(view.length);
          for (var i = 0; i < view.length; i++) {
            chars[i] = String.fromCharCode(view[i]);
          }
          return chars.join("");
        }
        function bufferClone(buf) {
          if (buf.slice) {
            return buf.slice(0);
          } else {
            var view = new Uint8Array(buf.byteLength);
            view.set(new Uint8Array(buf));
            return view.buffer;
          }
        }
        function Body() {
          this.bodyUsed = false;
          this._initBody = function(body) {
            this.bodyUsed = this.bodyUsed;
            this._bodyInit = body;
            if (!body) {
              this._noBody = true;
              this._bodyText = "";
            } else if (typeof body === "string") {
              this._bodyText = body;
            } else if (support.blob && Blob.prototype.isPrototypeOf(body)) {
              this._bodyBlob = body;
            } else if (support.formData && FormData.prototype.isPrototypeOf(body)) {
              this._bodyFormData = body;
            } else if (support.searchParams && URLSearchParams.prototype.isPrototypeOf(body)) {
              this._bodyText = body.toString();
            } else if (support.arrayBuffer && support.blob && isDataView(body)) {
              this._bodyArrayBuffer = bufferClone(body.buffer);
              this._bodyInit = new Blob([this._bodyArrayBuffer]);
            } else if (support.arrayBuffer && (ArrayBuffer.prototype.isPrototypeOf(body) || isArrayBufferView(body))) {
              this._bodyArrayBuffer = bufferClone(body);
            } else {
              this._bodyText = body = Object.prototype.toString.call(body);
            }
            if (!this.headers.get("content-type")) {
              if (typeof body === "string") {
                this.headers.set("content-type", "text/plain;charset=UTF-8");
              } else if (this._bodyBlob && this._bodyBlob.type) {
                this.headers.set("content-type", this._bodyBlob.type);
              } else if (support.searchParams && URLSearchParams.prototype.isPrototypeOf(body)) {
                this.headers.set("content-type", "application/x-www-form-urlencoded;charset=UTF-8");
              }
            }
          };
          if (support.blob) {
            this.blob = function() {
              var rejected = consumed(this);
              if (rejected) {
                return rejected;
              }
              if (this._bodyBlob) {
                return Promise.resolve(this._bodyBlob);
              } else if (this._bodyArrayBuffer) {
                return Promise.resolve(new Blob([this._bodyArrayBuffer]));
              } else if (this._bodyFormData) {
                throw new Error("could not read FormData body as blob");
              } else {
                return Promise.resolve(new Blob([this._bodyText]));
              }
            };
          }
          this.arrayBuffer = function() {
            if (this._bodyArrayBuffer) {
              var isConsumed = consumed(this);
              if (isConsumed) {
                return isConsumed;
              } else if (ArrayBuffer.isView(this._bodyArrayBuffer)) {
                return Promise.resolve(
                  this._bodyArrayBuffer.buffer.slice(
                    this._bodyArrayBuffer.byteOffset,
                    this._bodyArrayBuffer.byteOffset + this._bodyArrayBuffer.byteLength
                  )
                );
              } else {
                return Promise.resolve(this._bodyArrayBuffer);
              }
            } else if (support.blob) {
              return this.blob().then(readBlobAsArrayBuffer);
            } else {
              throw new Error("could not read as ArrayBuffer");
            }
          };
          this.text = function() {
            var rejected = consumed(this);
            if (rejected) {
              return rejected;
            }
            if (this._bodyBlob) {
              return readBlobAsText(this._bodyBlob);
            } else if (this._bodyArrayBuffer) {
              return Promise.resolve(readArrayBufferAsText(this._bodyArrayBuffer));
            } else if (this._bodyFormData) {
              throw new Error("could not read FormData body as text");
            } else {
              return Promise.resolve(this._bodyText);
            }
          };
          if (support.formData) {
            this.formData = function() {
              return this.text().then(decode);
            };
          }
          this.json = function() {
            return this.text().then(JSON.parse);
          };
          return this;
        }
        var methods = ["CONNECT", "DELETE", "GET", "HEAD", "OPTIONS", "PATCH", "POST", "PUT", "TRACE"];
        function normalizeMethod(method) {
          var upcased = method.toUpperCase();
          return methods.indexOf(upcased) > -1 ? upcased : method;
        }
        function Request(input, options) {
          if (!(this instanceof Request)) {
            throw new TypeError('Please use the "new" operator, this DOM object constructor cannot be called as a function.');
          }
          options = options || {};
          var body = options.body;
          if (input instanceof Request) {
            if (input.bodyUsed) {
              throw new TypeError("Already read");
            }
            this.url = input.url;
            this.credentials = input.credentials;
            if (!options.headers) {
              this.headers = new Headers2(input.headers);
            }
            this.method = input.method;
            this.mode = input.mode;
            this.signal = input.signal;
            if (!body && input._bodyInit != null) {
              body = input._bodyInit;
              input.bodyUsed = true;
            }
          } else {
            this.url = String(input);
          }
          this.credentials = options.credentials || this.credentials || "same-origin";
          if (options.headers || !this.headers) {
            this.headers = new Headers2(options.headers);
          }
          this.method = normalizeMethod(options.method || this.method || "GET");
          this.mode = options.mode || this.mode || null;
          this.signal = options.signal || this.signal || function() {
            if ("AbortController" in g) {
              var ctrl = new AbortController();
              return ctrl.signal;
            }
          }();
          this.referrer = null;
          if ((this.method === "GET" || this.method === "HEAD") && body) {
            throw new TypeError("Body not allowed for GET or HEAD requests");
          }
          this._initBody(body);
          if (this.method === "GET" || this.method === "HEAD") {
            if (options.cache === "no-store" || options.cache === "no-cache") {
              var reParamSearch = /([?&])_=[^&]*/;
              if (reParamSearch.test(this.url)) {
                this.url = this.url.replace(reParamSearch, "$1_=" + (/* @__PURE__ */ new Date()).getTime());
              } else {
                var reQueryString = /\?/;
                this.url += (reQueryString.test(this.url) ? "&" : "?") + "_=" + (/* @__PURE__ */ new Date()).getTime();
              }
            }
          }
        }
        Request.prototype.clone = function() {
          return new Request(this, { body: this._bodyInit });
        };
        function decode(body) {
          var form = new FormData();
          body.trim().split("&").forEach(function(bytes) {
            if (bytes) {
              var split = bytes.split("=");
              var name = split.shift().replace(/\+/g, " ");
              var value = split.join("=").replace(/\+/g, " ");
              form.append(decodeURIComponent(name), decodeURIComponent(value));
            }
          });
          return form;
        }
        function parseHeaders(rawHeaders) {
          var headers = new Headers2();
          var preProcessedHeaders = rawHeaders.replace(/\r?\n[\t ]+/g, " ");
          preProcessedHeaders.split("\r").map(function(header) {
            return header.indexOf("\n") === 0 ? header.substr(1, header.length) : header;
          }).forEach(function(line) {
            var parts = line.split(":");
            var key = parts.shift().trim();
            if (key) {
              var value = parts.join(":").trim();
              try {
                headers.append(key, value);
              } catch (error) {
                console.warn("Response " + error.message);
              }
            }
          });
          return headers;
        }
        Body.call(Request.prototype);
        function Response(bodyInit, options) {
          if (!(this instanceof Response)) {
            throw new TypeError('Please use the "new" operator, this DOM object constructor cannot be called as a function.');
          }
          if (!options) {
            options = {};
          }
          this.type = "default";
          this.status = options.status === void 0 ? 200 : options.status;
          if (this.status < 200 || this.status > 599) {
            throw new RangeError("Failed to construct 'Response': The status provided (0) is outside the range [200, 599].");
          }
          this.ok = this.status >= 200 && this.status < 300;
          this.statusText = options.statusText === void 0 ? "" : "" + options.statusText;
          this.headers = new Headers2(options.headers);
          this.url = options.url || "";
          this._initBody(bodyInit);
        }
        Body.call(Response.prototype);
        Response.prototype.clone = function() {
          return new Response(this._bodyInit, {
            status: this.status,
            statusText: this.statusText,
            headers: new Headers2(this.headers),
            url: this.url
          });
        };
        Response.error = function() {
          var response = new Response(null, { status: 200, statusText: "" });
          response.ok = false;
          response.status = 0;
          response.type = "error";
          return response;
        };
        var redirectStatuses = [301, 302, 303, 307, 308];
        Response.redirect = function(url, status2) {
          if (redirectStatuses.indexOf(status2) === -1) {
            throw new RangeError("Invalid status code");
          }
          return new Response(null, { status: status2, headers: { location: url } });
        };
        exports2.DOMException = g.DOMException;
        try {
          new exports2.DOMException();
        } catch (err) {
          exports2.DOMException = function(message, name) {
            this.message = message;
            this.name = name;
            var error = Error(message);
            this.stack = error.stack;
          };
          exports2.DOMException.prototype = Object.create(Error.prototype);
          exports2.DOMException.prototype.constructor = exports2.DOMException;
        }
        function fetch2(input, init) {
          return new Promise(function(resolve, reject) {
            var request = new Request(input, init);
            if (request.signal && request.signal.aborted) {
              return reject(new exports2.DOMException("Aborted", "AbortError"));
            }
            var xhr = new XMLHttpRequest();
            function abortXhr() {
              xhr.abort();
            }
            xhr.onload = function() {
              var options = {
                statusText: xhr.statusText,
                headers: parseHeaders(xhr.getAllResponseHeaders() || "")
              };
              if (request.url.indexOf("file://") === 0 && (xhr.status < 200 || xhr.status > 599)) {
                options.status = 200;
              } else {
                options.status = xhr.status;
              }
              options.url = "responseURL" in xhr ? xhr.responseURL : options.headers.get("X-Request-URL");
              var body = "response" in xhr ? xhr.response : xhr.responseText;
              setTimeout(function() {
                resolve(new Response(body, options));
              }, 0);
            };
            xhr.onerror = function() {
              setTimeout(function() {
                reject(new TypeError("Network request failed"));
              }, 0);
            };
            xhr.ontimeout = function() {
              setTimeout(function() {
                reject(new TypeError("Network request timed out"));
              }, 0);
            };
            xhr.onabort = function() {
              setTimeout(function() {
                reject(new exports2.DOMException("Aborted", "AbortError"));
              }, 0);
            };
            function fixUrl(url) {
              try {
                return url === "" && g.location.href ? g.location.href : url;
              } catch (e) {
                return url;
              }
            }
            xhr.open(request.method, fixUrl(request.url), true);
            if (request.credentials === "include") {
              xhr.withCredentials = true;
            } else if (request.credentials === "omit") {
              xhr.withCredentials = false;
            }
            if ("responseType" in xhr) {
              if (support.blob) {
                xhr.responseType = "blob";
              } else if (support.arrayBuffer) {
                xhr.responseType = "arraybuffer";
              }
            }
            if (init && typeof init.headers === "object" && !(init.headers instanceof Headers2 || g.Headers && init.headers instanceof g.Headers)) {
              var names = [];
              Object.getOwnPropertyNames(init.headers).forEach(function(name) {
                names.push(normalizeName(name));
                xhr.setRequestHeader(name, normalizeValue(init.headers[name]));
              });
              request.headers.forEach(function(value, name) {
                if (names.indexOf(name) === -1) {
                  xhr.setRequestHeader(name, value);
                }
              });
            } else {
              request.headers.forEach(function(value, name) {
                xhr.setRequestHeader(name, value);
              });
            }
            if (request.signal) {
              request.signal.addEventListener("abort", abortXhr);
              xhr.onreadystatechange = function() {
                if (xhr.readyState === 4) {
                  request.signal.removeEventListener("abort", abortXhr);
                }
              };
            }
            xhr.send(typeof request._bodyInit === "undefined" ? null : request._bodyInit);
          });
        }
        fetch2.polyfill = true;
        if (!g.fetch) {
          g.fetch = fetch2;
          g.Headers = Headers2;
          g.Request = Request;
          g.Response = Response;
        }
        exports2.Headers = Headers2;
        exports2.Request = Request;
        exports2.Response = Response;
        exports2.fetch = fetch2;
        Object.defineProperty(exports2, "__esModule", { value: true });
        return exports2;
      }({});
    })(__globalThis__);
    __globalThis__.fetch.ponyfill = true;
    delete __globalThis__.fetch.polyfill;
    var ctx = __global__.fetch ? __global__ : __globalThis__;
    exports = ctx.fetch;
    exports.default = ctx.fetch;
    exports.fetch = ctx.fetch;
    exports.Headers = ctx.Headers;
    exports.Request = ctx.Request;
    exports.Response = ctx.Response;
    module.exports = exports;
  }
});

// node_modules/graphql/jsutils/isObjectLike.mjs
function isObjectLike(value) {
  return typeof value == "object" && value !== null;
}
var init_isObjectLike = __esm({
  "node_modules/graphql/jsutils/isObjectLike.mjs"() {
  }
});

// node_modules/graphql/jsutils/invariant.mjs
function invariant(condition, message) {
  const booleanCondition = Boolean(condition);
  if (!booleanCondition) {
    throw new Error(
      message != null ? message : "Unexpected invariant triggered."
    );
  }
}
var init_invariant = __esm({
  "node_modules/graphql/jsutils/invariant.mjs"() {
  }
});

// node_modules/graphql/language/location.mjs
function getLocation(source, position) {
  let lastLineStart = 0;
  let line = 1;
  for (const match of source.body.matchAll(LineRegExp)) {
    typeof match.index === "number" || invariant(false);
    if (match.index >= position) {
      break;
    }
    lastLineStart = match.index + match[0].length;
    line += 1;
  }
  return {
    line,
    column: position + 1 - lastLineStart
  };
}
var LineRegExp;
var init_location = __esm({
  "node_modules/graphql/language/location.mjs"() {
    init_invariant();
    LineRegExp = /\r\n|[\n\r]/g;
  }
});

// node_modules/graphql/language/printLocation.mjs
function printLocation(location2) {
  return printSourceLocation(
    location2.source,
    getLocation(location2.source, location2.start)
  );
}
function printSourceLocation(source, sourceLocation) {
  const firstLineColumnOffset = source.locationOffset.column - 1;
  const body = "".padStart(firstLineColumnOffset) + source.body;
  const lineIndex = sourceLocation.line - 1;
  const lineOffset = source.locationOffset.line - 1;
  const lineNum = sourceLocation.line + lineOffset;
  const columnOffset = sourceLocation.line === 1 ? firstLineColumnOffset : 0;
  const columnNum = sourceLocation.column + columnOffset;
  const locationStr = `${source.name}:${lineNum}:${columnNum}
`;
  const lines = body.split(/\r\n|[\n\r]/g);
  const locationLine = lines[lineIndex];
  if (locationLine.length > 120) {
    const subLineIndex = Math.floor(columnNum / 80);
    const subLineColumnNum = columnNum % 80;
    const subLines = [];
    for (let i = 0; i < locationLine.length; i += 80) {
      subLines.push(locationLine.slice(i, i + 80));
    }
    return locationStr + printPrefixedLines([
      [`${lineNum} |`, subLines[0]],
      ...subLines.slice(1, subLineIndex + 1).map((subLine) => ["|", subLine]),
      ["|", "^".padStart(subLineColumnNum)],
      ["|", subLines[subLineIndex + 1]]
    ]);
  }
  return locationStr + printPrefixedLines([
    // Lines specified like this: ["prefix", "string"],
    [`${lineNum - 1} |`, lines[lineIndex - 1]],
    [`${lineNum} |`, locationLine],
    ["|", "^".padStart(columnNum)],
    [`${lineNum + 1} |`, lines[lineIndex + 1]]
  ]);
}
function printPrefixedLines(lines) {
  const existingLines = lines.filter(([_4, line]) => line !== void 0);
  const padLen = Math.max(...existingLines.map(([prefix]) => prefix.length));
  return existingLines.map(([prefix, line]) => prefix.padStart(padLen) + (line ? " " + line : "")).join("\n");
}
var init_printLocation = __esm({
  "node_modules/graphql/language/printLocation.mjs"() {
    init_location();
  }
});

// node_modules/graphql/error/GraphQLError.mjs
function toNormalizedOptions(args) {
  const firstArg = args[0];
  if (firstArg == null || "kind" in firstArg || "length" in firstArg) {
    return {
      nodes: firstArg,
      source: args[1],
      positions: args[2],
      path: args[3],
      originalError: args[4],
      extensions: args[5]
    };
  }
  return firstArg;
}
function undefinedIfEmpty(array) {
  return array === void 0 || array.length === 0 ? void 0 : array;
}
var GraphQLError;
var init_GraphQLError = __esm({
  "node_modules/graphql/error/GraphQLError.mjs"() {
    init_isObjectLike();
    init_location();
    init_printLocation();
    GraphQLError = class _GraphQLError extends Error {
      /**
       * An array of `{ line, column }` locations within the source GraphQL document
       * which correspond to this error.
       *
       * Errors during validation often contain multiple locations, for example to
       * point out two things with the same name. Errors during execution include a
       * single location, the field which produced the error.
       *
       * Enumerable, and appears in the result of JSON.stringify().
       */
      /**
       * An array describing the JSON-path into the execution response which
       * corresponds to this error. Only included for errors during execution.
       *
       * Enumerable, and appears in the result of JSON.stringify().
       */
      /**
       * An array of GraphQL AST Nodes corresponding to this error.
       */
      /**
       * The source GraphQL document for the first location of this error.
       *
       * Note that if this Error represents more than one node, the source may not
       * represent nodes after the first node.
       */
      /**
       * An array of character offsets within the source GraphQL document
       * which correspond to this error.
       */
      /**
       * The original error thrown from a field resolver during execution.
       */
      /**
       * Extension fields to add to the formatted error.
       */
      /**
       * @deprecated Please use the `GraphQLErrorOptions` constructor overload instead.
       */
      constructor(message, ...rawArgs) {
        var _this$nodes, _nodeLocations$, _ref;
        const { nodes, source, positions, path, originalError, extensions } = toNormalizedOptions(rawArgs);
        super(message);
        this.name = "GraphQLError";
        this.path = path !== null && path !== void 0 ? path : void 0;
        this.originalError = originalError !== null && originalError !== void 0 ? originalError : void 0;
        this.nodes = undefinedIfEmpty(
          Array.isArray(nodes) ? nodes : nodes ? [nodes] : void 0
        );
        const nodeLocations = undefinedIfEmpty(
          (_this$nodes = this.nodes) === null || _this$nodes === void 0 ? void 0 : _this$nodes.map((node) => node.loc).filter((loc) => loc != null)
        );
        this.source = source !== null && source !== void 0 ? source : nodeLocations === null || nodeLocations === void 0 ? void 0 : (_nodeLocations$ = nodeLocations[0]) === null || _nodeLocations$ === void 0 ? void 0 : _nodeLocations$.source;
        this.positions = positions !== null && positions !== void 0 ? positions : nodeLocations === null || nodeLocations === void 0 ? void 0 : nodeLocations.map((loc) => loc.start);
        this.locations = positions && source ? positions.map((pos) => getLocation(source, pos)) : nodeLocations === null || nodeLocations === void 0 ? void 0 : nodeLocations.map((loc) => getLocation(loc.source, loc.start));
        const originalExtensions = isObjectLike(
          originalError === null || originalError === void 0 ? void 0 : originalError.extensions
        ) ? originalError === null || originalError === void 0 ? void 0 : originalError.extensions : void 0;
        this.extensions = (_ref = extensions !== null && extensions !== void 0 ? extensions : originalExtensions) !== null && _ref !== void 0 ? _ref : /* @__PURE__ */ Object.create(null);
        Object.defineProperties(this, {
          message: {
            writable: true,
            enumerable: true
          },
          name: {
            enumerable: false
          },
          nodes: {
            enumerable: false
          },
          source: {
            enumerable: false
          },
          positions: {
            enumerable: false
          },
          originalError: {
            enumerable: false
          }
        });
        if (originalError !== null && originalError !== void 0 && originalError.stack) {
          Object.defineProperty(this, "stack", {
            value: originalError.stack,
            writable: true,
            configurable: true
          });
        } else if (Error.captureStackTrace) {
          Error.captureStackTrace(this, _GraphQLError);
        } else {
          Object.defineProperty(this, "stack", {
            value: Error().stack,
            writable: true,
            configurable: true
          });
        }
      }
      get [Symbol.toStringTag]() {
        return "GraphQLError";
      }
      toString() {
        let output = this.message;
        if (this.nodes) {
          for (const node of this.nodes) {
            if (node.loc) {
              output += "\n\n" + printLocation(node.loc);
            }
          }
        } else if (this.source && this.locations) {
          for (const location2 of this.locations) {
            output += "\n\n" + printSourceLocation(this.source, location2);
          }
        }
        return output;
      }
      toJSON() {
        const formattedError = {
          message: this.message
        };
        if (this.locations != null) {
          formattedError.locations = this.locations;
        }
        if (this.path != null) {
          formattedError.path = this.path;
        }
        if (this.extensions != null && Object.keys(this.extensions).length > 0) {
          formattedError.extensions = this.extensions;
        }
        return formattedError;
      }
    };
  }
});

// node_modules/graphql/error/syntaxError.mjs
function syntaxError(source, position, description) {
  return new GraphQLError(`Syntax Error: ${description}`, {
    source,
    positions: [position]
  });
}
var init_syntaxError = __esm({
  "node_modules/graphql/error/syntaxError.mjs"() {
    init_GraphQLError();
  }
});

// node_modules/graphql/language/ast.mjs
function isNode(maybeNode) {
  const maybeKind = maybeNode === null || maybeNode === void 0 ? void 0 : maybeNode.kind;
  return typeof maybeKind === "string" && kindValues.has(maybeKind);
}
var Location, Token, QueryDocumentKeys, kindValues, OperationTypeNode;
var init_ast = __esm({
  "node_modules/graphql/language/ast.mjs"() {
    Location = class {
      /**
       * The character offset at which this Node begins.
       */
      /**
       * The character offset at which this Node ends.
       */
      /**
       * The Token at which this Node begins.
       */
      /**
       * The Token at which this Node ends.
       */
      /**
       * The Source document the AST represents.
       */
      constructor(startToken, endToken, source) {
        this.start = startToken.start;
        this.end = endToken.end;
        this.startToken = startToken;
        this.endToken = endToken;
        this.source = source;
      }
      get [Symbol.toStringTag]() {
        return "Location";
      }
      toJSON() {
        return {
          start: this.start,
          end: this.end
        };
      }
    };
    Token = class {
      /**
       * The kind of Token.
       */
      /**
       * The character offset at which this Node begins.
       */
      /**
       * The character offset at which this Node ends.
       */
      /**
       * The 1-indexed line number on which this Token appears.
       */
      /**
       * The 1-indexed column number at which this Token begins.
       */
      /**
       * For non-punctuation tokens, represents the interpreted value of the token.
       *
       * Note: is undefined for punctuation tokens, but typed as string for
       * convenience in the parser.
       */
      /**
       * Tokens exist as nodes in a double-linked-list amongst all tokens
       * including ignored tokens. <SOF> is always the first node and <EOF>
       * the last.
       */
      constructor(kind, start, end, line, column, value) {
        this.kind = kind;
        this.start = start;
        this.end = end;
        this.line = line;
        this.column = column;
        this.value = value;
        this.prev = null;
        this.next = null;
      }
      get [Symbol.toStringTag]() {
        return "Token";
      }
      toJSON() {
        return {
          kind: this.kind,
          value: this.value,
          line: this.line,
          column: this.column
        };
      }
    };
    QueryDocumentKeys = {
      Name: [],
      Document: ["definitions"],
      OperationDefinition: [
        "name",
        "variableDefinitions",
        "directives",
        "selectionSet"
      ],
      VariableDefinition: ["variable", "type", "defaultValue", "directives"],
      Variable: ["name"],
      SelectionSet: ["selections"],
      Field: ["alias", "name", "arguments", "directives", "selectionSet"],
      Argument: ["name", "value"],
      FragmentSpread: ["name", "directives"],
      InlineFragment: ["typeCondition", "directives", "selectionSet"],
      FragmentDefinition: [
        "name",
        // Note: fragment variable definitions are deprecated and will removed in v17.0.0
        "variableDefinitions",
        "typeCondition",
        "directives",
        "selectionSet"
      ],
      IntValue: [],
      FloatValue: [],
      StringValue: [],
      BooleanValue: [],
      NullValue: [],
      EnumValue: [],
      ListValue: ["values"],
      ObjectValue: ["fields"],
      ObjectField: ["name", "value"],
      Directive: ["name", "arguments"],
      NamedType: ["name"],
      ListType: ["type"],
      NonNullType: ["type"],
      SchemaDefinition: ["description", "directives", "operationTypes"],
      OperationTypeDefinition: ["type"],
      ScalarTypeDefinition: ["description", "name", "directives"],
      ObjectTypeDefinition: [
        "description",
        "name",
        "interfaces",
        "directives",
        "fields"
      ],
      FieldDefinition: ["description", "name", "arguments", "type", "directives"],
      InputValueDefinition: [
        "description",
        "name",
        "type",
        "defaultValue",
        "directives"
      ],
      InterfaceTypeDefinition: [
        "description",
        "name",
        "interfaces",
        "directives",
        "fields"
      ],
      UnionTypeDefinition: ["description", "name", "directives", "types"],
      EnumTypeDefinition: ["description", "name", "directives", "values"],
      EnumValueDefinition: ["description", "name", "directives"],
      InputObjectTypeDefinition: ["description", "name", "directives", "fields"],
      DirectiveDefinition: ["description", "name", "arguments", "locations"],
      SchemaExtension: ["directives", "operationTypes"],
      ScalarTypeExtension: ["name", "directives"],
      ObjectTypeExtension: ["name", "interfaces", "directives", "fields"],
      InterfaceTypeExtension: ["name", "interfaces", "directives", "fields"],
      UnionTypeExtension: ["name", "directives", "types"],
      EnumTypeExtension: ["name", "directives", "values"],
      InputObjectTypeExtension: ["name", "directives", "fields"]
    };
    kindValues = new Set(Object.keys(QueryDocumentKeys));
    (function(OperationTypeNode2) {
      OperationTypeNode2["QUERY"] = "query";
      OperationTypeNode2["MUTATION"] = "mutation";
      OperationTypeNode2["SUBSCRIPTION"] = "subscription";
    })(OperationTypeNode || (OperationTypeNode = {}));
  }
});

// node_modules/graphql/language/directiveLocation.mjs
var DirectiveLocation;
var init_directiveLocation = __esm({
  "node_modules/graphql/language/directiveLocation.mjs"() {
    (function(DirectiveLocation2) {
      DirectiveLocation2["QUERY"] = "QUERY";
      DirectiveLocation2["MUTATION"] = "MUTATION";
      DirectiveLocation2["SUBSCRIPTION"] = "SUBSCRIPTION";
      DirectiveLocation2["FIELD"] = "FIELD";
      DirectiveLocation2["FRAGMENT_DEFINITION"] = "FRAGMENT_DEFINITION";
      DirectiveLocation2["FRAGMENT_SPREAD"] = "FRAGMENT_SPREAD";
      DirectiveLocation2["INLINE_FRAGMENT"] = "INLINE_FRAGMENT";
      DirectiveLocation2["VARIABLE_DEFINITION"] = "VARIABLE_DEFINITION";
      DirectiveLocation2["SCHEMA"] = "SCHEMA";
      DirectiveLocation2["SCALAR"] = "SCALAR";
      DirectiveLocation2["OBJECT"] = "OBJECT";
      DirectiveLocation2["FIELD_DEFINITION"] = "FIELD_DEFINITION";
      DirectiveLocation2["ARGUMENT_DEFINITION"] = "ARGUMENT_DEFINITION";
      DirectiveLocation2["INTERFACE"] = "INTERFACE";
      DirectiveLocation2["UNION"] = "UNION";
      DirectiveLocation2["ENUM"] = "ENUM";
      DirectiveLocation2["ENUM_VALUE"] = "ENUM_VALUE";
      DirectiveLocation2["INPUT_OBJECT"] = "INPUT_OBJECT";
      DirectiveLocation2["INPUT_FIELD_DEFINITION"] = "INPUT_FIELD_DEFINITION";
    })(DirectiveLocation || (DirectiveLocation = {}));
  }
});

// node_modules/graphql/language/kinds.mjs
var Kind;
var init_kinds = __esm({
  "node_modules/graphql/language/kinds.mjs"() {
    (function(Kind2) {
      Kind2["NAME"] = "Name";
      Kind2["DOCUMENT"] = "Document";
      Kind2["OPERATION_DEFINITION"] = "OperationDefinition";
      Kind2["VARIABLE_DEFINITION"] = "VariableDefinition";
      Kind2["SELECTION_SET"] = "SelectionSet";
      Kind2["FIELD"] = "Field";
      Kind2["ARGUMENT"] = "Argument";
      Kind2["FRAGMENT_SPREAD"] = "FragmentSpread";
      Kind2["INLINE_FRAGMENT"] = "InlineFragment";
      Kind2["FRAGMENT_DEFINITION"] = "FragmentDefinition";
      Kind2["VARIABLE"] = "Variable";
      Kind2["INT"] = "IntValue";
      Kind2["FLOAT"] = "FloatValue";
      Kind2["STRING"] = "StringValue";
      Kind2["BOOLEAN"] = "BooleanValue";
      Kind2["NULL"] = "NullValue";
      Kind2["ENUM"] = "EnumValue";
      Kind2["LIST"] = "ListValue";
      Kind2["OBJECT"] = "ObjectValue";
      Kind2["OBJECT_FIELD"] = "ObjectField";
      Kind2["DIRECTIVE"] = "Directive";
      Kind2["NAMED_TYPE"] = "NamedType";
      Kind2["LIST_TYPE"] = "ListType";
      Kind2["NON_NULL_TYPE"] = "NonNullType";
      Kind2["SCHEMA_DEFINITION"] = "SchemaDefinition";
      Kind2["OPERATION_TYPE_DEFINITION"] = "OperationTypeDefinition";
      Kind2["SCALAR_TYPE_DEFINITION"] = "ScalarTypeDefinition";
      Kind2["OBJECT_TYPE_DEFINITION"] = "ObjectTypeDefinition";
      Kind2["FIELD_DEFINITION"] = "FieldDefinition";
      Kind2["INPUT_VALUE_DEFINITION"] = "InputValueDefinition";
      Kind2["INTERFACE_TYPE_DEFINITION"] = "InterfaceTypeDefinition";
      Kind2["UNION_TYPE_DEFINITION"] = "UnionTypeDefinition";
      Kind2["ENUM_TYPE_DEFINITION"] = "EnumTypeDefinition";
      Kind2["ENUM_VALUE_DEFINITION"] = "EnumValueDefinition";
      Kind2["INPUT_OBJECT_TYPE_DEFINITION"] = "InputObjectTypeDefinition";
      Kind2["DIRECTIVE_DEFINITION"] = "DirectiveDefinition";
      Kind2["SCHEMA_EXTENSION"] = "SchemaExtension";
      Kind2["SCALAR_TYPE_EXTENSION"] = "ScalarTypeExtension";
      Kind2["OBJECT_TYPE_EXTENSION"] = "ObjectTypeExtension";
      Kind2["INTERFACE_TYPE_EXTENSION"] = "InterfaceTypeExtension";
      Kind2["UNION_TYPE_EXTENSION"] = "UnionTypeExtension";
      Kind2["ENUM_TYPE_EXTENSION"] = "EnumTypeExtension";
      Kind2["INPUT_OBJECT_TYPE_EXTENSION"] = "InputObjectTypeExtension";
    })(Kind || (Kind = {}));
  }
});

// node_modules/graphql/language/characterClasses.mjs
function isWhiteSpace(code) {
  return code === 9 || code === 32;
}
function isDigit(code) {
  return code >= 48 && code <= 57;
}
function isLetter(code) {
  return code >= 97 && code <= 122 || // A-Z
  code >= 65 && code <= 90;
}
function isNameStart(code) {
  return isLetter(code) || code === 95;
}
function isNameContinue(code) {
  return isLetter(code) || isDigit(code) || code === 95;
}
var init_characterClasses = __esm({
  "node_modules/graphql/language/characterClasses.mjs"() {
  }
});

// node_modules/graphql/language/blockString.mjs
function dedentBlockStringLines(lines) {
  var _firstNonEmptyLine2;
  let commonIndent = Number.MAX_SAFE_INTEGER;
  let firstNonEmptyLine = null;
  let lastNonEmptyLine = -1;
  for (let i = 0; i < lines.length; ++i) {
    var _firstNonEmptyLine;
    const line = lines[i];
    const indent2 = leadingWhitespace(line);
    if (indent2 === line.length) {
      continue;
    }
    firstNonEmptyLine = (_firstNonEmptyLine = firstNonEmptyLine) !== null && _firstNonEmptyLine !== void 0 ? _firstNonEmptyLine : i;
    lastNonEmptyLine = i;
    if (i !== 0 && indent2 < commonIndent) {
      commonIndent = indent2;
    }
  }
  return lines.map((line, i) => i === 0 ? line : line.slice(commonIndent)).slice(
    (_firstNonEmptyLine2 = firstNonEmptyLine) !== null && _firstNonEmptyLine2 !== void 0 ? _firstNonEmptyLine2 : 0,
    lastNonEmptyLine + 1
  );
}
function leadingWhitespace(str) {
  let i = 0;
  while (i < str.length && isWhiteSpace(str.charCodeAt(i))) {
    ++i;
  }
  return i;
}
function printBlockString(value, options) {
  const escapedValue = value.replace(/"""/g, '\\"""');
  const lines = escapedValue.split(/\r\n|[\n\r]/g);
  const isSingleLine = lines.length === 1;
  const forceLeadingNewLine = lines.length > 1 && lines.slice(1).every((line) => line.length === 0 || isWhiteSpace(line.charCodeAt(0)));
  const hasTrailingTripleQuotes = escapedValue.endsWith('\\"""');
  const hasTrailingQuote = value.endsWith('"') && !hasTrailingTripleQuotes;
  const hasTrailingSlash = value.endsWith("\\");
  const forceTrailingNewline = hasTrailingQuote || hasTrailingSlash;
  const printAsMultipleLines = !(options !== null && options !== void 0 && options.minimize) && // add leading and trailing new lines only if it improves readability
  (!isSingleLine || value.length > 70 || forceTrailingNewline || forceLeadingNewLine || hasTrailingTripleQuotes);
  let result = "";
  const skipLeadingNewLine = isSingleLine && isWhiteSpace(value.charCodeAt(0));
  if (printAsMultipleLines && !skipLeadingNewLine || forceLeadingNewLine) {
    result += "\n";
  }
  result += escapedValue;
  if (printAsMultipleLines || forceTrailingNewline) {
    result += "\n";
  }
  return '"""' + result + '"""';
}
var init_blockString = __esm({
  "node_modules/graphql/language/blockString.mjs"() {
    init_characterClasses();
  }
});

// node_modules/graphql/language/tokenKind.mjs
var TokenKind;
var init_tokenKind = __esm({
  "node_modules/graphql/language/tokenKind.mjs"() {
    (function(TokenKind2) {
      TokenKind2["SOF"] = "<SOF>";
      TokenKind2["EOF"] = "<EOF>";
      TokenKind2["BANG"] = "!";
      TokenKind2["DOLLAR"] = "$";
      TokenKind2["AMP"] = "&";
      TokenKind2["PAREN_L"] = "(";
      TokenKind2["PAREN_R"] = ")";
      TokenKind2["SPREAD"] = "...";
      TokenKind2["COLON"] = ":";
      TokenKind2["EQUALS"] = "=";
      TokenKind2["AT"] = "@";
      TokenKind2["BRACKET_L"] = "[";
      TokenKind2["BRACKET_R"] = "]";
      TokenKind2["BRACE_L"] = "{";
      TokenKind2["PIPE"] = "|";
      TokenKind2["BRACE_R"] = "}";
      TokenKind2["NAME"] = "Name";
      TokenKind2["INT"] = "Int";
      TokenKind2["FLOAT"] = "Float";
      TokenKind2["STRING"] = "String";
      TokenKind2["BLOCK_STRING"] = "BlockString";
      TokenKind2["COMMENT"] = "Comment";
    })(TokenKind || (TokenKind = {}));
  }
});

// node_modules/graphql/language/lexer.mjs
function isPunctuatorTokenKind(kind) {
  return kind === TokenKind.BANG || kind === TokenKind.DOLLAR || kind === TokenKind.AMP || kind === TokenKind.PAREN_L || kind === TokenKind.PAREN_R || kind === TokenKind.SPREAD || kind === TokenKind.COLON || kind === TokenKind.EQUALS || kind === TokenKind.AT || kind === TokenKind.BRACKET_L || kind === TokenKind.BRACKET_R || kind === TokenKind.BRACE_L || kind === TokenKind.PIPE || kind === TokenKind.BRACE_R;
}
function isUnicodeScalarValue(code) {
  return code >= 0 && code <= 55295 || code >= 57344 && code <= 1114111;
}
function isSupplementaryCodePoint(body, location2) {
  return isLeadingSurrogate(body.charCodeAt(location2)) && isTrailingSurrogate(body.charCodeAt(location2 + 1));
}
function isLeadingSurrogate(code) {
  return code >= 55296 && code <= 56319;
}
function isTrailingSurrogate(code) {
  return code >= 56320 && code <= 57343;
}
function printCodePointAt(lexer, location2) {
  const code = lexer.source.body.codePointAt(location2);
  if (code === void 0) {
    return TokenKind.EOF;
  } else if (code >= 32 && code <= 126) {
    const char = String.fromCodePoint(code);
    return char === '"' ? `'"'` : `"${char}"`;
  }
  return "U+" + code.toString(16).toUpperCase().padStart(4, "0");
}
function createToken(lexer, kind, start, end, value) {
  const line = lexer.line;
  const col = 1 + start - lexer.lineStart;
  return new Token(kind, start, end, line, col, value);
}
function readNextToken(lexer, start) {
  const body = lexer.source.body;
  const bodyLength = body.length;
  let position = start;
  while (position < bodyLength) {
    const code = body.charCodeAt(position);
    switch (code) {
      case 65279:
      case 9:
      case 32:
      case 44:
        ++position;
        continue;
      case 10:
        ++position;
        ++lexer.line;
        lexer.lineStart = position;
        continue;
      case 13:
        if (body.charCodeAt(position + 1) === 10) {
          position += 2;
        } else {
          ++position;
        }
        ++lexer.line;
        lexer.lineStart = position;
        continue;
      case 35:
        return readComment(lexer, position);
      case 33:
        return createToken(lexer, TokenKind.BANG, position, position + 1);
      case 36:
        return createToken(lexer, TokenKind.DOLLAR, position, position + 1);
      case 38:
        return createToken(lexer, TokenKind.AMP, position, position + 1);
      case 40:
        return createToken(lexer, TokenKind.PAREN_L, position, position + 1);
      case 41:
        return createToken(lexer, TokenKind.PAREN_R, position, position + 1);
      case 46:
        if (body.charCodeAt(position + 1) === 46 && body.charCodeAt(position + 2) === 46) {
          return createToken(lexer, TokenKind.SPREAD, position, position + 3);
        }
        break;
      case 58:
        return createToken(lexer, TokenKind.COLON, position, position + 1);
      case 61:
        return createToken(lexer, TokenKind.EQUALS, position, position + 1);
      case 64:
        return createToken(lexer, TokenKind.AT, position, position + 1);
      case 91:
        return createToken(lexer, TokenKind.BRACKET_L, position, position + 1);
      case 93:
        return createToken(lexer, TokenKind.BRACKET_R, position, position + 1);
      case 123:
        return createToken(lexer, TokenKind.BRACE_L, position, position + 1);
      case 124:
        return createToken(lexer, TokenKind.PIPE, position, position + 1);
      case 125:
        return createToken(lexer, TokenKind.BRACE_R, position, position + 1);
      case 34:
        if (body.charCodeAt(position + 1) === 34 && body.charCodeAt(position + 2) === 34) {
          return readBlockString(lexer, position);
        }
        return readString(lexer, position);
    }
    if (isDigit(code) || code === 45) {
      return readNumber(lexer, position, code);
    }
    if (isNameStart(code)) {
      return readName(lexer, position);
    }
    throw syntaxError(
      lexer.source,
      position,
      code === 39 ? `Unexpected single quote character ('), did you mean to use a double quote (")?` : isUnicodeScalarValue(code) || isSupplementaryCodePoint(body, position) ? `Unexpected character: ${printCodePointAt(lexer, position)}.` : `Invalid character: ${printCodePointAt(lexer, position)}.`
    );
  }
  return createToken(lexer, TokenKind.EOF, bodyLength, bodyLength);
}
function readComment(lexer, start) {
  const body = lexer.source.body;
  const bodyLength = body.length;
  let position = start + 1;
  while (position < bodyLength) {
    const code = body.charCodeAt(position);
    if (code === 10 || code === 13) {
      break;
    }
    if (isUnicodeScalarValue(code)) {
      ++position;
    } else if (isSupplementaryCodePoint(body, position)) {
      position += 2;
    } else {
      break;
    }
  }
  return createToken(
    lexer,
    TokenKind.COMMENT,
    start,
    position,
    body.slice(start + 1, position)
  );
}
function readNumber(lexer, start, firstCode) {
  const body = lexer.source.body;
  let position = start;
  let code = firstCode;
  let isFloat = false;
  if (code === 45) {
    code = body.charCodeAt(++position);
  }
  if (code === 48) {
    code = body.charCodeAt(++position);
    if (isDigit(code)) {
      throw syntaxError(
        lexer.source,
        position,
        `Invalid number, unexpected digit after 0: ${printCodePointAt(
          lexer,
          position
        )}.`
      );
    }
  } else {
    position = readDigits(lexer, position, code);
    code = body.charCodeAt(position);
  }
  if (code === 46) {
    isFloat = true;
    code = body.charCodeAt(++position);
    position = readDigits(lexer, position, code);
    code = body.charCodeAt(position);
  }
  if (code === 69 || code === 101) {
    isFloat = true;
    code = body.charCodeAt(++position);
    if (code === 43 || code === 45) {
      code = body.charCodeAt(++position);
    }
    position = readDigits(lexer, position, code);
    code = body.charCodeAt(position);
  }
  if (code === 46 || isNameStart(code)) {
    throw syntaxError(
      lexer.source,
      position,
      `Invalid number, expected digit but got: ${printCodePointAt(
        lexer,
        position
      )}.`
    );
  }
  return createToken(
    lexer,
    isFloat ? TokenKind.FLOAT : TokenKind.INT,
    start,
    position,
    body.slice(start, position)
  );
}
function readDigits(lexer, start, firstCode) {
  if (!isDigit(firstCode)) {
    throw syntaxError(
      lexer.source,
      start,
      `Invalid number, expected digit but got: ${printCodePointAt(
        lexer,
        start
      )}.`
    );
  }
  const body = lexer.source.body;
  let position = start + 1;
  while (isDigit(body.charCodeAt(position))) {
    ++position;
  }
  return position;
}
function readString(lexer, start) {
  const body = lexer.source.body;
  const bodyLength = body.length;
  let position = start + 1;
  let chunkStart = position;
  let value = "";
  while (position < bodyLength) {
    const code = body.charCodeAt(position);
    if (code === 34) {
      value += body.slice(chunkStart, position);
      return createToken(lexer, TokenKind.STRING, start, position + 1, value);
    }
    if (code === 92) {
      value += body.slice(chunkStart, position);
      const escape = body.charCodeAt(position + 1) === 117 ? body.charCodeAt(position + 2) === 123 ? readEscapedUnicodeVariableWidth(lexer, position) : readEscapedUnicodeFixedWidth(lexer, position) : readEscapedCharacter(lexer, position);
      value += escape.value;
      position += escape.size;
      chunkStart = position;
      continue;
    }
    if (code === 10 || code === 13) {
      break;
    }
    if (isUnicodeScalarValue(code)) {
      ++position;
    } else if (isSupplementaryCodePoint(body, position)) {
      position += 2;
    } else {
      throw syntaxError(
        lexer.source,
        position,
        `Invalid character within String: ${printCodePointAt(
          lexer,
          position
        )}.`
      );
    }
  }
  throw syntaxError(lexer.source, position, "Unterminated string.");
}
function readEscapedUnicodeVariableWidth(lexer, position) {
  const body = lexer.source.body;
  let point = 0;
  let size = 3;
  while (size < 12) {
    const code = body.charCodeAt(position + size++);
    if (code === 125) {
      if (size < 5 || !isUnicodeScalarValue(point)) {
        break;
      }
      return {
        value: String.fromCodePoint(point),
        size
      };
    }
    point = point << 4 | readHexDigit(code);
    if (point < 0) {
      break;
    }
  }
  throw syntaxError(
    lexer.source,
    position,
    `Invalid Unicode escape sequence: "${body.slice(
      position,
      position + size
    )}".`
  );
}
function readEscapedUnicodeFixedWidth(lexer, position) {
  const body = lexer.source.body;
  const code = read16BitHexCode(body, position + 2);
  if (isUnicodeScalarValue(code)) {
    return {
      value: String.fromCodePoint(code),
      size: 6
    };
  }
  if (isLeadingSurrogate(code)) {
    if (body.charCodeAt(position + 6) === 92 && body.charCodeAt(position + 7) === 117) {
      const trailingCode = read16BitHexCode(body, position + 8);
      if (isTrailingSurrogate(trailingCode)) {
        return {
          value: String.fromCodePoint(code, trailingCode),
          size: 12
        };
      }
    }
  }
  throw syntaxError(
    lexer.source,
    position,
    `Invalid Unicode escape sequence: "${body.slice(position, position + 6)}".`
  );
}
function read16BitHexCode(body, position) {
  return readHexDigit(body.charCodeAt(position)) << 12 | readHexDigit(body.charCodeAt(position + 1)) << 8 | readHexDigit(body.charCodeAt(position + 2)) << 4 | readHexDigit(body.charCodeAt(position + 3));
}
function readHexDigit(code) {
  return code >= 48 && code <= 57 ? code - 48 : code >= 65 && code <= 70 ? code - 55 : code >= 97 && code <= 102 ? code - 87 : -1;
}
function readEscapedCharacter(lexer, position) {
  const body = lexer.source.body;
  const code = body.charCodeAt(position + 1);
  switch (code) {
    case 34:
      return {
        value: '"',
        size: 2
      };
    case 92:
      return {
        value: "\\",
        size: 2
      };
    case 47:
      return {
        value: "/",
        size: 2
      };
    case 98:
      return {
        value: "\b",
        size: 2
      };
    case 102:
      return {
        value: "\f",
        size: 2
      };
    case 110:
      return {
        value: "\n",
        size: 2
      };
    case 114:
      return {
        value: "\r",
        size: 2
      };
    case 116:
      return {
        value: "	",
        size: 2
      };
  }
  throw syntaxError(
    lexer.source,
    position,
    `Invalid character escape sequence: "${body.slice(
      position,
      position + 2
    )}".`
  );
}
function readBlockString(lexer, start) {
  const body = lexer.source.body;
  const bodyLength = body.length;
  let lineStart = lexer.lineStart;
  let position = start + 3;
  let chunkStart = position;
  let currentLine = "";
  const blockLines = [];
  while (position < bodyLength) {
    const code = body.charCodeAt(position);
    if (code === 34 && body.charCodeAt(position + 1) === 34 && body.charCodeAt(position + 2) === 34) {
      currentLine += body.slice(chunkStart, position);
      blockLines.push(currentLine);
      const token = createToken(
        lexer,
        TokenKind.BLOCK_STRING,
        start,
        position + 3,
        // Return a string of the lines joined with U+000A.
        dedentBlockStringLines(blockLines).join("\n")
      );
      lexer.line += blockLines.length - 1;
      lexer.lineStart = lineStart;
      return token;
    }
    if (code === 92 && body.charCodeAt(position + 1) === 34 && body.charCodeAt(position + 2) === 34 && body.charCodeAt(position + 3) === 34) {
      currentLine += body.slice(chunkStart, position);
      chunkStart = position + 1;
      position += 4;
      continue;
    }
    if (code === 10 || code === 13) {
      currentLine += body.slice(chunkStart, position);
      blockLines.push(currentLine);
      if (code === 13 && body.charCodeAt(position + 1) === 10) {
        position += 2;
      } else {
        ++position;
      }
      currentLine = "";
      chunkStart = position;
      lineStart = position;
      continue;
    }
    if (isUnicodeScalarValue(code)) {
      ++position;
    } else if (isSupplementaryCodePoint(body, position)) {
      position += 2;
    } else {
      throw syntaxError(
        lexer.source,
        position,
        `Invalid character within String: ${printCodePointAt(
          lexer,
          position
        )}.`
      );
    }
  }
  throw syntaxError(lexer.source, position, "Unterminated string.");
}
function readName(lexer, start) {
  const body = lexer.source.body;
  const bodyLength = body.length;
  let position = start + 1;
  while (position < bodyLength) {
    const code = body.charCodeAt(position);
    if (isNameContinue(code)) {
      ++position;
    } else {
      break;
    }
  }
  return createToken(
    lexer,
    TokenKind.NAME,
    start,
    position,
    body.slice(start, position)
  );
}
var Lexer;
var init_lexer = __esm({
  "node_modules/graphql/language/lexer.mjs"() {
    init_syntaxError();
    init_ast();
    init_blockString();
    init_characterClasses();
    init_tokenKind();
    Lexer = class {
      /**
       * The previously focused non-ignored token.
       */
      /**
       * The currently focused non-ignored token.
       */
      /**
       * The (1-indexed) line containing the current token.
       */
      /**
       * The character offset at which the current line begins.
       */
      constructor(source) {
        const startOfFileToken = new Token(TokenKind.SOF, 0, 0, 0, 0);
        this.source = source;
        this.lastToken = startOfFileToken;
        this.token = startOfFileToken;
        this.line = 1;
        this.lineStart = 0;
      }
      get [Symbol.toStringTag]() {
        return "Lexer";
      }
      /**
       * Advances the token stream to the next non-ignored token.
       */
      advance() {
        this.lastToken = this.token;
        const token = this.token = this.lookahead();
        return token;
      }
      /**
       * Looks ahead and returns the next non-ignored token, but does not change
       * the state of Lexer.
       */
      lookahead() {
        let token = this.token;
        if (token.kind !== TokenKind.EOF) {
          do {
            if (token.next) {
              token = token.next;
            } else {
              const nextToken = readNextToken(this, token.end);
              token.next = nextToken;
              nextToken.prev = token;
              token = nextToken;
            }
          } while (token.kind === TokenKind.COMMENT);
        }
        return token;
      }
    };
  }
});

// node_modules/graphql/jsutils/devAssert.mjs
function devAssert(condition, message) {
  const booleanCondition = Boolean(condition);
  if (!booleanCondition) {
    throw new Error(message);
  }
}
var init_devAssert = __esm({
  "node_modules/graphql/jsutils/devAssert.mjs"() {
  }
});

// node_modules/graphql/jsutils/inspect.mjs
function inspect(value) {
  return formatValue(value, []);
}
function formatValue(value, seenValues) {
  switch (typeof value) {
    case "string":
      return JSON.stringify(value);
    case "function":
      return value.name ? `[function ${value.name}]` : "[function]";
    case "object":
      return formatObjectValue(value, seenValues);
    default:
      return String(value);
  }
}
function formatObjectValue(value, previouslySeenValues) {
  if (value === null) {
    return "null";
  }
  if (previouslySeenValues.includes(value)) {
    return "[Circular]";
  }
  const seenValues = [...previouslySeenValues, value];
  if (isJSONable(value)) {
    const jsonValue = value.toJSON();
    if (jsonValue !== value) {
      return typeof jsonValue === "string" ? jsonValue : formatValue(jsonValue, seenValues);
    }
  } else if (Array.isArray(value)) {
    return formatArray(value, seenValues);
  }
  return formatObject(value, seenValues);
}
function isJSONable(value) {
  return typeof value.toJSON === "function";
}
function formatObject(object, seenValues) {
  const entries = Object.entries(object);
  if (entries.length === 0) {
    return "{}";
  }
  if (seenValues.length > MAX_RECURSIVE_DEPTH) {
    return "[" + getObjectTag(object) + "]";
  }
  const properties = entries.map(
    ([key, value]) => key + ": " + formatValue(value, seenValues)
  );
  return "{ " + properties.join(", ") + " }";
}
function formatArray(array, seenValues) {
  if (array.length === 0) {
    return "[]";
  }
  if (seenValues.length > MAX_RECURSIVE_DEPTH) {
    return "[Array]";
  }
  const len = Math.min(MAX_ARRAY_LENGTH, array.length);
  const remaining = array.length - len;
  const items = [];
  for (let i = 0; i < len; ++i) {
    items.push(formatValue(array[i], seenValues));
  }
  if (remaining === 1) {
    items.push("... 1 more item");
  } else if (remaining > 1) {
    items.push(`... ${remaining} more items`);
  }
  return "[" + items.join(", ") + "]";
}
function getObjectTag(object) {
  const tag = Object.prototype.toString.call(object).replace(/^\[object /, "").replace(/]$/, "");
  if (tag === "Object" && typeof object.constructor === "function") {
    const name = object.constructor.name;
    if (typeof name === "string" && name !== "") {
      return name;
    }
  }
  return tag;
}
var MAX_ARRAY_LENGTH, MAX_RECURSIVE_DEPTH;
var init_inspect = __esm({
  "node_modules/graphql/jsutils/inspect.mjs"() {
    MAX_ARRAY_LENGTH = 10;
    MAX_RECURSIVE_DEPTH = 2;
  }
});

// node_modules/graphql/jsutils/instanceOf.mjs
var isProduction, instanceOf;
var init_instanceOf = __esm({
  "node_modules/graphql/jsutils/instanceOf.mjs"() {
    init_inspect();
    isProduction = globalThis.process && // eslint-disable-next-line no-undef
    false;
    instanceOf = /* c8 ignore next 6 */
    // FIXME: https://github.com/graphql/graphql-js/issues/2317
    isProduction ? function instanceOf2(value, constructor) {
      return value instanceof constructor;
    } : function instanceOf3(value, constructor) {
      if (value instanceof constructor) {
        return true;
      }
      if (typeof value === "object" && value !== null) {
        var _value$constructor;
        const className = constructor.prototype[Symbol.toStringTag];
        const valueClassName = (
          // We still need to support constructor's name to detect conflicts with older versions of this library.
          Symbol.toStringTag in value ? value[Symbol.toStringTag] : (_value$constructor = value.constructor) === null || _value$constructor === void 0 ? void 0 : _value$constructor.name
        );
        if (className === valueClassName) {
          const stringifiedValue = inspect(value);
          throw new Error(`Cannot use ${className} "${stringifiedValue}" from another module or realm.

Ensure that there is only one instance of "graphql" in the node_modules
directory. If different versions of "graphql" are the dependencies of other
relied on modules, use "resolutions" to ensure only one version is installed.

https://yarnpkg.com/en/docs/selective-version-resolutions

Duplicate "graphql" modules cannot be used at the same time since different
versions may have different capabilities and behavior. The data from one
version used in the function from another could produce confusing and
spurious results.`);
        }
      }
      return false;
    };
  }
});

// node_modules/graphql/language/source.mjs
function isSource(source) {
  return instanceOf(source, Source);
}
var Source;
var init_source = __esm({
  "node_modules/graphql/language/source.mjs"() {
    init_devAssert();
    init_inspect();
    init_instanceOf();
    Source = class {
      constructor(body, name = "GraphQL request", locationOffset = {
        line: 1,
        column: 1
      }) {
        typeof body === "string" || devAssert(false, `Body must be a string. Received: ${inspect(body)}.`);
        this.body = body;
        this.name = name;
        this.locationOffset = locationOffset;
        this.locationOffset.line > 0 || devAssert(
          false,
          "line in locationOffset is 1-indexed and must be positive."
        );
        this.locationOffset.column > 0 || devAssert(
          false,
          "column in locationOffset is 1-indexed and must be positive."
        );
      }
      get [Symbol.toStringTag]() {
        return "Source";
      }
    };
  }
});

// node_modules/graphql/language/parser.mjs
var parser_exports = {};
__export(parser_exports, {
  Parser: () => Parser,
  parse: () => parse,
  parseConstValue: () => parseConstValue,
  parseType: () => parseType,
  parseValue: () => parseValue
});
function parse(source, options) {
  const parser = new Parser(source, options);
  const document2 = parser.parseDocument();
  Object.defineProperty(document2, "tokenCount", {
    enumerable: false,
    value: parser.tokenCount
  });
  return document2;
}
function parseValue(source, options) {
  const parser = new Parser(source, options);
  parser.expectToken(TokenKind.SOF);
  const value = parser.parseValueLiteral(false);
  parser.expectToken(TokenKind.EOF);
  return value;
}
function parseConstValue(source, options) {
  const parser = new Parser(source, options);
  parser.expectToken(TokenKind.SOF);
  const value = parser.parseConstValueLiteral();
  parser.expectToken(TokenKind.EOF);
  return value;
}
function parseType(source, options) {
  const parser = new Parser(source, options);
  parser.expectToken(TokenKind.SOF);
  const type = parser.parseTypeReference();
  parser.expectToken(TokenKind.EOF);
  return type;
}
function getTokenDesc(token) {
  const value = token.value;
  return getTokenKindDesc(token.kind) + (value != null ? ` "${value}"` : "");
}
function getTokenKindDesc(kind) {
  return isPunctuatorTokenKind(kind) ? `"${kind}"` : kind;
}
var Parser;
var init_parser = __esm({
  "node_modules/graphql/language/parser.mjs"() {
    init_syntaxError();
    init_ast();
    init_directiveLocation();
    init_kinds();
    init_lexer();
    init_source();
    init_tokenKind();
    Parser = class {
      constructor(source, options = {}) {
        const sourceObj = isSource(source) ? source : new Source(source);
        this._lexer = new Lexer(sourceObj);
        this._options = options;
        this._tokenCounter = 0;
      }
      get tokenCount() {
        return this._tokenCounter;
      }
      /**
       * Converts a name lex token into a name parse node.
       */
      parseName() {
        const token = this.expectToken(TokenKind.NAME);
        return this.node(token, {
          kind: Kind.NAME,
          value: token.value
        });
      }
      // Implements the parsing rules in the Document section.
      /**
       * Document : Definition+
       */
      parseDocument() {
        return this.node(this._lexer.token, {
          kind: Kind.DOCUMENT,
          definitions: this.many(
            TokenKind.SOF,
            this.parseDefinition,
            TokenKind.EOF
          )
        });
      }
      /**
       * Definition :
       *   - ExecutableDefinition
       *   - TypeSystemDefinition
       *   - TypeSystemExtension
       *
       * ExecutableDefinition :
       *   - OperationDefinition
       *   - FragmentDefinition
       *
       * TypeSystemDefinition :
       *   - SchemaDefinition
       *   - TypeDefinition
       *   - DirectiveDefinition
       *
       * TypeDefinition :
       *   - ScalarTypeDefinition
       *   - ObjectTypeDefinition
       *   - InterfaceTypeDefinition
       *   - UnionTypeDefinition
       *   - EnumTypeDefinition
       *   - InputObjectTypeDefinition
       */
      parseDefinition() {
        if (this.peek(TokenKind.BRACE_L)) {
          return this.parseOperationDefinition();
        }
        const hasDescription = this.peekDescription();
        const keywordToken = hasDescription ? this._lexer.lookahead() : this._lexer.token;
        if (keywordToken.kind === TokenKind.NAME) {
          switch (keywordToken.value) {
            case "schema":
              return this.parseSchemaDefinition();
            case "scalar":
              return this.parseScalarTypeDefinition();
            case "type":
              return this.parseObjectTypeDefinition();
            case "interface":
              return this.parseInterfaceTypeDefinition();
            case "union":
              return this.parseUnionTypeDefinition();
            case "enum":
              return this.parseEnumTypeDefinition();
            case "input":
              return this.parseInputObjectTypeDefinition();
            case "directive":
              return this.parseDirectiveDefinition();
          }
          if (hasDescription) {
            throw syntaxError(
              this._lexer.source,
              this._lexer.token.start,
              "Unexpected description, descriptions are supported only on type definitions."
            );
          }
          switch (keywordToken.value) {
            case "query":
            case "mutation":
            case "subscription":
              return this.parseOperationDefinition();
            case "fragment":
              return this.parseFragmentDefinition();
            case "extend":
              return this.parseTypeSystemExtension();
          }
        }
        throw this.unexpected(keywordToken);
      }
      // Implements the parsing rules in the Operations section.
      /**
       * OperationDefinition :
       *  - SelectionSet
       *  - OperationType Name? VariableDefinitions? Directives? SelectionSet
       */
      parseOperationDefinition() {
        const start = this._lexer.token;
        if (this.peek(TokenKind.BRACE_L)) {
          return this.node(start, {
            kind: Kind.OPERATION_DEFINITION,
            operation: OperationTypeNode.QUERY,
            name: void 0,
            variableDefinitions: [],
            directives: [],
            selectionSet: this.parseSelectionSet()
          });
        }
        const operation = this.parseOperationType();
        let name;
        if (this.peek(TokenKind.NAME)) {
          name = this.parseName();
        }
        return this.node(start, {
          kind: Kind.OPERATION_DEFINITION,
          operation,
          name,
          variableDefinitions: this.parseVariableDefinitions(),
          directives: this.parseDirectives(false),
          selectionSet: this.parseSelectionSet()
        });
      }
      /**
       * OperationType : one of query mutation subscription
       */
      parseOperationType() {
        const operationToken = this.expectToken(TokenKind.NAME);
        switch (operationToken.value) {
          case "query":
            return OperationTypeNode.QUERY;
          case "mutation":
            return OperationTypeNode.MUTATION;
          case "subscription":
            return OperationTypeNode.SUBSCRIPTION;
        }
        throw this.unexpected(operationToken);
      }
      /**
       * VariableDefinitions : ( VariableDefinition+ )
       */
      parseVariableDefinitions() {
        return this.optionalMany(
          TokenKind.PAREN_L,
          this.parseVariableDefinition,
          TokenKind.PAREN_R
        );
      }
      /**
       * VariableDefinition : Variable : Type DefaultValue? Directives[Const]?
       */
      parseVariableDefinition() {
        return this.node(this._lexer.token, {
          kind: Kind.VARIABLE_DEFINITION,
          variable: this.parseVariable(),
          type: (this.expectToken(TokenKind.COLON), this.parseTypeReference()),
          defaultValue: this.expectOptionalToken(TokenKind.EQUALS) ? this.parseConstValueLiteral() : void 0,
          directives: this.parseConstDirectives()
        });
      }
      /**
       * Variable : $ Name
       */
      parseVariable() {
        const start = this._lexer.token;
        this.expectToken(TokenKind.DOLLAR);
        return this.node(start, {
          kind: Kind.VARIABLE,
          name: this.parseName()
        });
      }
      /**
       * ```
       * SelectionSet : { Selection+ }
       * ```
       */
      parseSelectionSet() {
        return this.node(this._lexer.token, {
          kind: Kind.SELECTION_SET,
          selections: this.many(
            TokenKind.BRACE_L,
            this.parseSelection,
            TokenKind.BRACE_R
          )
        });
      }
      /**
       * Selection :
       *   - Field
       *   - FragmentSpread
       *   - InlineFragment
       */
      parseSelection() {
        return this.peek(TokenKind.SPREAD) ? this.parseFragment() : this.parseField();
      }
      /**
       * Field : Alias? Name Arguments? Directives? SelectionSet?
       *
       * Alias : Name :
       */
      parseField() {
        const start = this._lexer.token;
        const nameOrAlias = this.parseName();
        let alias;
        let name;
        if (this.expectOptionalToken(TokenKind.COLON)) {
          alias = nameOrAlias;
          name = this.parseName();
        } else {
          name = nameOrAlias;
        }
        return this.node(start, {
          kind: Kind.FIELD,
          alias,
          name,
          arguments: this.parseArguments(false),
          directives: this.parseDirectives(false),
          selectionSet: this.peek(TokenKind.BRACE_L) ? this.parseSelectionSet() : void 0
        });
      }
      /**
       * Arguments[Const] : ( Argument[?Const]+ )
       */
      parseArguments(isConst) {
        const item = isConst ? this.parseConstArgument : this.parseArgument;
        return this.optionalMany(TokenKind.PAREN_L, item, TokenKind.PAREN_R);
      }
      /**
       * Argument[Const] : Name : Value[?Const]
       */
      parseArgument(isConst = false) {
        const start = this._lexer.token;
        const name = this.parseName();
        this.expectToken(TokenKind.COLON);
        return this.node(start, {
          kind: Kind.ARGUMENT,
          name,
          value: this.parseValueLiteral(isConst)
        });
      }
      parseConstArgument() {
        return this.parseArgument(true);
      }
      // Implements the parsing rules in the Fragments section.
      /**
       * Corresponds to both FragmentSpread and InlineFragment in the spec.
       *
       * FragmentSpread : ... FragmentName Directives?
       *
       * InlineFragment : ... TypeCondition? Directives? SelectionSet
       */
      parseFragment() {
        const start = this._lexer.token;
        this.expectToken(TokenKind.SPREAD);
        const hasTypeCondition = this.expectOptionalKeyword("on");
        if (!hasTypeCondition && this.peek(TokenKind.NAME)) {
          return this.node(start, {
            kind: Kind.FRAGMENT_SPREAD,
            name: this.parseFragmentName(),
            directives: this.parseDirectives(false)
          });
        }
        return this.node(start, {
          kind: Kind.INLINE_FRAGMENT,
          typeCondition: hasTypeCondition ? this.parseNamedType() : void 0,
          directives: this.parseDirectives(false),
          selectionSet: this.parseSelectionSet()
        });
      }
      /**
       * FragmentDefinition :
       *   - fragment FragmentName on TypeCondition Directives? SelectionSet
       *
       * TypeCondition : NamedType
       */
      parseFragmentDefinition() {
        const start = this._lexer.token;
        this.expectKeyword("fragment");
        if (this._options.allowLegacyFragmentVariables === true) {
          return this.node(start, {
            kind: Kind.FRAGMENT_DEFINITION,
            name: this.parseFragmentName(),
            variableDefinitions: this.parseVariableDefinitions(),
            typeCondition: (this.expectKeyword("on"), this.parseNamedType()),
            directives: this.parseDirectives(false),
            selectionSet: this.parseSelectionSet()
          });
        }
        return this.node(start, {
          kind: Kind.FRAGMENT_DEFINITION,
          name: this.parseFragmentName(),
          typeCondition: (this.expectKeyword("on"), this.parseNamedType()),
          directives: this.parseDirectives(false),
          selectionSet: this.parseSelectionSet()
        });
      }
      /**
       * FragmentName : Name but not `on`
       */
      parseFragmentName() {
        if (this._lexer.token.value === "on") {
          throw this.unexpected();
        }
        return this.parseName();
      }
      // Implements the parsing rules in the Values section.
      /**
       * Value[Const] :
       *   - [~Const] Variable
       *   - IntValue
       *   - FloatValue
       *   - StringValue
       *   - BooleanValue
       *   - NullValue
       *   - EnumValue
       *   - ListValue[?Const]
       *   - ObjectValue[?Const]
       *
       * BooleanValue : one of `true` `false`
       *
       * NullValue : `null`
       *
       * EnumValue : Name but not `true`, `false` or `null`
       */
      parseValueLiteral(isConst) {
        const token = this._lexer.token;
        switch (token.kind) {
          case TokenKind.BRACKET_L:
            return this.parseList(isConst);
          case TokenKind.BRACE_L:
            return this.parseObject(isConst);
          case TokenKind.INT:
            this.advanceLexer();
            return this.node(token, {
              kind: Kind.INT,
              value: token.value
            });
          case TokenKind.FLOAT:
            this.advanceLexer();
            return this.node(token, {
              kind: Kind.FLOAT,
              value: token.value
            });
          case TokenKind.STRING:
          case TokenKind.BLOCK_STRING:
            return this.parseStringLiteral();
          case TokenKind.NAME:
            this.advanceLexer();
            switch (token.value) {
              case "true":
                return this.node(token, {
                  kind: Kind.BOOLEAN,
                  value: true
                });
              case "false":
                return this.node(token, {
                  kind: Kind.BOOLEAN,
                  value: false
                });
              case "null":
                return this.node(token, {
                  kind: Kind.NULL
                });
              default:
                return this.node(token, {
                  kind: Kind.ENUM,
                  value: token.value
                });
            }
          case TokenKind.DOLLAR:
            if (isConst) {
              this.expectToken(TokenKind.DOLLAR);
              if (this._lexer.token.kind === TokenKind.NAME) {
                const varName = this._lexer.token.value;
                throw syntaxError(
                  this._lexer.source,
                  token.start,
                  `Unexpected variable "$${varName}" in constant value.`
                );
              } else {
                throw this.unexpected(token);
              }
            }
            return this.parseVariable();
          default:
            throw this.unexpected();
        }
      }
      parseConstValueLiteral() {
        return this.parseValueLiteral(true);
      }
      parseStringLiteral() {
        const token = this._lexer.token;
        this.advanceLexer();
        return this.node(token, {
          kind: Kind.STRING,
          value: token.value,
          block: token.kind === TokenKind.BLOCK_STRING
        });
      }
      /**
       * ListValue[Const] :
       *   - [ ]
       *   - [ Value[?Const]+ ]
       */
      parseList(isConst) {
        const item = () => this.parseValueLiteral(isConst);
        return this.node(this._lexer.token, {
          kind: Kind.LIST,
          values: this.any(TokenKind.BRACKET_L, item, TokenKind.BRACKET_R)
        });
      }
      /**
       * ```
       * ObjectValue[Const] :
       *   - { }
       *   - { ObjectField[?Const]+ }
       * ```
       */
      parseObject(isConst) {
        const item = () => this.parseObjectField(isConst);
        return this.node(this._lexer.token, {
          kind: Kind.OBJECT,
          fields: this.any(TokenKind.BRACE_L, item, TokenKind.BRACE_R)
        });
      }
      /**
       * ObjectField[Const] : Name : Value[?Const]
       */
      parseObjectField(isConst) {
        const start = this._lexer.token;
        const name = this.parseName();
        this.expectToken(TokenKind.COLON);
        return this.node(start, {
          kind: Kind.OBJECT_FIELD,
          name,
          value: this.parseValueLiteral(isConst)
        });
      }
      // Implements the parsing rules in the Directives section.
      /**
       * Directives[Const] : Directive[?Const]+
       */
      parseDirectives(isConst) {
        const directives = [];
        while (this.peek(TokenKind.AT)) {
          directives.push(this.parseDirective(isConst));
        }
        return directives;
      }
      parseConstDirectives() {
        return this.parseDirectives(true);
      }
      /**
       * ```
       * Directive[Const] : @ Name Arguments[?Const]?
       * ```
       */
      parseDirective(isConst) {
        const start = this._lexer.token;
        this.expectToken(TokenKind.AT);
        return this.node(start, {
          kind: Kind.DIRECTIVE,
          name: this.parseName(),
          arguments: this.parseArguments(isConst)
        });
      }
      // Implements the parsing rules in the Types section.
      /**
       * Type :
       *   - NamedType
       *   - ListType
       *   - NonNullType
       */
      parseTypeReference() {
        const start = this._lexer.token;
        let type;
        if (this.expectOptionalToken(TokenKind.BRACKET_L)) {
          const innerType = this.parseTypeReference();
          this.expectToken(TokenKind.BRACKET_R);
          type = this.node(start, {
            kind: Kind.LIST_TYPE,
            type: innerType
          });
        } else {
          type = this.parseNamedType();
        }
        if (this.expectOptionalToken(TokenKind.BANG)) {
          return this.node(start, {
            kind: Kind.NON_NULL_TYPE,
            type
          });
        }
        return type;
      }
      /**
       * NamedType : Name
       */
      parseNamedType() {
        return this.node(this._lexer.token, {
          kind: Kind.NAMED_TYPE,
          name: this.parseName()
        });
      }
      // Implements the parsing rules in the Type Definition section.
      peekDescription() {
        return this.peek(TokenKind.STRING) || this.peek(TokenKind.BLOCK_STRING);
      }
      /**
       * Description : StringValue
       */
      parseDescription() {
        if (this.peekDescription()) {
          return this.parseStringLiteral();
        }
      }
      /**
       * ```
       * SchemaDefinition : Description? schema Directives[Const]? { OperationTypeDefinition+ }
       * ```
       */
      parseSchemaDefinition() {
        const start = this._lexer.token;
        const description = this.parseDescription();
        this.expectKeyword("schema");
        const directives = this.parseConstDirectives();
        const operationTypes = this.many(
          TokenKind.BRACE_L,
          this.parseOperationTypeDefinition,
          TokenKind.BRACE_R
        );
        return this.node(start, {
          kind: Kind.SCHEMA_DEFINITION,
          description,
          directives,
          operationTypes
        });
      }
      /**
       * OperationTypeDefinition : OperationType : NamedType
       */
      parseOperationTypeDefinition() {
        const start = this._lexer.token;
        const operation = this.parseOperationType();
        this.expectToken(TokenKind.COLON);
        const type = this.parseNamedType();
        return this.node(start, {
          kind: Kind.OPERATION_TYPE_DEFINITION,
          operation,
          type
        });
      }
      /**
       * ScalarTypeDefinition : Description? scalar Name Directives[Const]?
       */
      parseScalarTypeDefinition() {
        const start = this._lexer.token;
        const description = this.parseDescription();
        this.expectKeyword("scalar");
        const name = this.parseName();
        const directives = this.parseConstDirectives();
        return this.node(start, {
          kind: Kind.SCALAR_TYPE_DEFINITION,
          description,
          name,
          directives
        });
      }
      /**
       * ObjectTypeDefinition :
       *   Description?
       *   type Name ImplementsInterfaces? Directives[Const]? FieldsDefinition?
       */
      parseObjectTypeDefinition() {
        const start = this._lexer.token;
        const description = this.parseDescription();
        this.expectKeyword("type");
        const name = this.parseName();
        const interfaces = this.parseImplementsInterfaces();
        const directives = this.parseConstDirectives();
        const fields = this.parseFieldsDefinition();
        return this.node(start, {
          kind: Kind.OBJECT_TYPE_DEFINITION,
          description,
          name,
          interfaces,
          directives,
          fields
        });
      }
      /**
       * ImplementsInterfaces :
       *   - implements `&`? NamedType
       *   - ImplementsInterfaces & NamedType
       */
      parseImplementsInterfaces() {
        return this.expectOptionalKeyword("implements") ? this.delimitedMany(TokenKind.AMP, this.parseNamedType) : [];
      }
      /**
       * ```
       * FieldsDefinition : { FieldDefinition+ }
       * ```
       */
      parseFieldsDefinition() {
        return this.optionalMany(
          TokenKind.BRACE_L,
          this.parseFieldDefinition,
          TokenKind.BRACE_R
        );
      }
      /**
       * FieldDefinition :
       *   - Description? Name ArgumentsDefinition? : Type Directives[Const]?
       */
      parseFieldDefinition() {
        const start = this._lexer.token;
        const description = this.parseDescription();
        const name = this.parseName();
        const args = this.parseArgumentDefs();
        this.expectToken(TokenKind.COLON);
        const type = this.parseTypeReference();
        const directives = this.parseConstDirectives();
        return this.node(start, {
          kind: Kind.FIELD_DEFINITION,
          description,
          name,
          arguments: args,
          type,
          directives
        });
      }
      /**
       * ArgumentsDefinition : ( InputValueDefinition+ )
       */
      parseArgumentDefs() {
        return this.optionalMany(
          TokenKind.PAREN_L,
          this.parseInputValueDef,
          TokenKind.PAREN_R
        );
      }
      /**
       * InputValueDefinition :
       *   - Description? Name : Type DefaultValue? Directives[Const]?
       */
      parseInputValueDef() {
        const start = this._lexer.token;
        const description = this.parseDescription();
        const name = this.parseName();
        this.expectToken(TokenKind.COLON);
        const type = this.parseTypeReference();
        let defaultValue;
        if (this.expectOptionalToken(TokenKind.EQUALS)) {
          defaultValue = this.parseConstValueLiteral();
        }
        const directives = this.parseConstDirectives();
        return this.node(start, {
          kind: Kind.INPUT_VALUE_DEFINITION,
          description,
          name,
          type,
          defaultValue,
          directives
        });
      }
      /**
       * InterfaceTypeDefinition :
       *   - Description? interface Name Directives[Const]? FieldsDefinition?
       */
      parseInterfaceTypeDefinition() {
        const start = this._lexer.token;
        const description = this.parseDescription();
        this.expectKeyword("interface");
        const name = this.parseName();
        const interfaces = this.parseImplementsInterfaces();
        const directives = this.parseConstDirectives();
        const fields = this.parseFieldsDefinition();
        return this.node(start, {
          kind: Kind.INTERFACE_TYPE_DEFINITION,
          description,
          name,
          interfaces,
          directives,
          fields
        });
      }
      /**
       * UnionTypeDefinition :
       *   - Description? union Name Directives[Const]? UnionMemberTypes?
       */
      parseUnionTypeDefinition() {
        const start = this._lexer.token;
        const description = this.parseDescription();
        this.expectKeyword("union");
        const name = this.parseName();
        const directives = this.parseConstDirectives();
        const types = this.parseUnionMemberTypes();
        return this.node(start, {
          kind: Kind.UNION_TYPE_DEFINITION,
          description,
          name,
          directives,
          types
        });
      }
      /**
       * UnionMemberTypes :
       *   - = `|`? NamedType
       *   - UnionMemberTypes | NamedType
       */
      parseUnionMemberTypes() {
        return this.expectOptionalToken(TokenKind.EQUALS) ? this.delimitedMany(TokenKind.PIPE, this.parseNamedType) : [];
      }
      /**
       * EnumTypeDefinition :
       *   - Description? enum Name Directives[Const]? EnumValuesDefinition?
       */
      parseEnumTypeDefinition() {
        const start = this._lexer.token;
        const description = this.parseDescription();
        this.expectKeyword("enum");
        const name = this.parseName();
        const directives = this.parseConstDirectives();
        const values = this.parseEnumValuesDefinition();
        return this.node(start, {
          kind: Kind.ENUM_TYPE_DEFINITION,
          description,
          name,
          directives,
          values
        });
      }
      /**
       * ```
       * EnumValuesDefinition : { EnumValueDefinition+ }
       * ```
       */
      parseEnumValuesDefinition() {
        return this.optionalMany(
          TokenKind.BRACE_L,
          this.parseEnumValueDefinition,
          TokenKind.BRACE_R
        );
      }
      /**
       * EnumValueDefinition : Description? EnumValue Directives[Const]?
       */
      parseEnumValueDefinition() {
        const start = this._lexer.token;
        const description = this.parseDescription();
        const name = this.parseEnumValueName();
        const directives = this.parseConstDirectives();
        return this.node(start, {
          kind: Kind.ENUM_VALUE_DEFINITION,
          description,
          name,
          directives
        });
      }
      /**
       * EnumValue : Name but not `true`, `false` or `null`
       */
      parseEnumValueName() {
        if (this._lexer.token.value === "true" || this._lexer.token.value === "false" || this._lexer.token.value === "null") {
          throw syntaxError(
            this._lexer.source,
            this._lexer.token.start,
            `${getTokenDesc(
              this._lexer.token
            )} is reserved and cannot be used for an enum value.`
          );
        }
        return this.parseName();
      }
      /**
       * InputObjectTypeDefinition :
       *   - Description? input Name Directives[Const]? InputFieldsDefinition?
       */
      parseInputObjectTypeDefinition() {
        const start = this._lexer.token;
        const description = this.parseDescription();
        this.expectKeyword("input");
        const name = this.parseName();
        const directives = this.parseConstDirectives();
        const fields = this.parseInputFieldsDefinition();
        return this.node(start, {
          kind: Kind.INPUT_OBJECT_TYPE_DEFINITION,
          description,
          name,
          directives,
          fields
        });
      }
      /**
       * ```
       * InputFieldsDefinition : { InputValueDefinition+ }
       * ```
       */
      parseInputFieldsDefinition() {
        return this.optionalMany(
          TokenKind.BRACE_L,
          this.parseInputValueDef,
          TokenKind.BRACE_R
        );
      }
      /**
       * TypeSystemExtension :
       *   - SchemaExtension
       *   - TypeExtension
       *
       * TypeExtension :
       *   - ScalarTypeExtension
       *   - ObjectTypeExtension
       *   - InterfaceTypeExtension
       *   - UnionTypeExtension
       *   - EnumTypeExtension
       *   - InputObjectTypeDefinition
       */
      parseTypeSystemExtension() {
        const keywordToken = this._lexer.lookahead();
        if (keywordToken.kind === TokenKind.NAME) {
          switch (keywordToken.value) {
            case "schema":
              return this.parseSchemaExtension();
            case "scalar":
              return this.parseScalarTypeExtension();
            case "type":
              return this.parseObjectTypeExtension();
            case "interface":
              return this.parseInterfaceTypeExtension();
            case "union":
              return this.parseUnionTypeExtension();
            case "enum":
              return this.parseEnumTypeExtension();
            case "input":
              return this.parseInputObjectTypeExtension();
          }
        }
        throw this.unexpected(keywordToken);
      }
      /**
       * ```
       * SchemaExtension :
       *  - extend schema Directives[Const]? { OperationTypeDefinition+ }
       *  - extend schema Directives[Const]
       * ```
       */
      parseSchemaExtension() {
        const start = this._lexer.token;
        this.expectKeyword("extend");
        this.expectKeyword("schema");
        const directives = this.parseConstDirectives();
        const operationTypes = this.optionalMany(
          TokenKind.BRACE_L,
          this.parseOperationTypeDefinition,
          TokenKind.BRACE_R
        );
        if (directives.length === 0 && operationTypes.length === 0) {
          throw this.unexpected();
        }
        return this.node(start, {
          kind: Kind.SCHEMA_EXTENSION,
          directives,
          operationTypes
        });
      }
      /**
       * ScalarTypeExtension :
       *   - extend scalar Name Directives[Const]
       */
      parseScalarTypeExtension() {
        const start = this._lexer.token;
        this.expectKeyword("extend");
        this.expectKeyword("scalar");
        const name = this.parseName();
        const directives = this.parseConstDirectives();
        if (directives.length === 0) {
          throw this.unexpected();
        }
        return this.node(start, {
          kind: Kind.SCALAR_TYPE_EXTENSION,
          name,
          directives
        });
      }
      /**
       * ObjectTypeExtension :
       *  - extend type Name ImplementsInterfaces? Directives[Const]? FieldsDefinition
       *  - extend type Name ImplementsInterfaces? Directives[Const]
       *  - extend type Name ImplementsInterfaces
       */
      parseObjectTypeExtension() {
        const start = this._lexer.token;
        this.expectKeyword("extend");
        this.expectKeyword("type");
        const name = this.parseName();
        const interfaces = this.parseImplementsInterfaces();
        const directives = this.parseConstDirectives();
        const fields = this.parseFieldsDefinition();
        if (interfaces.length === 0 && directives.length === 0 && fields.length === 0) {
          throw this.unexpected();
        }
        return this.node(start, {
          kind: Kind.OBJECT_TYPE_EXTENSION,
          name,
          interfaces,
          directives,
          fields
        });
      }
      /**
       * InterfaceTypeExtension :
       *  - extend interface Name ImplementsInterfaces? Directives[Const]? FieldsDefinition
       *  - extend interface Name ImplementsInterfaces? Directives[Const]
       *  - extend interface Name ImplementsInterfaces
       */
      parseInterfaceTypeExtension() {
        const start = this._lexer.token;
        this.expectKeyword("extend");
        this.expectKeyword("interface");
        const name = this.parseName();
        const interfaces = this.parseImplementsInterfaces();
        const directives = this.parseConstDirectives();
        const fields = this.parseFieldsDefinition();
        if (interfaces.length === 0 && directives.length === 0 && fields.length === 0) {
          throw this.unexpected();
        }
        return this.node(start, {
          kind: Kind.INTERFACE_TYPE_EXTENSION,
          name,
          interfaces,
          directives,
          fields
        });
      }
      /**
       * UnionTypeExtension :
       *   - extend union Name Directives[Const]? UnionMemberTypes
       *   - extend union Name Directives[Const]
       */
      parseUnionTypeExtension() {
        const start = this._lexer.token;
        this.expectKeyword("extend");
        this.expectKeyword("union");
        const name = this.parseName();
        const directives = this.parseConstDirectives();
        const types = this.parseUnionMemberTypes();
        if (directives.length === 0 && types.length === 0) {
          throw this.unexpected();
        }
        return this.node(start, {
          kind: Kind.UNION_TYPE_EXTENSION,
          name,
          directives,
          types
        });
      }
      /**
       * EnumTypeExtension :
       *   - extend enum Name Directives[Const]? EnumValuesDefinition
       *   - extend enum Name Directives[Const]
       */
      parseEnumTypeExtension() {
        const start = this._lexer.token;
        this.expectKeyword("extend");
        this.expectKeyword("enum");
        const name = this.parseName();
        const directives = this.parseConstDirectives();
        const values = this.parseEnumValuesDefinition();
        if (directives.length === 0 && values.length === 0) {
          throw this.unexpected();
        }
        return this.node(start, {
          kind: Kind.ENUM_TYPE_EXTENSION,
          name,
          directives,
          values
        });
      }
      /**
       * InputObjectTypeExtension :
       *   - extend input Name Directives[Const]? InputFieldsDefinition
       *   - extend input Name Directives[Const]
       */
      parseInputObjectTypeExtension() {
        const start = this._lexer.token;
        this.expectKeyword("extend");
        this.expectKeyword("input");
        const name = this.parseName();
        const directives = this.parseConstDirectives();
        const fields = this.parseInputFieldsDefinition();
        if (directives.length === 0 && fields.length === 0) {
          throw this.unexpected();
        }
        return this.node(start, {
          kind: Kind.INPUT_OBJECT_TYPE_EXTENSION,
          name,
          directives,
          fields
        });
      }
      /**
       * ```
       * DirectiveDefinition :
       *   - Description? directive @ Name ArgumentsDefinition? `repeatable`? on DirectiveLocations
       * ```
       */
      parseDirectiveDefinition() {
        const start = this._lexer.token;
        const description = this.parseDescription();
        this.expectKeyword("directive");
        this.expectToken(TokenKind.AT);
        const name = this.parseName();
        const args = this.parseArgumentDefs();
        const repeatable = this.expectOptionalKeyword("repeatable");
        this.expectKeyword("on");
        const locations = this.parseDirectiveLocations();
        return this.node(start, {
          kind: Kind.DIRECTIVE_DEFINITION,
          description,
          name,
          arguments: args,
          repeatable,
          locations
        });
      }
      /**
       * DirectiveLocations :
       *   - `|`? DirectiveLocation
       *   - DirectiveLocations | DirectiveLocation
       */
      parseDirectiveLocations() {
        return this.delimitedMany(TokenKind.PIPE, this.parseDirectiveLocation);
      }
      /*
       * DirectiveLocation :
       *   - ExecutableDirectiveLocation
       *   - TypeSystemDirectiveLocation
       *
       * ExecutableDirectiveLocation : one of
       *   `QUERY`
       *   `MUTATION`
       *   `SUBSCRIPTION`
       *   `FIELD`
       *   `FRAGMENT_DEFINITION`
       *   `FRAGMENT_SPREAD`
       *   `INLINE_FRAGMENT`
       *
       * TypeSystemDirectiveLocation : one of
       *   `SCHEMA`
       *   `SCALAR`
       *   `OBJECT`
       *   `FIELD_DEFINITION`
       *   `ARGUMENT_DEFINITION`
       *   `INTERFACE`
       *   `UNION`
       *   `ENUM`
       *   `ENUM_VALUE`
       *   `INPUT_OBJECT`
       *   `INPUT_FIELD_DEFINITION`
       */
      parseDirectiveLocation() {
        const start = this._lexer.token;
        const name = this.parseName();
        if (Object.prototype.hasOwnProperty.call(DirectiveLocation, name.value)) {
          return name;
        }
        throw this.unexpected(start);
      }
      // Core parsing utility functions
      /**
       * Returns a node that, if configured to do so, sets a "loc" field as a
       * location object, used to identify the place in the source that created a
       * given parsed object.
       */
      node(startToken, node) {
        if (this._options.noLocation !== true) {
          node.loc = new Location(
            startToken,
            this._lexer.lastToken,
            this._lexer.source
          );
        }
        return node;
      }
      /**
       * Determines if the next token is of a given kind
       */
      peek(kind) {
        return this._lexer.token.kind === kind;
      }
      /**
       * If the next token is of the given kind, return that token after advancing the lexer.
       * Otherwise, do not change the parser state and throw an error.
       */
      expectToken(kind) {
        const token = this._lexer.token;
        if (token.kind === kind) {
          this.advanceLexer();
          return token;
        }
        throw syntaxError(
          this._lexer.source,
          token.start,
          `Expected ${getTokenKindDesc(kind)}, found ${getTokenDesc(token)}.`
        );
      }
      /**
       * If the next token is of the given kind, return "true" after advancing the lexer.
       * Otherwise, do not change the parser state and return "false".
       */
      expectOptionalToken(kind) {
        const token = this._lexer.token;
        if (token.kind === kind) {
          this.advanceLexer();
          return true;
        }
        return false;
      }
      /**
       * If the next token is a given keyword, advance the lexer.
       * Otherwise, do not change the parser state and throw an error.
       */
      expectKeyword(value) {
        const token = this._lexer.token;
        if (token.kind === TokenKind.NAME && token.value === value) {
          this.advanceLexer();
        } else {
          throw syntaxError(
            this._lexer.source,
            token.start,
            `Expected "${value}", found ${getTokenDesc(token)}.`
          );
        }
      }
      /**
       * If the next token is a given keyword, return "true" after advancing the lexer.
       * Otherwise, do not change the parser state and return "false".
       */
      expectOptionalKeyword(value) {
        const token = this._lexer.token;
        if (token.kind === TokenKind.NAME && token.value === value) {
          this.advanceLexer();
          return true;
        }
        return false;
      }
      /**
       * Helper function for creating an error when an unexpected lexed token is encountered.
       */
      unexpected(atToken) {
        const token = atToken !== null && atToken !== void 0 ? atToken : this._lexer.token;
        return syntaxError(
          this._lexer.source,
          token.start,
          `Unexpected ${getTokenDesc(token)}.`
        );
      }
      /**
       * Returns a possibly empty list of parse nodes, determined by the parseFn.
       * This list begins with a lex token of openKind and ends with a lex token of closeKind.
       * Advances the parser to the next lex token after the closing token.
       */
      any(openKind, parseFn, closeKind) {
        this.expectToken(openKind);
        const nodes = [];
        while (!this.expectOptionalToken(closeKind)) {
          nodes.push(parseFn.call(this));
        }
        return nodes;
      }
      /**
       * Returns a list of parse nodes, determined by the parseFn.
       * It can be empty only if open token is missing otherwise it will always return non-empty list
       * that begins with a lex token of openKind and ends with a lex token of closeKind.
       * Advances the parser to the next lex token after the closing token.
       */
      optionalMany(openKind, parseFn, closeKind) {
        if (this.expectOptionalToken(openKind)) {
          const nodes = [];
          do {
            nodes.push(parseFn.call(this));
          } while (!this.expectOptionalToken(closeKind));
          return nodes;
        }
        return [];
      }
      /**
       * Returns a non-empty list of parse nodes, determined by the parseFn.
       * This list begins with a lex token of openKind and ends with a lex token of closeKind.
       * Advances the parser to the next lex token after the closing token.
       */
      many(openKind, parseFn, closeKind) {
        this.expectToken(openKind);
        const nodes = [];
        do {
          nodes.push(parseFn.call(this));
        } while (!this.expectOptionalToken(closeKind));
        return nodes;
      }
      /**
       * Returns a non-empty list of parse nodes, determined by the parseFn.
       * This list may begin with a lex token of delimiterKind followed by items separated by lex tokens of tokenKind.
       * Advances the parser to the next lex token after last item in the list.
       */
      delimitedMany(delimiterKind, parseFn) {
        this.expectOptionalToken(delimiterKind);
        const nodes = [];
        do {
          nodes.push(parseFn.call(this));
        } while (this.expectOptionalToken(delimiterKind));
        return nodes;
      }
      advanceLexer() {
        const { maxTokens } = this._options;
        const token = this._lexer.advance();
        if (token.kind !== TokenKind.EOF) {
          ++this._tokenCounter;
          if (maxTokens !== void 0 && this._tokenCounter > maxTokens) {
            throw syntaxError(
              this._lexer.source,
              token.start,
              `Document contains more that ${maxTokens} tokens. Parsing aborted.`
            );
          }
        }
      }
    };
  }
});

// node_modules/graphql/language/printString.mjs
function printString(str) {
  return `"${str.replace(escapedRegExp, escapedReplacer)}"`;
}
function escapedReplacer(str) {
  return escapeSequences[str.charCodeAt(0)];
}
var escapedRegExp, escapeSequences;
var init_printString = __esm({
  "node_modules/graphql/language/printString.mjs"() {
    escapedRegExp = /[\x00-\x1f\x22\x5c\x7f-\x9f]/g;
    escapeSequences = [
      "\\u0000",
      "\\u0001",
      "\\u0002",
      "\\u0003",
      "\\u0004",
      "\\u0005",
      "\\u0006",
      "\\u0007",
      "\\b",
      "\\t",
      "\\n",
      "\\u000B",
      "\\f",
      "\\r",
      "\\u000E",
      "\\u000F",
      "\\u0010",
      "\\u0011",
      "\\u0012",
      "\\u0013",
      "\\u0014",
      "\\u0015",
      "\\u0016",
      "\\u0017",
      "\\u0018",
      "\\u0019",
      "\\u001A",
      "\\u001B",
      "\\u001C",
      "\\u001D",
      "\\u001E",
      "\\u001F",
      "",
      "",
      '\\"',
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      // 2F
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      // 3F
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      // 4F
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "\\\\",
      "",
      "",
      "",
      // 5F
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      // 6F
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "\\u007F",
      "\\u0080",
      "\\u0081",
      "\\u0082",
      "\\u0083",
      "\\u0084",
      "\\u0085",
      "\\u0086",
      "\\u0087",
      "\\u0088",
      "\\u0089",
      "\\u008A",
      "\\u008B",
      "\\u008C",
      "\\u008D",
      "\\u008E",
      "\\u008F",
      "\\u0090",
      "\\u0091",
      "\\u0092",
      "\\u0093",
      "\\u0094",
      "\\u0095",
      "\\u0096",
      "\\u0097",
      "\\u0098",
      "\\u0099",
      "\\u009A",
      "\\u009B",
      "\\u009C",
      "\\u009D",
      "\\u009E",
      "\\u009F"
    ];
  }
});

// node_modules/graphql/language/visitor.mjs
function visit(root, visitor, visitorKeys = QueryDocumentKeys) {
  const enterLeaveMap = /* @__PURE__ */ new Map();
  for (const kind of Object.values(Kind)) {
    enterLeaveMap.set(kind, getEnterLeaveForKind(visitor, kind));
  }
  let stack = void 0;
  let inArray = Array.isArray(root);
  let keys = [root];
  let index = -1;
  let edits = [];
  let node = root;
  let key = void 0;
  let parent = void 0;
  const path = [];
  const ancestors = [];
  do {
    index++;
    const isLeaving = index === keys.length;
    const isEdited = isLeaving && edits.length !== 0;
    if (isLeaving) {
      key = ancestors.length === 0 ? void 0 : path[path.length - 1];
      node = parent;
      parent = ancestors.pop();
      if (isEdited) {
        if (inArray) {
          node = node.slice();
          let editOffset = 0;
          for (const [editKey, editValue] of edits) {
            const arrayKey = editKey - editOffset;
            if (editValue === null) {
              node.splice(arrayKey, 1);
              editOffset++;
            } else {
              node[arrayKey] = editValue;
            }
          }
        } else {
          node = { ...node };
          for (const [editKey, editValue] of edits) {
            node[editKey] = editValue;
          }
        }
      }
      index = stack.index;
      keys = stack.keys;
      edits = stack.edits;
      inArray = stack.inArray;
      stack = stack.prev;
    } else if (parent) {
      key = inArray ? index : keys[index];
      node = parent[key];
      if (node === null || node === void 0) {
        continue;
      }
      path.push(key);
    }
    let result;
    if (!Array.isArray(node)) {
      var _enterLeaveMap$get, _enterLeaveMap$get2;
      isNode(node) || devAssert(false, `Invalid AST Node: ${inspect(node)}.`);
      const visitFn = isLeaving ? (_enterLeaveMap$get = enterLeaveMap.get(node.kind)) === null || _enterLeaveMap$get === void 0 ? void 0 : _enterLeaveMap$get.leave : (_enterLeaveMap$get2 = enterLeaveMap.get(node.kind)) === null || _enterLeaveMap$get2 === void 0 ? void 0 : _enterLeaveMap$get2.enter;
      result = visitFn === null || visitFn === void 0 ? void 0 : visitFn.call(visitor, node, key, parent, path, ancestors);
      if (result === BREAK) {
        break;
      }
      if (result === false) {
        if (!isLeaving) {
          path.pop();
          continue;
        }
      } else if (result !== void 0) {
        edits.push([key, result]);
        if (!isLeaving) {
          if (isNode(result)) {
            node = result;
          } else {
            path.pop();
            continue;
          }
        }
      }
    }
    if (result === void 0 && isEdited) {
      edits.push([key, node]);
    }
    if (isLeaving) {
      path.pop();
    } else {
      var _node$kind;
      stack = {
        inArray,
        index,
        keys,
        edits,
        prev: stack
      };
      inArray = Array.isArray(node);
      keys = inArray ? node : (_node$kind = visitorKeys[node.kind]) !== null && _node$kind !== void 0 ? _node$kind : [];
      index = -1;
      edits = [];
      if (parent) {
        ancestors.push(parent);
      }
      parent = node;
    }
  } while (stack !== void 0);
  if (edits.length !== 0) {
    return edits[edits.length - 1][1];
  }
  return root;
}
function getEnterLeaveForKind(visitor, kind) {
  const kindVisitor = visitor[kind];
  if (typeof kindVisitor === "object") {
    return kindVisitor;
  } else if (typeof kindVisitor === "function") {
    return {
      enter: kindVisitor,
      leave: void 0
    };
  }
  return {
    enter: visitor.enter,
    leave: visitor.leave
  };
}
var BREAK;
var init_visitor = __esm({
  "node_modules/graphql/language/visitor.mjs"() {
    init_devAssert();
    init_inspect();
    init_ast();
    init_kinds();
    BREAK = Object.freeze({});
  }
});

// node_modules/graphql/language/printer.mjs
var printer_exports = {};
__export(printer_exports, {
  print: () => print
});
function print(ast) {
  return visit(ast, printDocASTReducer);
}
function join(maybeArray, separator = "") {
  var _maybeArray$filter$jo;
  return (_maybeArray$filter$jo = maybeArray === null || maybeArray === void 0 ? void 0 : maybeArray.filter((x3) => x3).join(separator)) !== null && _maybeArray$filter$jo !== void 0 ? _maybeArray$filter$jo : "";
}
function block(array) {
  return wrap("{\n", indent(join(array, "\n")), "\n}");
}
function wrap(start, maybeString, end = "") {
  return maybeString != null && maybeString !== "" ? start + maybeString + end : "";
}
function indent(str) {
  return wrap("  ", str.replace(/\n/g, "\n  "));
}
function hasMultilineItems(maybeArray) {
  var _maybeArray$some;
  return (_maybeArray$some = maybeArray === null || maybeArray === void 0 ? void 0 : maybeArray.some((str) => str.includes("\n"))) !== null && _maybeArray$some !== void 0 ? _maybeArray$some : false;
}
var MAX_LINE_LENGTH, printDocASTReducer;
var init_printer = __esm({
  "node_modules/graphql/language/printer.mjs"() {
    init_blockString();
    init_printString();
    init_visitor();
    MAX_LINE_LENGTH = 80;
    printDocASTReducer = {
      Name: {
        leave: (node) => node.value
      },
      Variable: {
        leave: (node) => "$" + node.name
      },
      // Document
      Document: {
        leave: (node) => join(node.definitions, "\n\n")
      },
      OperationDefinition: {
        leave(node) {
          const varDefs = wrap("(", join(node.variableDefinitions, ", "), ")");
          const prefix = join(
            [
              node.operation,
              join([node.name, varDefs]),
              join(node.directives, " ")
            ],
            " "
          );
          return (prefix === "query" ? "" : prefix + " ") + node.selectionSet;
        }
      },
      VariableDefinition: {
        leave: ({ variable, type, defaultValue, directives }) => variable + ": " + type + wrap(" = ", defaultValue) + wrap(" ", join(directives, " "))
      },
      SelectionSet: {
        leave: ({ selections }) => block(selections)
      },
      Field: {
        leave({ alias, name, arguments: args, directives, selectionSet }) {
          const prefix = wrap("", alias, ": ") + name;
          let argsLine = prefix + wrap("(", join(args, ", "), ")");
          if (argsLine.length > MAX_LINE_LENGTH) {
            argsLine = prefix + wrap("(\n", indent(join(args, "\n")), "\n)");
          }
          return join([argsLine, join(directives, " "), selectionSet], " ");
        }
      },
      Argument: {
        leave: ({ name, value }) => name + ": " + value
      },
      // Fragments
      FragmentSpread: {
        leave: ({ name, directives }) => "..." + name + wrap(" ", join(directives, " "))
      },
      InlineFragment: {
        leave: ({ typeCondition, directives, selectionSet }) => join(
          [
            "...",
            wrap("on ", typeCondition),
            join(directives, " "),
            selectionSet
          ],
          " "
        )
      },
      FragmentDefinition: {
        leave: ({ name, typeCondition, variableDefinitions, directives, selectionSet }) => (
          // or removed in the future.
          `fragment ${name}${wrap("(", join(variableDefinitions, ", "), ")")} on ${typeCondition} ${wrap("", join(directives, " "), " ")}` + selectionSet
        )
      },
      // Value
      IntValue: {
        leave: ({ value }) => value
      },
      FloatValue: {
        leave: ({ value }) => value
      },
      StringValue: {
        leave: ({ value, block: isBlockString }) => isBlockString ? printBlockString(value) : printString(value)
      },
      BooleanValue: {
        leave: ({ value }) => value ? "true" : "false"
      },
      NullValue: {
        leave: () => "null"
      },
      EnumValue: {
        leave: ({ value }) => value
      },
      ListValue: {
        leave: ({ values }) => "[" + join(values, ", ") + "]"
      },
      ObjectValue: {
        leave: ({ fields }) => "{" + join(fields, ", ") + "}"
      },
      ObjectField: {
        leave: ({ name, value }) => name + ": " + value
      },
      // Directive
      Directive: {
        leave: ({ name, arguments: args }) => "@" + name + wrap("(", join(args, ", "), ")")
      },
      // Type
      NamedType: {
        leave: ({ name }) => name
      },
      ListType: {
        leave: ({ type }) => "[" + type + "]"
      },
      NonNullType: {
        leave: ({ type }) => type + "!"
      },
      // Type System Definitions
      SchemaDefinition: {
        leave: ({ description, directives, operationTypes }) => wrap("", description, "\n") + join(["schema", join(directives, " "), block(operationTypes)], " ")
      },
      OperationTypeDefinition: {
        leave: ({ operation, type }) => operation + ": " + type
      },
      ScalarTypeDefinition: {
        leave: ({ description, name, directives }) => wrap("", description, "\n") + join(["scalar", name, join(directives, " ")], " ")
      },
      ObjectTypeDefinition: {
        leave: ({ description, name, interfaces, directives, fields }) => wrap("", description, "\n") + join(
          [
            "type",
            name,
            wrap("implements ", join(interfaces, " & ")),
            join(directives, " "),
            block(fields)
          ],
          " "
        )
      },
      FieldDefinition: {
        leave: ({ description, name, arguments: args, type, directives }) => wrap("", description, "\n") + name + (hasMultilineItems(args) ? wrap("(\n", indent(join(args, "\n")), "\n)") : wrap("(", join(args, ", "), ")")) + ": " + type + wrap(" ", join(directives, " "))
      },
      InputValueDefinition: {
        leave: ({ description, name, type, defaultValue, directives }) => wrap("", description, "\n") + join(
          [name + ": " + type, wrap("= ", defaultValue), join(directives, " ")],
          " "
        )
      },
      InterfaceTypeDefinition: {
        leave: ({ description, name, interfaces, directives, fields }) => wrap("", description, "\n") + join(
          [
            "interface",
            name,
            wrap("implements ", join(interfaces, " & ")),
            join(directives, " "),
            block(fields)
          ],
          " "
        )
      },
      UnionTypeDefinition: {
        leave: ({ description, name, directives, types }) => wrap("", description, "\n") + join(
          ["union", name, join(directives, " "), wrap("= ", join(types, " | "))],
          " "
        )
      },
      EnumTypeDefinition: {
        leave: ({ description, name, directives, values }) => wrap("", description, "\n") + join(["enum", name, join(directives, " "), block(values)], " ")
      },
      EnumValueDefinition: {
        leave: ({ description, name, directives }) => wrap("", description, "\n") + join([name, join(directives, " ")], " ")
      },
      InputObjectTypeDefinition: {
        leave: ({ description, name, directives, fields }) => wrap("", description, "\n") + join(["input", name, join(directives, " "), block(fields)], " ")
      },
      DirectiveDefinition: {
        leave: ({ description, name, arguments: args, repeatable, locations }) => wrap("", description, "\n") + "directive @" + name + (hasMultilineItems(args) ? wrap("(\n", indent(join(args, "\n")), "\n)") : wrap("(", join(args, ", "), ")")) + (repeatable ? " repeatable" : "") + " on " + join(locations, " | ")
      },
      SchemaExtension: {
        leave: ({ directives, operationTypes }) => join(
          ["extend schema", join(directives, " "), block(operationTypes)],
          " "
        )
      },
      ScalarTypeExtension: {
        leave: ({ name, directives }) => join(["extend scalar", name, join(directives, " ")], " ")
      },
      ObjectTypeExtension: {
        leave: ({ name, interfaces, directives, fields }) => join(
          [
            "extend type",
            name,
            wrap("implements ", join(interfaces, " & ")),
            join(directives, " "),
            block(fields)
          ],
          " "
        )
      },
      InterfaceTypeExtension: {
        leave: ({ name, interfaces, directives, fields }) => join(
          [
            "extend interface",
            name,
            wrap("implements ", join(interfaces, " & ")),
            join(directives, " "),
            block(fields)
          ],
          " "
        )
      },
      UnionTypeExtension: {
        leave: ({ name, directives, types }) => join(
          [
            "extend union",
            name,
            join(directives, " "),
            wrap("= ", join(types, " | "))
          ],
          " "
        )
      },
      EnumTypeExtension: {
        leave: ({ name, directives, values }) => join(["extend enum", name, join(directives, " "), block(values)], " ")
      },
      InputObjectTypeExtension: {
        leave: ({ name, directives, fields }) => join(["extend input", name, join(directives, " "), block(fields)], " ")
      }
    };
  }
});

// node_modules/extract-files/public/ReactNativeFile.js
var require_ReactNativeFile = __commonJS({
  "node_modules/extract-files/public/ReactNativeFile.js"(exports, module) {
    "use strict";
    module.exports = function ReactNativeFile(_ref) {
      var uri = _ref.uri, name = _ref.name, type = _ref.type;
      this.uri = uri;
      this.name = name;
      this.type = type;
    };
  }
});

// node_modules/extract-files/public/isExtractableFile.js
var require_isExtractableFile = __commonJS({
  "node_modules/extract-files/public/isExtractableFile.js"(exports, module) {
    "use strict";
    var ReactNativeFile = require_ReactNativeFile();
    module.exports = function isExtractableFile(value) {
      return typeof File !== "undefined" && value instanceof File || typeof Blob !== "undefined" && value instanceof Blob || value instanceof ReactNativeFile;
    };
  }
});

// node_modules/extract-files/public/extractFiles.js
var require_extractFiles = __commonJS({
  "node_modules/extract-files/public/extractFiles.js"(exports, module) {
    "use strict";
    var defaultIsExtractableFile = require_isExtractableFile();
    module.exports = function extractFiles(value, path, isExtractableFile) {
      if (path === void 0) {
        path = "";
      }
      if (isExtractableFile === void 0) {
        isExtractableFile = defaultIsExtractableFile;
      }
      var clone;
      var files = /* @__PURE__ */ new Map();
      function addFile(paths, file) {
        var storedPaths = files.get(file);
        if (storedPaths) storedPaths.push.apply(storedPaths, paths);
        else files.set(file, paths);
      }
      if (isExtractableFile(value)) {
        clone = null;
        addFile([path], value);
      } else {
        var prefix = path ? path + "." : "";
        if (typeof FileList !== "undefined" && value instanceof FileList)
          clone = Array.prototype.map.call(value, function(file, i2) {
            addFile(["" + prefix + i2], file);
            return null;
          });
        else if (Array.isArray(value))
          clone = value.map(function(child, i2) {
            var result2 = extractFiles(child, "" + prefix + i2, isExtractableFile);
            result2.files.forEach(addFile);
            return result2.clone;
          });
        else if (value && value.constructor === Object) {
          clone = {};
          for (var i in value) {
            var result = extractFiles(value[i], "" + prefix + i, isExtractableFile);
            result.files.forEach(addFile);
            clone[i] = result.clone;
          }
        } else clone = value;
      }
      return {
        clone,
        files
      };
    };
  }
});

// node_modules/extract-files/public/index.js
var require_public = __commonJS({
  "node_modules/extract-files/public/index.js"(exports) {
    "use strict";
    exports.ReactNativeFile = require_ReactNativeFile();
    exports.extractFiles = require_extractFiles();
    exports.isExtractableFile = require_isExtractableFile();
  }
});

// node_modules/graphql-request/node_modules/form-data/lib/browser.js
var require_browser2 = __commonJS({
  "node_modules/graphql-request/node_modules/form-data/lib/browser.js"(exports, module) {
    "use strict";
    module.exports = typeof self === "object" ? self.FormData : window.FormData;
  }
});

// node_modules/graphql-request/dist/defaultJsonSerializer.js
var require_defaultJsonSerializer = __commonJS({
  "node_modules/graphql-request/dist/defaultJsonSerializer.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.defaultJsonSerializer = void 0;
    exports.defaultJsonSerializer = {
      parse: JSON.parse,
      stringify: JSON.stringify
    };
  }
});

// node_modules/graphql-request/dist/createRequestBody.js
var require_createRequestBody = __commonJS({
  "node_modules/graphql-request/dist/createRequestBody.js"(exports) {
    "use strict";
    var __importDefault = exports && exports.__importDefault || function(mod) {
      return mod && mod.__esModule ? mod : { "default": mod };
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    var extract_files_1 = require_public();
    var form_data_1 = __importDefault(require_browser2());
    var defaultJsonSerializer_1 = require_defaultJsonSerializer();
    var isExtractableFileEnhanced = function(value) {
      return extract_files_1.isExtractableFile(value) || value !== null && typeof value === "object" && typeof value.pipe === "function";
    };
    function createRequestBody(query, variables, operationName, jsonSerializer) {
      if (jsonSerializer === void 0) {
        jsonSerializer = defaultJsonSerializer_1.defaultJsonSerializer;
      }
      var _a2 = extract_files_1.extractFiles({ query, variables, operationName }, "", isExtractableFileEnhanced), clone = _a2.clone, files = _a2.files;
      if (files.size === 0) {
        if (!Array.isArray(query)) {
          return jsonSerializer.stringify(clone);
        }
        if (typeof variables !== "undefined" && !Array.isArray(variables)) {
          throw new Error("Cannot create request body with given variable type, array expected");
        }
        var payload = query.reduce(function(accu, currentQuery, index) {
          accu.push({ query: currentQuery, variables: variables ? variables[index] : void 0 });
          return accu;
        }, []);
        return jsonSerializer.stringify(payload);
      }
      var Form = typeof FormData === "undefined" ? form_data_1.default : FormData;
      var form = new Form();
      form.append("operations", jsonSerializer.stringify(clone));
      var map = {};
      var i = 0;
      files.forEach(function(paths) {
        map[++i] = paths;
      });
      form.append("map", jsonSerializer.stringify(map));
      i = 0;
      files.forEach(function(paths, file) {
        form.append("" + ++i, file);
      });
      return form;
    }
    exports.default = createRequestBody;
  }
});

// node_modules/graphql-request/dist/parseArgs.js
var require_parseArgs = __commonJS({
  "node_modules/graphql-request/dist/parseArgs.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.parseBatchRequestsExtendedArgs = exports.parseRawRequestExtendedArgs = exports.parseRequestExtendedArgs = exports.parseBatchRequestArgs = exports.parseRawRequestArgs = exports.parseRequestArgs = void 0;
    function parseRequestArgs(documentOrOptions, variables, requestHeaders) {
      return documentOrOptions.document ? documentOrOptions : {
        document: documentOrOptions,
        variables,
        requestHeaders,
        signal: void 0
      };
    }
    exports.parseRequestArgs = parseRequestArgs;
    function parseRawRequestArgs(queryOrOptions, variables, requestHeaders) {
      return queryOrOptions.query ? queryOrOptions : {
        query: queryOrOptions,
        variables,
        requestHeaders,
        signal: void 0
      };
    }
    exports.parseRawRequestArgs = parseRawRequestArgs;
    function parseBatchRequestArgs(documentsOrOptions, requestHeaders) {
      return documentsOrOptions.documents ? documentsOrOptions : {
        documents: documentsOrOptions,
        requestHeaders,
        signal: void 0
      };
    }
    exports.parseBatchRequestArgs = parseBatchRequestArgs;
    function parseRequestExtendedArgs(urlOrOptions, document2, variables, requestHeaders) {
      return urlOrOptions.document ? urlOrOptions : {
        url: urlOrOptions,
        document: document2,
        variables,
        requestHeaders,
        signal: void 0
      };
    }
    exports.parseRequestExtendedArgs = parseRequestExtendedArgs;
    function parseRawRequestExtendedArgs(urlOrOptions, query, variables, requestHeaders) {
      return urlOrOptions.query ? urlOrOptions : {
        url: urlOrOptions,
        query,
        variables,
        requestHeaders,
        signal: void 0
      };
    }
    exports.parseRawRequestExtendedArgs = parseRawRequestExtendedArgs;
    function parseBatchRequestsExtendedArgs(urlOrOptions, documents, requestHeaders) {
      return urlOrOptions.documents ? urlOrOptions : {
        url: urlOrOptions,
        documents,
        requestHeaders,
        signal: void 0
      };
    }
    exports.parseBatchRequestsExtendedArgs = parseBatchRequestsExtendedArgs;
  }
});

// node_modules/graphql-request/dist/types.js
var require_types = __commonJS({
  "node_modules/graphql-request/dist/types.js"(exports) {
    "use strict";
    var __extends = exports && exports.__extends || /* @__PURE__ */ function() {
      var extendStatics = function(d, b3) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b4) {
          d2.__proto__ = b4;
        } || function(d2, b4) {
          for (var p in b4) if (Object.prototype.hasOwnProperty.call(b4, p)) d2[p] = b4[p];
        };
        return extendStatics(d, b3);
      };
      return function(d, b3) {
        if (typeof b3 !== "function" && b3 !== null)
          throw new TypeError("Class extends value " + String(b3) + " is not a constructor or null");
        extendStatics(d, b3);
        function __() {
          this.constructor = d;
        }
        d.prototype = b3 === null ? Object.create(b3) : (__.prototype = b3.prototype, new __());
      };
    }();
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ClientError = void 0;
    var ClientError2 = (
      /** @class */
      function(_super) {
        __extends(ClientError3, _super);
        function ClientError3(response, request) {
          var _this = this;
          var message = ClientError3.extractMessage(response) + ": " + JSON.stringify({
            response,
            request
          });
          _this = _super.call(this, message) || this;
          Object.setPrototypeOf(_this, ClientError3.prototype);
          _this.response = response;
          _this.request = request;
          if (typeof Error.captureStackTrace === "function") {
            Error.captureStackTrace(_this, ClientError3);
          }
          return _this;
        }
        ClientError3.extractMessage = function(response) {
          try {
            return response.errors[0].message;
          } catch (e) {
            return "GraphQL Error (Code: " + response.status + ")";
          }
        };
        return ClientError3;
      }(Error)
    );
    exports.ClientError = ClientError2;
  }
});

// node_modules/graphql-request/dist/graphql-ws.js
var require_graphql_ws = __commonJS({
  "node_modules/graphql-request/dist/graphql-ws.js"(exports) {
    "use strict";
    var __assign = exports && exports.__assign || function() {
      __assign = Object.assign || function(t2) {
        for (var s2, i = 1, n = arguments.length; i < n; i++) {
          s2 = arguments[i];
          for (var p in s2) if (Object.prototype.hasOwnProperty.call(s2, p))
            t2[p] = s2[p];
        }
        return t2;
      };
      return __assign.apply(this, arguments);
    };
    var __awaiter3 = exports && exports.__awaiter || function(thisArg, _arguments, P2, generator) {
      function adopt(value) {
        return value instanceof P2 ? value : new P2(function(resolve) {
          resolve(value);
        });
      }
      return new (P2 || (P2 = Promise))(function(resolve, reject) {
        function fulfilled(value) {
          try {
            step(generator.next(value));
          } catch (e) {
            reject(e);
          }
        }
        function rejected(value) {
          try {
            step(generator["throw"](value));
          } catch (e) {
            reject(e);
          }
        }
        function step(result) {
          result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
      });
    };
    var __generator = exports && exports.__generator || function(thisArg, body) {
      var _4 = { label: 0, sent: function() {
        if (t2[0] & 1) throw t2[1];
        return t2[1];
      }, trys: [], ops: [] }, f, y3, t2, g;
      return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() {
        return this;
      }), g;
      function verb(n) {
        return function(v3) {
          return step([n, v3]);
        };
      }
      function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_4) try {
          if (f = 1, y3 && (t2 = op[0] & 2 ? y3["return"] : op[0] ? y3["throw"] || ((t2 = y3["return"]) && t2.call(y3), 0) : y3.next) && !(t2 = t2.call(y3, op[1])).done) return t2;
          if (y3 = 0, t2) op = [op[0] & 2, t2.value];
          switch (op[0]) {
            case 0:
            case 1:
              t2 = op;
              break;
            case 4:
              _4.label++;
              return { value: op[1], done: false };
            case 5:
              _4.label++;
              y3 = op[1];
              op = [0];
              continue;
            case 7:
              op = _4.ops.pop();
              _4.trys.pop();
              continue;
            default:
              if (!(t2 = _4.trys, t2 = t2.length > 0 && t2[t2.length - 1]) && (op[0] === 6 || op[0] === 2)) {
                _4 = 0;
                continue;
              }
              if (op[0] === 3 && (!t2 || op[1] > t2[0] && op[1] < t2[3])) {
                _4.label = op[1];
                break;
              }
              if (op[0] === 6 && _4.label < t2[1]) {
                _4.label = t2[1];
                t2 = op;
                break;
              }
              if (t2 && _4.label < t2[2]) {
                _4.label = t2[2];
                _4.ops.push(op);
                break;
              }
              if (t2[2]) _4.ops.pop();
              _4.trys.pop();
              continue;
          }
          op = body.call(thisArg, _4);
        } catch (e) {
          op = [6, e];
          y3 = 0;
        } finally {
          f = t2 = 0;
        }
        if (op[0] & 5) throw op[1];
        return { value: op[0] ? op[1] : void 0, done: true };
      }
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.GraphQLWebSocketClient = void 0;
    var types_1 = require_types();
    var _1 = require_dist();
    var CONNECTION_INIT = "connection_init";
    var CONNECTION_ACK = "connection_ack";
    var PING = "ping";
    var PONG = "pong";
    var SUBSCRIBE = "subscribe";
    var NEXT = "next";
    var ERROR = "error";
    var COMPLETE = "complete";
    var GraphQLWebSocketMessage = (
      /** @class */
      function() {
        function GraphQLWebSocketMessage2(type, payload, id) {
          this._type = type;
          this._payload = payload;
          this._id = id;
        }
        Object.defineProperty(GraphQLWebSocketMessage2.prototype, "type", {
          get: function() {
            return this._type;
          },
          enumerable: false,
          configurable: true
        });
        Object.defineProperty(GraphQLWebSocketMessage2.prototype, "id", {
          get: function() {
            return this._id;
          },
          enumerable: false,
          configurable: true
        });
        Object.defineProperty(GraphQLWebSocketMessage2.prototype, "payload", {
          get: function() {
            return this._payload;
          },
          enumerable: false,
          configurable: true
        });
        Object.defineProperty(GraphQLWebSocketMessage2.prototype, "text", {
          get: function() {
            var result = { type: this.type };
            if (this.id != null && this.id != void 0)
              result.id = this.id;
            if (this.payload != null && this.payload != void 0)
              result.payload = this.payload;
            return JSON.stringify(result);
          },
          enumerable: false,
          configurable: true
        });
        GraphQLWebSocketMessage2.parse = function(data, f) {
          var _a2 = JSON.parse(data), type = _a2.type, payload = _a2.payload, id = _a2.id;
          return new GraphQLWebSocketMessage2(type, f(payload), id);
        };
        return GraphQLWebSocketMessage2;
      }()
    );
    var GraphQLWebSocketClient = (
      /** @class */
      function() {
        function GraphQLWebSocketClient2(socket, _a2) {
          var _this = this;
          var onInit = _a2.onInit, onAcknowledged = _a2.onAcknowledged, onPing = _a2.onPing, onPong = _a2.onPong;
          this.socketState = { acknowledged: false, lastRequestId: 0, subscriptions: {} };
          this.socket = socket;
          socket.onopen = function(e) {
            return __awaiter3(_this, void 0, void 0, function() {
              var _a3, _b, _c, _d;
              return __generator(this, function(_e2) {
                switch (_e2.label) {
                  case 0:
                    this.socketState.acknowledged = false;
                    this.socketState.subscriptions = {};
                    _b = (_a3 = socket).send;
                    _c = ConnectionInit;
                    if (!onInit) return [3, 2];
                    return [4, onInit()];
                  case 1:
                    _d = _e2.sent();
                    return [3, 3];
                  case 2:
                    _d = null;
                    _e2.label = 3;
                  case 3:
                    _b.apply(_a3, [_c.apply(void 0, [_d]).text]);
                    return [
                      2
                      /*return*/
                    ];
                }
              });
            });
          };
          socket.onclose = function(e) {
            _this.socketState.acknowledged = false;
            _this.socketState.subscriptions = {};
          };
          socket.onerror = function(e) {
            console.error(e);
          };
          socket.onmessage = function(e) {
            try {
              var message = parseMessage(e.data);
              switch (message.type) {
                case CONNECTION_ACK: {
                  if (_this.socketState.acknowledged) {
                    console.warn("Duplicate CONNECTION_ACK message ignored");
                  } else {
                    _this.socketState.acknowledged = true;
                    if (onAcknowledged)
                      onAcknowledged(message.payload);
                  }
                  return;
                }
                case PING: {
                  if (onPing)
                    onPing(message.payload).then(function(r) {
                      return socket.send(Pong(r).text);
                    });
                  else
                    socket.send(Pong(null).text);
                  return;
                }
                case PONG: {
                  if (onPong)
                    onPong(message.payload);
                  return;
                }
              }
              if (!_this.socketState.acknowledged) {
                return;
              }
              if (message.id === void 0 || message.id === null || !_this.socketState.subscriptions[message.id]) {
                return;
              }
              var _a3 = _this.socketState.subscriptions[message.id], query = _a3.query, variables = _a3.variables, subscriber = _a3.subscriber;
              switch (message.type) {
                case NEXT: {
                  if (!message.payload.errors && message.payload.data) {
                    subscriber.next && subscriber.next(message.payload.data);
                  }
                  if (message.payload.errors) {
                    subscriber.error && subscriber.error(new types_1.ClientError(__assign(__assign({}, message.payload), { status: 200 }), { query, variables }));
                  } else {
                  }
                  return;
                }
                case ERROR: {
                  subscriber.error && subscriber.error(new types_1.ClientError({ errors: message.payload, status: 200 }, { query, variables }));
                  return;
                }
                case COMPLETE: {
                  subscriber.complete && subscriber.complete();
                  delete _this.socketState.subscriptions[message.id];
                  return;
                }
              }
            } catch (e2) {
              console.error(e2);
              socket.close(1006);
            }
            socket.close(4400, "Unknown graphql-ws message.");
          };
        }
        GraphQLWebSocketClient2.prototype.makeSubscribe = function(query, operationName, variables, subscriber) {
          var _this = this;
          var subscriptionId = (this.socketState.lastRequestId++).toString();
          this.socketState.subscriptions[subscriptionId] = { query, variables, subscriber };
          this.socket.send(Subscribe(subscriptionId, { query, operationName, variables }).text);
          return function() {
            _this.socket.send(Complete(subscriptionId).text);
            delete _this.socketState.subscriptions[subscriptionId];
          };
        };
        GraphQLWebSocketClient2.prototype.rawRequest = function(query, variables) {
          var _this = this;
          return new Promise(function(resolve, reject) {
            var result;
            _this.rawSubscribe(query, {
              next: function(data, extensions) {
                return result = { data, extensions };
              },
              error: reject,
              complete: function() {
                return resolve(result);
              }
            }, variables);
          });
        };
        GraphQLWebSocketClient2.prototype.request = function(document2, variables) {
          var _this = this;
          return new Promise(function(resolve, reject) {
            var result;
            _this.subscribe(document2, {
              next: function(data) {
                return result = data;
              },
              error: reject,
              complete: function() {
                return resolve(result);
              }
            }, variables);
          });
        };
        GraphQLWebSocketClient2.prototype.subscribe = function(document2, subscriber, variables) {
          var _a2 = _1.resolveRequestDocument(document2), query = _a2.query, operationName = _a2.operationName;
          return this.makeSubscribe(query, operationName, variables, subscriber);
        };
        GraphQLWebSocketClient2.prototype.rawSubscribe = function(query, subscriber, variables) {
          return this.makeSubscribe(query, void 0, variables, subscriber);
        };
        GraphQLWebSocketClient2.prototype.ping = function(payload) {
          this.socket.send(Ping(payload).text);
        };
        GraphQLWebSocketClient2.prototype.close = function() {
          this.socket.close(1e3);
        };
        GraphQLWebSocketClient2.PROTOCOL = "graphql-transport-ws";
        return GraphQLWebSocketClient2;
      }()
    );
    exports.GraphQLWebSocketClient = GraphQLWebSocketClient;
    function parseMessage(data, f) {
      if (f === void 0) {
        f = function(a) {
          return a;
        };
      }
      var m = GraphQLWebSocketMessage.parse(data, f);
      return m;
    }
    function ConnectionInit(payload) {
      return new GraphQLWebSocketMessage(CONNECTION_INIT, payload);
    }
    function Ping(payload) {
      return new GraphQLWebSocketMessage(PING, payload, void 0);
    }
    function Pong(payload) {
      return new GraphQLWebSocketMessage(PONG, payload, void 0);
    }
    function Subscribe(id, payload) {
      return new GraphQLWebSocketMessage(SUBSCRIBE, payload, id);
    }
    function Complete(id) {
      return new GraphQLWebSocketMessage(COMPLETE, void 0, id);
    }
  }
});

// node_modules/graphql-request/dist/index.js
var require_dist = __commonJS({
  "node_modules/graphql-request/dist/index.js"(exports) {
    "use strict";
    var __assign = exports && exports.__assign || function() {
      __assign = Object.assign || function(t2) {
        for (var s2, i = 1, n = arguments.length; i < n; i++) {
          s2 = arguments[i];
          for (var p in s2) if (Object.prototype.hasOwnProperty.call(s2, p))
            t2[p] = s2[p];
        }
        return t2;
      };
      return __assign.apply(this, arguments);
    };
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k3, k22) {
      if (k22 === void 0) k22 = k3;
      Object.defineProperty(o, k22, { enumerable: true, get: function() {
        return m[k3];
      } });
    } : function(o, m, k3, k22) {
      if (k22 === void 0) k22 = k3;
      o[k22] = m[k3];
    });
    var __setModuleDefault = exports && exports.__setModuleDefault || (Object.create ? function(o, v3) {
      Object.defineProperty(o, "default", { enumerable: true, value: v3 });
    } : function(o, v3) {
      o["default"] = v3;
    });
    var __importStar = exports && exports.__importStar || function(mod) {
      if (mod && mod.__esModule) return mod;
      var result = {};
      if (mod != null) {
        for (var k3 in mod) if (k3 !== "default" && Object.prototype.hasOwnProperty.call(mod, k3)) __createBinding(result, mod, k3);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    var __awaiter3 = exports && exports.__awaiter || function(thisArg, _arguments, P2, generator) {
      function adopt(value) {
        return value instanceof P2 ? value : new P2(function(resolve) {
          resolve(value);
        });
      }
      return new (P2 || (P2 = Promise))(function(resolve, reject) {
        function fulfilled(value) {
          try {
            step(generator.next(value));
          } catch (e) {
            reject(e);
          }
        }
        function rejected(value) {
          try {
            step(generator["throw"](value));
          } catch (e) {
            reject(e);
          }
        }
        function step(result) {
          result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
      });
    };
    var __generator = exports && exports.__generator || function(thisArg, body) {
      var _4 = { label: 0, sent: function() {
        if (t2[0] & 1) throw t2[1];
        return t2[1];
      }, trys: [], ops: [] }, f, y3, t2, g;
      return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() {
        return this;
      }), g;
      function verb(n) {
        return function(v3) {
          return step([n, v3]);
        };
      }
      function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_4) try {
          if (f = 1, y3 && (t2 = op[0] & 2 ? y3["return"] : op[0] ? y3["throw"] || ((t2 = y3["return"]) && t2.call(y3), 0) : y3.next) && !(t2 = t2.call(y3, op[1])).done) return t2;
          if (y3 = 0, t2) op = [op[0] & 2, t2.value];
          switch (op[0]) {
            case 0:
            case 1:
              t2 = op;
              break;
            case 4:
              _4.label++;
              return { value: op[1], done: false };
            case 5:
              _4.label++;
              y3 = op[1];
              op = [0];
              continue;
            case 7:
              op = _4.ops.pop();
              _4.trys.pop();
              continue;
            default:
              if (!(t2 = _4.trys, t2 = t2.length > 0 && t2[t2.length - 1]) && (op[0] === 6 || op[0] === 2)) {
                _4 = 0;
                continue;
              }
              if (op[0] === 3 && (!t2 || op[1] > t2[0] && op[1] < t2[3])) {
                _4.label = op[1];
                break;
              }
              if (op[0] === 6 && _4.label < t2[1]) {
                _4.label = t2[1];
                t2 = op;
                break;
              }
              if (t2 && _4.label < t2[2]) {
                _4.label = t2[2];
                _4.ops.push(op);
                break;
              }
              if (t2[2]) _4.ops.pop();
              _4.trys.pop();
              continue;
          }
          op = body.call(thisArg, _4);
        } catch (e) {
          op = [6, e];
          y3 = 0;
        } finally {
          f = t2 = 0;
        }
        if (op[0] & 5) throw op[1];
        return { value: op[0] ? op[1] : void 0, done: true };
      }
    };
    var __rest9 = exports && exports.__rest || function(s2, e) {
      var t2 = {};
      for (var p in s2) if (Object.prototype.hasOwnProperty.call(s2, p) && e.indexOf(p) < 0)
        t2[p] = s2[p];
      if (s2 != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s2); i < p.length; i++) {
          if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s2, p[i]))
            t2[p[i]] = s2[p[i]];
        }
      return t2;
    };
    var __importDefault = exports && exports.__importDefault || function(mod) {
      return mod && mod.__esModule ? mod : { "default": mod };
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.GraphQLWebSocketClient = exports.gql = exports.resolveRequestDocument = exports.batchRequests = exports.request = exports.rawRequest = exports.GraphQLClient = exports.ClientError = void 0;
    var cross_fetch_1 = __importStar(require_browser_ponyfill());
    var CrossFetch = cross_fetch_1;
    var parser_1 = (init_parser(), __toCommonJS(parser_exports));
    var printer_1 = (init_printer(), __toCommonJS(printer_exports));
    var createRequestBody_1 = __importDefault(require_createRequestBody());
    var defaultJsonSerializer_1 = require_defaultJsonSerializer();
    var parseArgs_1 = require_parseArgs();
    var types_1 = require_types();
    Object.defineProperty(exports, "ClientError", { enumerable: true, get: function() {
      return types_1.ClientError;
    } });
    var resolveHeaders = function(headers) {
      var oHeaders = {};
      if (headers) {
        if (typeof Headers !== "undefined" && headers instanceof Headers || headers instanceof CrossFetch.Headers) {
          oHeaders = HeadersInstanceToPlainObject(headers);
        } else if (Array.isArray(headers)) {
          headers.forEach(function(_a2) {
            var name = _a2[0], value = _a2[1];
            oHeaders[name] = value;
          });
        } else {
          oHeaders = headers;
        }
      }
      return oHeaders;
    };
    var queryCleanner = function(str) {
      return str.replace(/([\s,]|#[^\n\r]+)+/g, " ").trim();
    };
    var buildGetQueryParams = function(_a2) {
      var query = _a2.query, variables = _a2.variables, operationName = _a2.operationName, jsonSerializer = _a2.jsonSerializer;
      if (!Array.isArray(query)) {
        var search = ["query=" + encodeURIComponent(queryCleanner(query))];
        if (variables) {
          search.push("variables=" + encodeURIComponent(jsonSerializer.stringify(variables)));
        }
        if (operationName) {
          search.push("operationName=" + encodeURIComponent(operationName));
        }
        return search.join("&");
      }
      if (typeof variables !== "undefined" && !Array.isArray(variables)) {
        throw new Error("Cannot create query with given variable type, array expected");
      }
      var payload = query.reduce(function(accu, currentQuery, index) {
        accu.push({
          query: queryCleanner(currentQuery),
          variables: variables ? jsonSerializer.stringify(variables[index]) : void 0
        });
        return accu;
      }, []);
      return "query=" + encodeURIComponent(jsonSerializer.stringify(payload));
    };
    var post = function(_a2) {
      var url = _a2.url, query = _a2.query, variables = _a2.variables, operationName = _a2.operationName, headers = _a2.headers, fetch2 = _a2.fetch, fetchOptions = _a2.fetchOptions;
      return __awaiter3(void 0, void 0, void 0, function() {
        var body;
        return __generator(this, function(_b) {
          switch (_b.label) {
            case 0:
              body = createRequestBody_1.default(query, variables, operationName, fetchOptions.jsonSerializer);
              return [4, fetch2(url, __assign({ method: "POST", headers: __assign(__assign({}, typeof body === "string" ? { "Content-Type": "application/json" } : {}), headers), body }, fetchOptions))];
            case 1:
              return [2, _b.sent()];
          }
        });
      });
    };
    var get = function(_a2) {
      var url = _a2.url, query = _a2.query, variables = _a2.variables, operationName = _a2.operationName, headers = _a2.headers, fetch2 = _a2.fetch, fetchOptions = _a2.fetchOptions;
      return __awaiter3(void 0, void 0, void 0, function() {
        var queryParams;
        return __generator(this, function(_b) {
          switch (_b.label) {
            case 0:
              queryParams = buildGetQueryParams({
                query,
                variables,
                operationName,
                jsonSerializer: fetchOptions.jsonSerializer
              });
              return [4, fetch2(url + "?" + queryParams, __assign({ method: "GET", headers }, fetchOptions))];
            case 1:
              return [2, _b.sent()];
          }
        });
      });
    };
    var GraphQLClient = (
      /** @class */
      function() {
        function GraphQLClient2(url, options) {
          this.url = url;
          this.options = options || {};
        }
        GraphQLClient2.prototype.rawRequest = function(queryOrOptions, variables, requestHeaders) {
          return __awaiter3(this, void 0, void 0, function() {
            var rawRequestOptions, _a2, headers, _b, fetch2, _c, method, fetchOptions, url, operationName;
            return __generator(this, function(_d) {
              rawRequestOptions = parseArgs_1.parseRawRequestArgs(queryOrOptions, variables, requestHeaders);
              _a2 = this.options, headers = _a2.headers, _b = _a2.fetch, fetch2 = _b === void 0 ? cross_fetch_1.default : _b, _c = _a2.method, method = _c === void 0 ? "POST" : _c, fetchOptions = __rest9(_a2, ["headers", "fetch", "method"]);
              url = this.url;
              if (rawRequestOptions.signal !== void 0) {
                fetchOptions.signal = rawRequestOptions.signal;
              }
              operationName = resolveRequestDocument(rawRequestOptions.query).operationName;
              return [2, makeRequest({
                url,
                query: rawRequestOptions.query,
                variables: rawRequestOptions.variables,
                headers: __assign(__assign({}, resolveHeaders(callOrIdentity(headers))), resolveHeaders(rawRequestOptions.requestHeaders)),
                operationName,
                fetch: fetch2,
                method,
                fetchOptions
              })];
            });
          });
        };
        GraphQLClient2.prototype.request = function(documentOrOptions, variables, requestHeaders) {
          return __awaiter3(this, void 0, void 0, function() {
            var requestOptions, _a2, headers, _b, fetch2, _c, method, fetchOptions, url, _d, query, operationName, data;
            return __generator(this, function(_e2) {
              switch (_e2.label) {
                case 0:
                  requestOptions = parseArgs_1.parseRequestArgs(documentOrOptions, variables, requestHeaders);
                  _a2 = this.options, headers = _a2.headers, _b = _a2.fetch, fetch2 = _b === void 0 ? cross_fetch_1.default : _b, _c = _a2.method, method = _c === void 0 ? "POST" : _c, fetchOptions = __rest9(_a2, ["headers", "fetch", "method"]);
                  url = this.url;
                  if (requestOptions.signal !== void 0) {
                    fetchOptions.signal = requestOptions.signal;
                  }
                  _d = resolveRequestDocument(requestOptions.document), query = _d.query, operationName = _d.operationName;
                  return [4, makeRequest({
                    url,
                    query,
                    variables: requestOptions.variables,
                    headers: __assign(__assign({}, resolveHeaders(callOrIdentity(headers))), resolveHeaders(requestOptions.requestHeaders)),
                    operationName,
                    fetch: fetch2,
                    method,
                    fetchOptions
                  })];
                case 1:
                  data = _e2.sent().data;
                  return [2, data];
              }
            });
          });
        };
        GraphQLClient2.prototype.batchRequests = function(documentsOrOptions, requestHeaders) {
          return __awaiter3(this, void 0, void 0, function() {
            var batchRequestOptions, _a2, headers, _b, fetch2, _c, method, fetchOptions, url, queries, variables, data;
            return __generator(this, function(_d) {
              switch (_d.label) {
                case 0:
                  batchRequestOptions = parseArgs_1.parseBatchRequestArgs(documentsOrOptions, requestHeaders);
                  _a2 = this.options, headers = _a2.headers, _b = _a2.fetch, fetch2 = _b === void 0 ? cross_fetch_1.default : _b, _c = _a2.method, method = _c === void 0 ? "POST" : _c, fetchOptions = __rest9(_a2, ["headers", "fetch", "method"]);
                  url = this.url;
                  if (batchRequestOptions.signal !== void 0) {
                    fetchOptions.signal = batchRequestOptions.signal;
                  }
                  queries = batchRequestOptions.documents.map(function(_a3) {
                    var document2 = _a3.document;
                    return resolveRequestDocument(document2).query;
                  });
                  variables = batchRequestOptions.documents.map(function(_a3) {
                    var variables2 = _a3.variables;
                    return variables2;
                  });
                  return [4, makeRequest({
                    url,
                    query: queries,
                    variables,
                    headers: __assign(__assign({}, resolveHeaders(callOrIdentity(headers))), resolveHeaders(batchRequestOptions.requestHeaders)),
                    operationName: void 0,
                    fetch: fetch2,
                    method,
                    fetchOptions
                  })];
                case 1:
                  data = _d.sent().data;
                  return [2, data];
              }
            });
          });
        };
        GraphQLClient2.prototype.setHeaders = function(headers) {
          this.options.headers = headers;
          return this;
        };
        GraphQLClient2.prototype.setHeader = function(key, value) {
          var _a2;
          var headers = this.options.headers;
          if (headers) {
            headers[key] = value;
          } else {
            this.options.headers = (_a2 = {}, _a2[key] = value, _a2);
          }
          return this;
        };
        GraphQLClient2.prototype.setEndpoint = function(value) {
          this.url = value;
          return this;
        };
        return GraphQLClient2;
      }()
    );
    exports.GraphQLClient = GraphQLClient;
    function makeRequest(_a2) {
      var url = _a2.url, query = _a2.query, variables = _a2.variables, headers = _a2.headers, operationName = _a2.operationName, fetch2 = _a2.fetch, _b = _a2.method, method = _b === void 0 ? "POST" : _b, fetchOptions = _a2.fetchOptions;
      return __awaiter3(this, void 0, void 0, function() {
        var fetcher, isBathchingQuery, response, result, successfullyReceivedData, successfullyPassedErrorPolicy, headers_1, status_1, errors, rest, data, errorResult;
        return __generator(this, function(_c) {
          switch (_c.label) {
            case 0:
              fetcher = method.toUpperCase() === "POST" ? post : get;
              isBathchingQuery = Array.isArray(query);
              return [4, fetcher({
                url,
                query,
                variables,
                operationName,
                headers,
                fetch: fetch2,
                fetchOptions
              })];
            case 1:
              response = _c.sent();
              return [4, getResult(response, fetchOptions.jsonSerializer)];
            case 2:
              result = _c.sent();
              successfullyReceivedData = isBathchingQuery && Array.isArray(result) ? !result.some(function(_a3) {
                var data2 = _a3.data;
                return !data2;
              }) : !!result.data;
              successfullyPassedErrorPolicy = !result.errors || fetchOptions.errorPolicy === "all" || fetchOptions.errorPolicy === "ignore";
              if (response.ok && successfullyPassedErrorPolicy && successfullyReceivedData) {
                headers_1 = response.headers, status_1 = response.status;
                errors = result.errors, rest = __rest9(result, ["errors"]);
                data = fetchOptions.errorPolicy === "ignore" ? rest : result;
                return [2, __assign(__assign({}, isBathchingQuery ? { data } : data), { headers: headers_1, status: status_1 })];
              } else {
                errorResult = typeof result === "string" ? { error: result } : result;
                throw new types_1.ClientError(__assign(__assign({}, errorResult), { status: response.status, headers: response.headers }), { query, variables });
              }
              return [
                2
                /*return*/
              ];
          }
        });
      });
    }
    function rawRequest(urlOrOptions, query, variables, requestHeaders) {
      return __awaiter3(this, void 0, void 0, function() {
        var requestOptions, client;
        return __generator(this, function(_a2) {
          requestOptions = parseArgs_1.parseRawRequestExtendedArgs(urlOrOptions, query, variables, requestHeaders);
          client = new GraphQLClient(requestOptions.url);
          return [2, client.rawRequest(__assign({}, requestOptions))];
        });
      });
    }
    exports.rawRequest = rawRequest;
    function request(urlOrOptions, document2, variables, requestHeaders) {
      return __awaiter3(this, void 0, void 0, function() {
        var requestOptions, client;
        return __generator(this, function(_a2) {
          requestOptions = parseArgs_1.parseRequestExtendedArgs(urlOrOptions, document2, variables, requestHeaders);
          client = new GraphQLClient(requestOptions.url);
          return [2, client.request(__assign({}, requestOptions))];
        });
      });
    }
    exports.request = request;
    function batchRequests(urlOrOptions, documents, requestHeaders) {
      return __awaiter3(this, void 0, void 0, function() {
        var requestOptions, client;
        return __generator(this, function(_a2) {
          requestOptions = parseArgs_1.parseBatchRequestsExtendedArgs(urlOrOptions, documents, requestHeaders);
          client = new GraphQLClient(requestOptions.url);
          return [2, client.batchRequests(__assign({}, requestOptions))];
        });
      });
    }
    exports.batchRequests = batchRequests;
    exports.default = request;
    function getResult(response, jsonSerializer) {
      if (jsonSerializer === void 0) {
        jsonSerializer = defaultJsonSerializer_1.defaultJsonSerializer;
      }
      return __awaiter3(this, void 0, void 0, function() {
        var contentType, _a2, _b;
        return __generator(this, function(_c) {
          switch (_c.label) {
            case 0:
              response.headers.forEach(function(value, key) {
                if (key.toLowerCase() === "content-type") {
                  contentType = value;
                }
              });
              if (!(contentType && contentType.toLowerCase().startsWith("application/json"))) return [3, 2];
              _b = (_a2 = jsonSerializer).parse;
              return [4, response.text()];
            case 1:
              return [2, _b.apply(_a2, [_c.sent()])];
            case 2:
              return [2, response.text()];
          }
        });
      });
    }
    function extractOperationName(document2) {
      var _a2;
      var operationName = void 0;
      var operationDefinitions = document2.definitions.filter(function(definition) {
        return definition.kind === "OperationDefinition";
      });
      if (operationDefinitions.length === 1) {
        operationName = (_a2 = operationDefinitions[0].name) === null || _a2 === void 0 ? void 0 : _a2.value;
      }
      return operationName;
    }
    function resolveRequestDocument(document2) {
      if (typeof document2 === "string") {
        var operationName_1 = void 0;
        try {
          var parsedDocument = parser_1.parse(document2);
          operationName_1 = extractOperationName(parsedDocument);
        } catch (err) {
        }
        return { query: document2, operationName: operationName_1 };
      }
      var operationName = extractOperationName(document2);
      return { query: printer_1.print(document2), operationName };
    }
    exports.resolveRequestDocument = resolveRequestDocument;
    function callOrIdentity(value) {
      return typeof value === "function" ? value() : value;
    }
    function gql(chunks) {
      var variables = [];
      for (var _i = 1; _i < arguments.length; _i++) {
        variables[_i - 1] = arguments[_i];
      }
      return chunks.reduce(function(accumulator, chunk, index) {
        return "" + accumulator + chunk + (index in variables ? variables[index] : "");
      }, "");
    }
    exports.gql = gql;
    function HeadersInstanceToPlainObject(headers) {
      var o = {};
      headers.forEach(function(v3, k3) {
        o[k3] = v3;
      });
      return o;
    }
    var graphql_ws_1 = require_graphql_ws();
    Object.defineProperty(exports, "GraphQLWebSocketClient", { enumerable: true, get: function() {
      return graphql_ws_1.GraphQLWebSocketClient;
    } });
  }
});

// node_modules/requires-port/index.js
var require_requires_port = __commonJS({
  "node_modules/requires-port/index.js"(exports, module) {
    "use strict";
    module.exports = function required(port, protocol) {
      protocol = protocol.split(":")[0];
      port = +port;
      if (!port) return false;
      switch (protocol) {
        case "http":
        case "ws":
          return port !== 80;
        case "https":
        case "wss":
          return port !== 443;
        case "ftp":
          return port !== 21;
        case "gopher":
          return port !== 70;
        case "file":
          return false;
      }
      return port !== 0;
    };
  }
});

// node_modules/querystringify/index.js
var require_querystringify = __commonJS({
  "node_modules/querystringify/index.js"(exports) {
    "use strict";
    var has = Object.prototype.hasOwnProperty;
    var undef;
    function decode(input) {
      try {
        return decodeURIComponent(input.replace(/\+/g, " "));
      } catch (e) {
        return null;
      }
    }
    function encode(input) {
      try {
        return encodeURIComponent(input);
      } catch (e) {
        return null;
      }
    }
    function querystring(query) {
      var parser = /([^=?#&]+)=?([^&]*)/g, result = {}, part;
      while (part = parser.exec(query)) {
        var key = decode(part[1]), value = decode(part[2]);
        if (key === null || value === null || key in result) continue;
        result[key] = value;
      }
      return result;
    }
    function querystringify(obj, prefix) {
      prefix = prefix || "";
      var pairs = [], value, key;
      if ("string" !== typeof prefix) prefix = "?";
      for (key in obj) {
        if (has.call(obj, key)) {
          value = obj[key];
          if (!value && (value === null || value === undef || isNaN(value))) {
            value = "";
          }
          key = encode(key);
          value = encode(value);
          if (key === null || value === null) continue;
          pairs.push(key + "=" + value);
        }
      }
      return pairs.length ? prefix + pairs.join("&") : "";
    }
    exports.stringify = querystringify;
    exports.parse = querystring;
  }
});

// node_modules/url-parse/index.js
var require_url_parse = __commonJS({
  "node_modules/url-parse/index.js"(exports, module) {
    "use strict";
    var required = require_requires_port();
    var qs = require_querystringify();
    var controlOrWhitespace = /^[\x00-\x20\u00a0\u1680\u2000-\u200a\u2028\u2029\u202f\u205f\u3000\ufeff]+/;
    var CRHTLF = /[\n\r\t]/g;
    var slashes = /^[A-Za-z][A-Za-z0-9+-.]*:\/\//;
    var port = /:\d+$/;
    var protocolre = /^([a-z][a-z0-9.+-]*:)?(\/\/)?([\\/]+)?([\S\s]*)/i;
    var windowsDriveLetter = /^[a-zA-Z]:/;
    function trimLeft(str) {
      return (str ? str : "").toString().replace(controlOrWhitespace, "");
    }
    var rules = [
      ["#", "hash"],
      // Extract from the back.
      ["?", "query"],
      // Extract from the back.
      function sanitize(address, url) {
        return isSpecial(url.protocol) ? address.replace(/\\/g, "/") : address;
      },
      ["/", "pathname"],
      // Extract from the back.
      ["@", "auth", 1],
      // Extract from the front.
      [NaN, "host", void 0, 1, 1],
      // Set left over value.
      [/:(\d*)$/, "port", void 0, 1],
      // RegExp the back.
      [NaN, "hostname", void 0, 1, 1]
      // Set left over.
    ];
    var ignore = { hash: 1, query: 1 };
    function lolcation(loc) {
      var globalVar;
      if (typeof window !== "undefined") globalVar = window;
      else if (typeof global !== "undefined") globalVar = global;
      else if (typeof self !== "undefined") globalVar = self;
      else globalVar = {};
      var location2 = globalVar.location || {};
      loc = loc || location2;
      var finaldestination = {}, type = typeof loc, key;
      if ("blob:" === loc.protocol) {
        finaldestination = new Url(unescape(loc.pathname), {});
      } else if ("string" === type) {
        finaldestination = new Url(loc, {});
        for (key in ignore) delete finaldestination[key];
      } else if ("object" === type) {
        for (key in loc) {
          if (key in ignore) continue;
          finaldestination[key] = loc[key];
        }
        if (finaldestination.slashes === void 0) {
          finaldestination.slashes = slashes.test(loc.href);
        }
      }
      return finaldestination;
    }
    function isSpecial(scheme) {
      return scheme === "file:" || scheme === "ftp:" || scheme === "http:" || scheme === "https:" || scheme === "ws:" || scheme === "wss:";
    }
    function extractProtocol(address, location2) {
      address = trimLeft(address);
      address = address.replace(CRHTLF, "");
      location2 = location2 || {};
      var match = protocolre.exec(address);
      var protocol = match[1] ? match[1].toLowerCase() : "";
      var forwardSlashes = !!match[2];
      var otherSlashes = !!match[3];
      var slashesCount = 0;
      var rest;
      if (forwardSlashes) {
        if (otherSlashes) {
          rest = match[2] + match[3] + match[4];
          slashesCount = match[2].length + match[3].length;
        } else {
          rest = match[2] + match[4];
          slashesCount = match[2].length;
        }
      } else {
        if (otherSlashes) {
          rest = match[3] + match[4];
          slashesCount = match[3].length;
        } else {
          rest = match[4];
        }
      }
      if (protocol === "file:") {
        if (slashesCount >= 2) {
          rest = rest.slice(2);
        }
      } else if (isSpecial(protocol)) {
        rest = match[4];
      } else if (protocol) {
        if (forwardSlashes) {
          rest = rest.slice(2);
        }
      } else if (slashesCount >= 2 && isSpecial(location2.protocol)) {
        rest = match[4];
      }
      return {
        protocol,
        slashes: forwardSlashes || isSpecial(protocol),
        slashesCount,
        rest
      };
    }
    function resolve(relative, base) {
      if (relative === "") return base;
      var path = (base || "/").split("/").slice(0, -1).concat(relative.split("/")), i = path.length, last = path[i - 1], unshift = false, up = 0;
      while (i--) {
        if (path[i] === ".") {
          path.splice(i, 1);
        } else if (path[i] === "..") {
          path.splice(i, 1);
          up++;
        } else if (up) {
          if (i === 0) unshift = true;
          path.splice(i, 1);
          up--;
        }
      }
      if (unshift) path.unshift("");
      if (last === "." || last === "..") path.push("");
      return path.join("/");
    }
    function Url(address, location2, parser) {
      address = trimLeft(address);
      address = address.replace(CRHTLF, "");
      if (!(this instanceof Url)) {
        return new Url(address, location2, parser);
      }
      var relative, extracted, parse3, instruction, index, key, instructions = rules.slice(), type = typeof location2, url = this, i = 0;
      if ("object" !== type && "string" !== type) {
        parser = location2;
        location2 = null;
      }
      if (parser && "function" !== typeof parser) parser = qs.parse;
      location2 = lolcation(location2);
      extracted = extractProtocol(address || "", location2);
      relative = !extracted.protocol && !extracted.slashes;
      url.slashes = extracted.slashes || relative && location2.slashes;
      url.protocol = extracted.protocol || location2.protocol || "";
      address = extracted.rest;
      if (extracted.protocol === "file:" && (extracted.slashesCount !== 2 || windowsDriveLetter.test(address)) || !extracted.slashes && (extracted.protocol || extracted.slashesCount < 2 || !isSpecial(url.protocol))) {
        instructions[3] = [/(.*)/, "pathname"];
      }
      for (; i < instructions.length; i++) {
        instruction = instructions[i];
        if (typeof instruction === "function") {
          address = instruction(address, url);
          continue;
        }
        parse3 = instruction[0];
        key = instruction[1];
        if (parse3 !== parse3) {
          url[key] = address;
        } else if ("string" === typeof parse3) {
          index = parse3 === "@" ? address.lastIndexOf(parse3) : address.indexOf(parse3);
          if (~index) {
            if ("number" === typeof instruction[2]) {
              url[key] = address.slice(0, index);
              address = address.slice(index + instruction[2]);
            } else {
              url[key] = address.slice(index);
              address = address.slice(0, index);
            }
          }
        } else if (index = parse3.exec(address)) {
          url[key] = index[1];
          address = address.slice(0, index.index);
        }
        url[key] = url[key] || (relative && instruction[3] ? location2[key] || "" : "");
        if (instruction[4]) url[key] = url[key].toLowerCase();
      }
      if (parser) url.query = parser(url.query);
      if (relative && location2.slashes && url.pathname.charAt(0) !== "/" && (url.pathname !== "" || location2.pathname !== "")) {
        url.pathname = resolve(url.pathname, location2.pathname);
      }
      if (url.pathname.charAt(0) !== "/" && isSpecial(url.protocol)) {
        url.pathname = "/" + url.pathname;
      }
      if (!required(url.port, url.protocol)) {
        url.host = url.hostname;
        url.port = "";
      }
      url.username = url.password = "";
      if (url.auth) {
        index = url.auth.indexOf(":");
        if (~index) {
          url.username = url.auth.slice(0, index);
          url.username = encodeURIComponent(decodeURIComponent(url.username));
          url.password = url.auth.slice(index + 1);
          url.password = encodeURIComponent(decodeURIComponent(url.password));
        } else {
          url.username = encodeURIComponent(decodeURIComponent(url.auth));
        }
        url.auth = url.password ? url.username + ":" + url.password : url.username;
      }
      url.origin = url.protocol !== "file:" && isSpecial(url.protocol) && url.host ? url.protocol + "//" + url.host : "null";
      url.href = url.toString();
    }
    function set(part, value, fn) {
      var url = this;
      switch (part) {
        case "query":
          if ("string" === typeof value && value.length) {
            value = (fn || qs.parse)(value);
          }
          url[part] = value;
          break;
        case "port":
          url[part] = value;
          if (!required(value, url.protocol)) {
            url.host = url.hostname;
            url[part] = "";
          } else if (value) {
            url.host = url.hostname + ":" + value;
          }
          break;
        case "hostname":
          url[part] = value;
          if (url.port) value += ":" + url.port;
          url.host = value;
          break;
        case "host":
          url[part] = value;
          if (port.test(value)) {
            value = value.split(":");
            url.port = value.pop();
            url.hostname = value.join(":");
          } else {
            url.hostname = value;
            url.port = "";
          }
          break;
        case "protocol":
          url.protocol = value.toLowerCase();
          url.slashes = !fn;
          break;
        case "pathname":
        case "hash":
          if (value) {
            var char = part === "pathname" ? "/" : "#";
            url[part] = value.charAt(0) !== char ? char + value : value;
          } else {
            url[part] = value;
          }
          break;
        case "username":
        case "password":
          url[part] = encodeURIComponent(value);
          break;
        case "auth":
          var index = value.indexOf(":");
          if (~index) {
            url.username = value.slice(0, index);
            url.username = encodeURIComponent(decodeURIComponent(url.username));
            url.password = value.slice(index + 1);
            url.password = encodeURIComponent(decodeURIComponent(url.password));
          } else {
            url.username = encodeURIComponent(decodeURIComponent(value));
          }
      }
      for (var i = 0; i < rules.length; i++) {
        var ins = rules[i];
        if (ins[4]) url[ins[1]] = url[ins[1]].toLowerCase();
      }
      url.auth = url.password ? url.username + ":" + url.password : url.username;
      url.origin = url.protocol !== "file:" && isSpecial(url.protocol) && url.host ? url.protocol + "//" + url.host : "null";
      url.href = url.toString();
      return url;
    }
    function toString(stringify) {
      if (!stringify || "function" !== typeof stringify) stringify = qs.stringify;
      var query, url = this, host = url.host, protocol = url.protocol;
      if (protocol && protocol.charAt(protocol.length - 1) !== ":") protocol += ":";
      var result = protocol + (url.protocol && url.slashes || isSpecial(url.protocol) ? "//" : "");
      if (url.username) {
        result += url.username;
        if (url.password) result += ":" + url.password;
        result += "@";
      } else if (url.password) {
        result += ":" + url.password;
        result += "@";
      } else if (url.protocol !== "file:" && isSpecial(url.protocol) && !host && url.pathname !== "/") {
        result += "@";
      }
      if (host[host.length - 1] === ":" || port.test(url.hostname) && !url.port) {
        host += ":";
      }
      result += host + url.pathname;
      query = "object" === typeof url.query ? stringify(url.query) : url.query;
      if (query) result += "?" !== query.charAt(0) ? "?" + query : query;
      if (url.hash) result += url.hash;
      return result;
    }
    Url.prototype = { set, toString };
    Url.extractProtocol = extractProtocol;
    Url.location = lolcation;
    Url.trimLeft = trimLeft;
    Url.qs = qs;
    module.exports = Url;
  }
});

// node_modules/axios/lib/helpers/bind.js
var require_bind = __commonJS({
  "node_modules/axios/lib/helpers/bind.js"(exports, module) {
    "use strict";
    module.exports = function bind(fn, thisArg) {
      return function wrap2() {
        var args = new Array(arguments.length);
        for (var i = 0; i < args.length; i++) {
          args[i] = arguments[i];
        }
        return fn.apply(thisArg, args);
      };
    };
  }
});

// node_modules/axios/lib/utils.js
var require_utils = __commonJS({
  "node_modules/axios/lib/utils.js"(exports, module) {
    "use strict";
    var bind = require_bind();
    var toString = Object.prototype.toString;
    function isArray(val) {
      return toString.call(val) === "[object Array]";
    }
    function isUndefined(val) {
      return typeof val === "undefined";
    }
    function isBuffer(val) {
      return val !== null && !isUndefined(val) && val.constructor !== null && !isUndefined(val.constructor) && typeof val.constructor.isBuffer === "function" && val.constructor.isBuffer(val);
    }
    function isArrayBuffer(val) {
      return toString.call(val) === "[object ArrayBuffer]";
    }
    function isFormData(val) {
      return typeof FormData !== "undefined" && val instanceof FormData;
    }
    function isArrayBufferView(val) {
      var result;
      if (typeof ArrayBuffer !== "undefined" && ArrayBuffer.isView) {
        result = ArrayBuffer.isView(val);
      } else {
        result = val && val.buffer && val.buffer instanceof ArrayBuffer;
      }
      return result;
    }
    function isString(val) {
      return typeof val === "string";
    }
    function isNumber(val) {
      return typeof val === "number";
    }
    function isObject(val) {
      return val !== null && typeof val === "object";
    }
    function isPlainObject(val) {
      if (toString.call(val) !== "[object Object]") {
        return false;
      }
      var prototype = Object.getPrototypeOf(val);
      return prototype === null || prototype === Object.prototype;
    }
    function isDate(val) {
      return toString.call(val) === "[object Date]";
    }
    function isFile(val) {
      return toString.call(val) === "[object File]";
    }
    function isBlob(val) {
      return toString.call(val) === "[object Blob]";
    }
    function isFunction(val) {
      return toString.call(val) === "[object Function]";
    }
    function isStream(val) {
      return isObject(val) && isFunction(val.pipe);
    }
    function isURLSearchParams(val) {
      return typeof URLSearchParams !== "undefined" && val instanceof URLSearchParams;
    }
    function trim(str) {
      return str.trim ? str.trim() : str.replace(/^\s+|\s+$/g, "");
    }
    function isStandardBrowserEnv() {
      if (typeof navigator !== "undefined" && (navigator.product === "ReactNative" || navigator.product === "NativeScript" || navigator.product === "NS")) {
        return false;
      }
      return typeof window !== "undefined" && typeof document !== "undefined";
    }
    function forEach(obj, fn) {
      if (obj === null || typeof obj === "undefined") {
        return;
      }
      if (typeof obj !== "object") {
        obj = [obj];
      }
      if (isArray(obj)) {
        for (var i = 0, l = obj.length; i < l; i++) {
          fn.call(null, obj[i], i, obj);
        }
      } else {
        for (var key in obj) {
          if (Object.prototype.hasOwnProperty.call(obj, key)) {
            fn.call(null, obj[key], key, obj);
          }
        }
      }
    }
    function merge() {
      var result = {};
      function assignValue(val, key) {
        if (isPlainObject(result[key]) && isPlainObject(val)) {
          result[key] = merge(result[key], val);
        } else if (isPlainObject(val)) {
          result[key] = merge({}, val);
        } else if (isArray(val)) {
          result[key] = val.slice();
        } else {
          result[key] = val;
        }
      }
      for (var i = 0, l = arguments.length; i < l; i++) {
        forEach(arguments[i], assignValue);
      }
      return result;
    }
    function extend(a, b3, thisArg) {
      forEach(b3, function assignValue(val, key) {
        if (thisArg && typeof val === "function") {
          a[key] = bind(val, thisArg);
        } else {
          a[key] = val;
        }
      });
      return a;
    }
    function stripBOM(content) {
      if (content.charCodeAt(0) === 65279) {
        content = content.slice(1);
      }
      return content;
    }
    module.exports = {
      isArray,
      isArrayBuffer,
      isBuffer,
      isFormData,
      isArrayBufferView,
      isString,
      isNumber,
      isObject,
      isPlainObject,
      isUndefined,
      isDate,
      isFile,
      isBlob,
      isFunction,
      isStream,
      isURLSearchParams,
      isStandardBrowserEnv,
      forEach,
      merge,
      extend,
      trim,
      stripBOM
    };
  }
});

// node_modules/axios/lib/helpers/buildURL.js
var require_buildURL = __commonJS({
  "node_modules/axios/lib/helpers/buildURL.js"(exports, module) {
    "use strict";
    var utils = require_utils();
    function encode(val) {
      return encodeURIComponent(val).replace(/%3A/gi, ":").replace(/%24/g, "$").replace(/%2C/gi, ",").replace(/%20/g, "+").replace(/%5B/gi, "[").replace(/%5D/gi, "]");
    }
    module.exports = function buildURL(url, params, paramsSerializer) {
      if (!params) {
        return url;
      }
      var serializedParams;
      if (paramsSerializer) {
        serializedParams = paramsSerializer(params);
      } else if (utils.isURLSearchParams(params)) {
        serializedParams = params.toString();
      } else {
        var parts = [];
        utils.forEach(params, function serialize(val, key) {
          if (val === null || typeof val === "undefined") {
            return;
          }
          if (utils.isArray(val)) {
            key = key + "[]";
          } else {
            val = [val];
          }
          utils.forEach(val, function parseValue2(v3) {
            if (utils.isDate(v3)) {
              v3 = v3.toISOString();
            } else if (utils.isObject(v3)) {
              v3 = JSON.stringify(v3);
            }
            parts.push(encode(key) + "=" + encode(v3));
          });
        });
        serializedParams = parts.join("&");
      }
      if (serializedParams) {
        var hashmarkIndex = url.indexOf("#");
        if (hashmarkIndex !== -1) {
          url = url.slice(0, hashmarkIndex);
        }
        url += (url.indexOf("?") === -1 ? "?" : "&") + serializedParams;
      }
      return url;
    };
  }
});

// node_modules/axios/lib/core/InterceptorManager.js
var require_InterceptorManager = __commonJS({
  "node_modules/axios/lib/core/InterceptorManager.js"(exports, module) {
    "use strict";
    var utils = require_utils();
    function InterceptorManager() {
      this.handlers = [];
    }
    InterceptorManager.prototype.use = function use(fulfilled, rejected, options) {
      this.handlers.push({
        fulfilled,
        rejected,
        synchronous: options ? options.synchronous : false,
        runWhen: options ? options.runWhen : null
      });
      return this.handlers.length - 1;
    };
    InterceptorManager.prototype.eject = function eject(id) {
      if (this.handlers[id]) {
        this.handlers[id] = null;
      }
    };
    InterceptorManager.prototype.forEach = function forEach(fn) {
      utils.forEach(this.handlers, function forEachHandler(h2) {
        if (h2 !== null) {
          fn(h2);
        }
      });
    };
    module.exports = InterceptorManager;
  }
});

// node_modules/axios/lib/helpers/normalizeHeaderName.js
var require_normalizeHeaderName = __commonJS({
  "node_modules/axios/lib/helpers/normalizeHeaderName.js"(exports, module) {
    "use strict";
    var utils = require_utils();
    module.exports = function normalizeHeaderName(headers, normalizedName) {
      utils.forEach(headers, function processHeader(value, name) {
        if (name !== normalizedName && name.toUpperCase() === normalizedName.toUpperCase()) {
          headers[normalizedName] = value;
          delete headers[name];
        }
      });
    };
  }
});

// node_modules/axios/lib/core/enhanceError.js
var require_enhanceError = __commonJS({
  "node_modules/axios/lib/core/enhanceError.js"(exports, module) {
    "use strict";
    module.exports = function enhanceError(error, config, code, request, response) {
      error.config = config;
      if (code) {
        error.code = code;
      }
      error.request = request;
      error.response = response;
      error.isAxiosError = true;
      error.toJSON = function toJSON() {
        return {
          // Standard
          message: this.message,
          name: this.name,
          // Microsoft
          description: this.description,
          number: this.number,
          // Mozilla
          fileName: this.fileName,
          lineNumber: this.lineNumber,
          columnNumber: this.columnNumber,
          stack: this.stack,
          // Axios
          config: this.config,
          code: this.code
        };
      };
      return error;
    };
  }
});

// node_modules/axios/lib/core/createError.js
var require_createError = __commonJS({
  "node_modules/axios/lib/core/createError.js"(exports, module) {
    "use strict";
    var enhanceError = require_enhanceError();
    module.exports = function createError(message, config, code, request, response) {
      var error = new Error(message);
      return enhanceError(error, config, code, request, response);
    };
  }
});

// node_modules/axios/lib/core/settle.js
var require_settle = __commonJS({
  "node_modules/axios/lib/core/settle.js"(exports, module) {
    "use strict";
    var createError = require_createError();
    module.exports = function settle(resolve, reject, response) {
      var validateStatus = response.config.validateStatus;
      if (!response.status || !validateStatus || validateStatus(response.status)) {
        resolve(response);
      } else {
        reject(createError(
          "Request failed with status code " + response.status,
          response.config,
          null,
          response.request,
          response
        ));
      }
    };
  }
});

// node_modules/axios/lib/helpers/cookies.js
var require_cookies = __commonJS({
  "node_modules/axios/lib/helpers/cookies.js"(exports, module) {
    "use strict";
    var utils = require_utils();
    module.exports = utils.isStandardBrowserEnv() ? (
      // Standard browser envs support document.cookie
      /* @__PURE__ */ function standardBrowserEnv() {
        return {
          write: function write(name, value, expires, path, domain, secure) {
            var cookie = [];
            cookie.push(name + "=" + encodeURIComponent(value));
            if (utils.isNumber(expires)) {
              cookie.push("expires=" + new Date(expires).toGMTString());
            }
            if (utils.isString(path)) {
              cookie.push("path=" + path);
            }
            if (utils.isString(domain)) {
              cookie.push("domain=" + domain);
            }
            if (secure === true) {
              cookie.push("secure");
            }
            document.cookie = cookie.join("; ");
          },
          read: function read(name) {
            var match = document.cookie.match(new RegExp("(^|;\\s*)(" + name + ")=([^;]*)"));
            return match ? decodeURIComponent(match[3]) : null;
          },
          remove: function remove(name) {
            this.write(name, "", Date.now() - 864e5);
          }
        };
      }()
    ) : (
      // Non standard browser env (web workers, react-native) lack needed support.
      /* @__PURE__ */ function nonStandardBrowserEnv() {
        return {
          write: function write() {
          },
          read: function read() {
            return null;
          },
          remove: function remove() {
          }
        };
      }()
    );
  }
});

// node_modules/axios/lib/helpers/isAbsoluteURL.js
var require_isAbsoluteURL = __commonJS({
  "node_modules/axios/lib/helpers/isAbsoluteURL.js"(exports, module) {
    "use strict";
    module.exports = function isAbsoluteURL(url) {
      return /^([a-z][a-z\d\+\-\.]*:)?\/\//i.test(url);
    };
  }
});

// node_modules/axios/lib/helpers/combineURLs.js
var require_combineURLs = __commonJS({
  "node_modules/axios/lib/helpers/combineURLs.js"(exports, module) {
    "use strict";
    module.exports = function combineURLs(baseURL, relativeURL) {
      return relativeURL ? baseURL.replace(/\/+$/, "") + "/" + relativeURL.replace(/^\/+/, "") : baseURL;
    };
  }
});

// node_modules/axios/lib/core/buildFullPath.js
var require_buildFullPath = __commonJS({
  "node_modules/axios/lib/core/buildFullPath.js"(exports, module) {
    "use strict";
    var isAbsoluteURL = require_isAbsoluteURL();
    var combineURLs = require_combineURLs();
    module.exports = function buildFullPath(baseURL, requestedURL) {
      if (baseURL && !isAbsoluteURL(requestedURL)) {
        return combineURLs(baseURL, requestedURL);
      }
      return requestedURL;
    };
  }
});

// node_modules/axios/lib/helpers/parseHeaders.js
var require_parseHeaders = __commonJS({
  "node_modules/axios/lib/helpers/parseHeaders.js"(exports, module) {
    "use strict";
    var utils = require_utils();
    var ignoreDuplicateOf = [
      "age",
      "authorization",
      "content-length",
      "content-type",
      "etag",
      "expires",
      "from",
      "host",
      "if-modified-since",
      "if-unmodified-since",
      "last-modified",
      "location",
      "max-forwards",
      "proxy-authorization",
      "referer",
      "retry-after",
      "user-agent"
    ];
    module.exports = function parseHeaders(headers) {
      var parsed = {};
      var key;
      var val;
      var i;
      if (!headers) {
        return parsed;
      }
      utils.forEach(headers.split("\n"), function parser(line) {
        i = line.indexOf(":");
        key = utils.trim(line.substr(0, i)).toLowerCase();
        val = utils.trim(line.substr(i + 1));
        if (key) {
          if (parsed[key] && ignoreDuplicateOf.indexOf(key) >= 0) {
            return;
          }
          if (key === "set-cookie") {
            parsed[key] = (parsed[key] ? parsed[key] : []).concat([val]);
          } else {
            parsed[key] = parsed[key] ? parsed[key] + ", " + val : val;
          }
        }
      });
      return parsed;
    };
  }
});

// node_modules/axios/lib/helpers/isURLSameOrigin.js
var require_isURLSameOrigin = __commonJS({
  "node_modules/axios/lib/helpers/isURLSameOrigin.js"(exports, module) {
    "use strict";
    var utils = require_utils();
    module.exports = utils.isStandardBrowserEnv() ? (
      // Standard browser envs have full support of the APIs needed to test
      // whether the request URL is of the same origin as current location.
      function standardBrowserEnv() {
        var msie = /(msie|trident)/i.test(navigator.userAgent);
        var urlParsingNode = document.createElement("a");
        var originURL;
        function resolveURL(url) {
          var href = url;
          if (msie) {
            urlParsingNode.setAttribute("href", href);
            href = urlParsingNode.href;
          }
          urlParsingNode.setAttribute("href", href);
          return {
            href: urlParsingNode.href,
            protocol: urlParsingNode.protocol ? urlParsingNode.protocol.replace(/:$/, "") : "",
            host: urlParsingNode.host,
            search: urlParsingNode.search ? urlParsingNode.search.replace(/^\?/, "") : "",
            hash: urlParsingNode.hash ? urlParsingNode.hash.replace(/^#/, "") : "",
            hostname: urlParsingNode.hostname,
            port: urlParsingNode.port,
            pathname: urlParsingNode.pathname.charAt(0) === "/" ? urlParsingNode.pathname : "/" + urlParsingNode.pathname
          };
        }
        originURL = resolveURL(window.location.href);
        return function isURLSameOrigin(requestURL) {
          var parsed = utils.isString(requestURL) ? resolveURL(requestURL) : requestURL;
          return parsed.protocol === originURL.protocol && parsed.host === originURL.host;
        };
      }()
    ) : (
      // Non standard browser envs (web workers, react-native) lack needed support.
      /* @__PURE__ */ function nonStandardBrowserEnv() {
        return function isURLSameOrigin() {
          return true;
        };
      }()
    );
  }
});

// node_modules/axios/lib/adapters/xhr.js
var require_xhr = __commonJS({
  "node_modules/axios/lib/adapters/xhr.js"(exports, module) {
    "use strict";
    var utils = require_utils();
    var settle = require_settle();
    var cookies = require_cookies();
    var buildURL = require_buildURL();
    var buildFullPath = require_buildFullPath();
    var parseHeaders = require_parseHeaders();
    var isURLSameOrigin = require_isURLSameOrigin();
    var createError = require_createError();
    module.exports = function xhrAdapter(config) {
      return new Promise(function dispatchXhrRequest(resolve, reject) {
        var requestData = config.data;
        var requestHeaders = config.headers;
        var responseType = config.responseType;
        if (utils.isFormData(requestData)) {
          delete requestHeaders["Content-Type"];
        }
        var request = new XMLHttpRequest();
        if (config.auth) {
          var username = config.auth.username || "";
          var password = config.auth.password ? unescape(encodeURIComponent(config.auth.password)) : "";
          requestHeaders.Authorization = "Basic " + btoa(username + ":" + password);
        }
        var fullPath = buildFullPath(config.baseURL, config.url);
        request.open(config.method.toUpperCase(), buildURL(fullPath, config.params, config.paramsSerializer), true);
        request.timeout = config.timeout;
        function onloadend() {
          if (!request) {
            return;
          }
          var responseHeaders = "getAllResponseHeaders" in request ? parseHeaders(request.getAllResponseHeaders()) : null;
          var responseData = !responseType || responseType === "text" || responseType === "json" ? request.responseText : request.response;
          var response = {
            data: responseData,
            status: request.status,
            statusText: request.statusText,
            headers: responseHeaders,
            config,
            request
          };
          settle(resolve, reject, response);
          request = null;
        }
        if ("onloadend" in request) {
          request.onloadend = onloadend;
        } else {
          request.onreadystatechange = function handleLoad() {
            if (!request || request.readyState !== 4) {
              return;
            }
            if (request.status === 0 && !(request.responseURL && request.responseURL.indexOf("file:") === 0)) {
              return;
            }
            setTimeout(onloadend);
          };
        }
        request.onabort = function handleAbort() {
          if (!request) {
            return;
          }
          reject(createError("Request aborted", config, "ECONNABORTED", request));
          request = null;
        };
        request.onerror = function handleError() {
          reject(createError("Network Error", config, null, request));
          request = null;
        };
        request.ontimeout = function handleTimeout() {
          var timeoutErrorMessage = "timeout of " + config.timeout + "ms exceeded";
          if (config.timeoutErrorMessage) {
            timeoutErrorMessage = config.timeoutErrorMessage;
          }
          reject(createError(
            timeoutErrorMessage,
            config,
            config.transitional && config.transitional.clarifyTimeoutError ? "ETIMEDOUT" : "ECONNABORTED",
            request
          ));
          request = null;
        };
        if (utils.isStandardBrowserEnv()) {
          var xsrfValue = (config.withCredentials || isURLSameOrigin(fullPath)) && config.xsrfCookieName ? cookies.read(config.xsrfCookieName) : void 0;
          if (xsrfValue) {
            requestHeaders[config.xsrfHeaderName] = xsrfValue;
          }
        }
        if ("setRequestHeader" in request) {
          utils.forEach(requestHeaders, function setRequestHeader(val, key) {
            if (typeof requestData === "undefined" && key.toLowerCase() === "content-type") {
              delete requestHeaders[key];
            } else {
              request.setRequestHeader(key, val);
            }
          });
        }
        if (!utils.isUndefined(config.withCredentials)) {
          request.withCredentials = !!config.withCredentials;
        }
        if (responseType && responseType !== "json") {
          request.responseType = config.responseType;
        }
        if (typeof config.onDownloadProgress === "function") {
          request.addEventListener("progress", config.onDownloadProgress);
        }
        if (typeof config.onUploadProgress === "function" && request.upload) {
          request.upload.addEventListener("progress", config.onUploadProgress);
        }
        if (config.cancelToken) {
          config.cancelToken.promise.then(function onCanceled(cancel) {
            if (!request) {
              return;
            }
            request.abort();
            reject(cancel);
            request = null;
          });
        }
        if (!requestData) {
          requestData = null;
        }
        request.send(requestData);
      });
    };
  }
});

// node_modules/axios/lib/defaults.js
var require_defaults = __commonJS({
  "node_modules/axios/lib/defaults.js"(exports, module) {
    "use strict";
    var utils = require_utils();
    var normalizeHeaderName = require_normalizeHeaderName();
    var enhanceError = require_enhanceError();
    var DEFAULT_CONTENT_TYPE = {
      "Content-Type": "application/x-www-form-urlencoded"
    };
    function setContentTypeIfUnset(headers, value) {
      if (!utils.isUndefined(headers) && utils.isUndefined(headers["Content-Type"])) {
        headers["Content-Type"] = value;
      }
    }
    function getDefaultAdapter() {
      var adapter;
      if (typeof XMLHttpRequest !== "undefined") {
        adapter = require_xhr();
      } else if (typeof process !== "undefined" && Object.prototype.toString.call(process) === "[object process]") {
        adapter = require_xhr();
      }
      return adapter;
    }
    function stringifySafely(rawValue, parser, encoder) {
      if (utils.isString(rawValue)) {
        try {
          (parser || JSON.parse)(rawValue);
          return utils.trim(rawValue);
        } catch (e) {
          if (e.name !== "SyntaxError") {
            throw e;
          }
        }
      }
      return (encoder || JSON.stringify)(rawValue);
    }
    var defaults = {
      transitional: {
        silentJSONParsing: true,
        forcedJSONParsing: true,
        clarifyTimeoutError: false
      },
      adapter: getDefaultAdapter(),
      transformRequest: [function transformRequest(data, headers) {
        normalizeHeaderName(headers, "Accept");
        normalizeHeaderName(headers, "Content-Type");
        if (utils.isFormData(data) || utils.isArrayBuffer(data) || utils.isBuffer(data) || utils.isStream(data) || utils.isFile(data) || utils.isBlob(data)) {
          return data;
        }
        if (utils.isArrayBufferView(data)) {
          return data.buffer;
        }
        if (utils.isURLSearchParams(data)) {
          setContentTypeIfUnset(headers, "application/x-www-form-urlencoded;charset=utf-8");
          return data.toString();
        }
        if (utils.isObject(data) || headers && headers["Content-Type"] === "application/json") {
          setContentTypeIfUnset(headers, "application/json");
          return stringifySafely(data);
        }
        return data;
      }],
      transformResponse: [function transformResponse(data) {
        var transitional = this.transitional;
        var silentJSONParsing = transitional && transitional.silentJSONParsing;
        var forcedJSONParsing = transitional && transitional.forcedJSONParsing;
        var strictJSONParsing = !silentJSONParsing && this.responseType === "json";
        if (strictJSONParsing || forcedJSONParsing && utils.isString(data) && data.length) {
          try {
            return JSON.parse(data);
          } catch (e) {
            if (strictJSONParsing) {
              if (e.name === "SyntaxError") {
                throw enhanceError(e, this, "E_JSON_PARSE");
              }
              throw e;
            }
          }
        }
        return data;
      }],
      /**
       * A timeout in milliseconds to abort a request. If set to 0 (default) a
       * timeout is not created.
       */
      timeout: 0,
      xsrfCookieName: "XSRF-TOKEN",
      xsrfHeaderName: "X-XSRF-TOKEN",
      maxContentLength: -1,
      maxBodyLength: -1,
      validateStatus: function validateStatus(status2) {
        return status2 >= 200 && status2 < 300;
      }
    };
    defaults.headers = {
      common: {
        "Accept": "application/json, text/plain, */*"
      }
    };
    utils.forEach(["delete", "get", "head"], function forEachMethodNoData(method) {
      defaults.headers[method] = {};
    });
    utils.forEach(["post", "put", "patch"], function forEachMethodWithData(method) {
      defaults.headers[method] = utils.merge(DEFAULT_CONTENT_TYPE);
    });
    module.exports = defaults;
  }
});

// node_modules/axios/lib/core/transformData.js
var require_transformData = __commonJS({
  "node_modules/axios/lib/core/transformData.js"(exports, module) {
    "use strict";
    var utils = require_utils();
    var defaults = require_defaults();
    module.exports = function transformData(data, headers, fns) {
      var context = this || defaults;
      utils.forEach(fns, function transform(fn) {
        data = fn.call(context, data, headers);
      });
      return data;
    };
  }
});

// node_modules/axios/lib/cancel/isCancel.js
var require_isCancel = __commonJS({
  "node_modules/axios/lib/cancel/isCancel.js"(exports, module) {
    "use strict";
    module.exports = function isCancel(value) {
      return !!(value && value.__CANCEL__);
    };
  }
});

// node_modules/axios/lib/core/dispatchRequest.js
var require_dispatchRequest = __commonJS({
  "node_modules/axios/lib/core/dispatchRequest.js"(exports, module) {
    "use strict";
    var utils = require_utils();
    var transformData = require_transformData();
    var isCancel = require_isCancel();
    var defaults = require_defaults();
    function throwIfCancellationRequested(config) {
      if (config.cancelToken) {
        config.cancelToken.throwIfRequested();
      }
    }
    module.exports = function dispatchRequest(config) {
      throwIfCancellationRequested(config);
      config.headers = config.headers || {};
      config.data = transformData.call(
        config,
        config.data,
        config.headers,
        config.transformRequest
      );
      config.headers = utils.merge(
        config.headers.common || {},
        config.headers[config.method] || {},
        config.headers
      );
      utils.forEach(
        ["delete", "get", "head", "post", "put", "patch", "common"],
        function cleanHeaderConfig(method) {
          delete config.headers[method];
        }
      );
      var adapter = config.adapter || defaults.adapter;
      return adapter(config).then(function onAdapterResolution(response) {
        throwIfCancellationRequested(config);
        response.data = transformData.call(
          config,
          response.data,
          response.headers,
          config.transformResponse
        );
        return response;
      }, function onAdapterRejection(reason) {
        if (!isCancel(reason)) {
          throwIfCancellationRequested(config);
          if (reason && reason.response) {
            reason.response.data = transformData.call(
              config,
              reason.response.data,
              reason.response.headers,
              config.transformResponse
            );
          }
        }
        return Promise.reject(reason);
      });
    };
  }
});

// node_modules/axios/lib/core/mergeConfig.js
var require_mergeConfig = __commonJS({
  "node_modules/axios/lib/core/mergeConfig.js"(exports, module) {
    "use strict";
    var utils = require_utils();
    module.exports = function mergeConfig(config1, config2) {
      config2 = config2 || {};
      var config = {};
      var valueFromConfig2Keys = ["url", "method", "data"];
      var mergeDeepPropertiesKeys = ["headers", "auth", "proxy", "params"];
      var defaultToConfig2Keys = [
        "baseURL",
        "transformRequest",
        "transformResponse",
        "paramsSerializer",
        "timeout",
        "timeoutMessage",
        "withCredentials",
        "adapter",
        "responseType",
        "xsrfCookieName",
        "xsrfHeaderName",
        "onUploadProgress",
        "onDownloadProgress",
        "decompress",
        "maxContentLength",
        "maxBodyLength",
        "maxRedirects",
        "transport",
        "httpAgent",
        "httpsAgent",
        "cancelToken",
        "socketPath",
        "responseEncoding"
      ];
      var directMergeKeys = ["validateStatus"];
      function getMergedValue(target, source) {
        if (utils.isPlainObject(target) && utils.isPlainObject(source)) {
          return utils.merge(target, source);
        } else if (utils.isPlainObject(source)) {
          return utils.merge({}, source);
        } else if (utils.isArray(source)) {
          return source.slice();
        }
        return source;
      }
      function mergeDeepProperties(prop) {
        if (!utils.isUndefined(config2[prop])) {
          config[prop] = getMergedValue(config1[prop], config2[prop]);
        } else if (!utils.isUndefined(config1[prop])) {
          config[prop] = getMergedValue(void 0, config1[prop]);
        }
      }
      utils.forEach(valueFromConfig2Keys, function valueFromConfig2(prop) {
        if (!utils.isUndefined(config2[prop])) {
          config[prop] = getMergedValue(void 0, config2[prop]);
        }
      });
      utils.forEach(mergeDeepPropertiesKeys, mergeDeepProperties);
      utils.forEach(defaultToConfig2Keys, function defaultToConfig2(prop) {
        if (!utils.isUndefined(config2[prop])) {
          config[prop] = getMergedValue(void 0, config2[prop]);
        } else if (!utils.isUndefined(config1[prop])) {
          config[prop] = getMergedValue(void 0, config1[prop]);
        }
      });
      utils.forEach(directMergeKeys, function merge(prop) {
        if (prop in config2) {
          config[prop] = getMergedValue(config1[prop], config2[prop]);
        } else if (prop in config1) {
          config[prop] = getMergedValue(void 0, config1[prop]);
        }
      });
      var axiosKeys = valueFromConfig2Keys.concat(mergeDeepPropertiesKeys).concat(defaultToConfig2Keys).concat(directMergeKeys);
      var otherKeys = Object.keys(config1).concat(Object.keys(config2)).filter(function filterAxiosKeys(key) {
        return axiosKeys.indexOf(key) === -1;
      });
      utils.forEach(otherKeys, mergeDeepProperties);
      return config;
    };
  }
});

// node_modules/axios/package.json
var require_package = __commonJS({
  "node_modules/axios/package.json"(exports, module) {
    module.exports = {
      name: "axios",
      version: "0.21.4",
      description: "Promise based HTTP client for the browser and node.js",
      main: "index.js",
      scripts: {
        test: "grunt test",
        start: "node ./sandbox/server.js",
        build: "NODE_ENV=production grunt build",
        preversion: "npm test",
        version: "npm run build && grunt version && git add -A dist && git add CHANGELOG.md bower.json package.json",
        postversion: "git push && git push --tags",
        examples: "node ./examples/server.js",
        coveralls: "cat coverage/lcov.info | ./node_modules/coveralls/bin/coveralls.js",
        fix: "eslint --fix lib/**/*.js"
      },
      repository: {
        type: "git",
        url: "https://github.com/axios/axios.git"
      },
      keywords: [
        "xhr",
        "http",
        "ajax",
        "promise",
        "node"
      ],
      author: "Matt Zabriskie",
      license: "MIT",
      bugs: {
        url: "https://github.com/axios/axios/issues"
      },
      homepage: "https://axios-http.com",
      devDependencies: {
        coveralls: "^3.0.0",
        "es6-promise": "^4.2.4",
        grunt: "^1.3.0",
        "grunt-banner": "^0.6.0",
        "grunt-cli": "^1.2.0",
        "grunt-contrib-clean": "^1.1.0",
        "grunt-contrib-watch": "^1.0.0",
        "grunt-eslint": "^23.0.0",
        "grunt-karma": "^4.0.0",
        "grunt-mocha-test": "^0.13.3",
        "grunt-ts": "^6.0.0-beta.19",
        "grunt-webpack": "^4.0.2",
        "istanbul-instrumenter-loader": "^1.0.0",
        "jasmine-core": "^2.4.1",
        karma: "^6.3.2",
        "karma-chrome-launcher": "^3.1.0",
        "karma-firefox-launcher": "^2.1.0",
        "karma-jasmine": "^1.1.1",
        "karma-jasmine-ajax": "^0.1.13",
        "karma-safari-launcher": "^1.0.0",
        "karma-sauce-launcher": "^4.3.6",
        "karma-sinon": "^1.0.5",
        "karma-sourcemap-loader": "^0.3.8",
        "karma-webpack": "^4.0.2",
        "load-grunt-tasks": "^3.5.2",
        minimist: "^1.2.0",
        mocha: "^8.2.1",
        sinon: "^4.5.0",
        "terser-webpack-plugin": "^4.2.3",
        typescript: "^4.0.5",
        "url-search-params": "^0.10.0",
        webpack: "^4.44.2",
        "webpack-dev-server": "^3.11.0"
      },
      browser: {
        "./lib/adapters/http.js": "./lib/adapters/xhr.js"
      },
      jsdelivr: "dist/axios.min.js",
      unpkg: "dist/axios.min.js",
      typings: "./index.d.ts",
      dependencies: {
        "follow-redirects": "^1.14.0"
      },
      bundlesize: [
        {
          path: "./dist/axios.min.js",
          threshold: "5kB"
        }
      ]
    };
  }
});

// node_modules/axios/lib/helpers/validator.js
var require_validator = __commonJS({
  "node_modules/axios/lib/helpers/validator.js"(exports, module) {
    "use strict";
    var pkg = require_package();
    var validators = {};
    ["object", "boolean", "number", "function", "string", "symbol"].forEach(function(type, i) {
      validators[type] = function validator(thing) {
        return typeof thing === type || "a" + (i < 1 ? "n " : " ") + type;
      };
    });
    var deprecatedWarnings = {};
    var currentVerArr = pkg.version.split(".");
    function isOlderVersion(version, thanVersion) {
      var pkgVersionArr = thanVersion ? thanVersion.split(".") : currentVerArr;
      var destVer = version.split(".");
      for (var i = 0; i < 3; i++) {
        if (pkgVersionArr[i] > destVer[i]) {
          return true;
        } else if (pkgVersionArr[i] < destVer[i]) {
          return false;
        }
      }
      return false;
    }
    validators.transitional = function transitional(validator, version, message) {
      var isDeprecated = version && isOlderVersion(version);
      function formatMessage(opt, desc) {
        return "[Axios v" + pkg.version + "] Transitional option '" + opt + "'" + desc + (message ? ". " + message : "");
      }
      return function(value, opt, opts) {
        if (validator === false) {
          throw new Error(formatMessage(opt, " has been removed in " + version));
        }
        if (isDeprecated && !deprecatedWarnings[opt]) {
          deprecatedWarnings[opt] = true;
          console.warn(
            formatMessage(
              opt,
              " has been deprecated since v" + version + " and will be removed in the near future"
            )
          );
        }
        return validator ? validator(value, opt, opts) : true;
      };
    };
    function assertOptions(options, schema, allowUnknown) {
      if (typeof options !== "object") {
        throw new TypeError("options must be an object");
      }
      var keys = Object.keys(options);
      var i = keys.length;
      while (i-- > 0) {
        var opt = keys[i];
        var validator = schema[opt];
        if (validator) {
          var value = options[opt];
          var result = value === void 0 || validator(value, opt, options);
          if (result !== true) {
            throw new TypeError("option " + opt + " must be " + result);
          }
          continue;
        }
        if (allowUnknown !== true) {
          throw Error("Unknown option " + opt);
        }
      }
    }
    module.exports = {
      isOlderVersion,
      assertOptions,
      validators
    };
  }
});

// node_modules/axios/lib/core/Axios.js
var require_Axios = __commonJS({
  "node_modules/axios/lib/core/Axios.js"(exports, module) {
    "use strict";
    var utils = require_utils();
    var buildURL = require_buildURL();
    var InterceptorManager = require_InterceptorManager();
    var dispatchRequest = require_dispatchRequest();
    var mergeConfig = require_mergeConfig();
    var validator = require_validator();
    var validators = validator.validators;
    function Axios(instanceConfig) {
      this.defaults = instanceConfig;
      this.interceptors = {
        request: new InterceptorManager(),
        response: new InterceptorManager()
      };
    }
    Axios.prototype.request = function request(config) {
      if (typeof config === "string") {
        config = arguments[1] || {};
        config.url = arguments[0];
      } else {
        config = config || {};
      }
      config = mergeConfig(this.defaults, config);
      if (config.method) {
        config.method = config.method.toLowerCase();
      } else if (this.defaults.method) {
        config.method = this.defaults.method.toLowerCase();
      } else {
        config.method = "get";
      }
      var transitional = config.transitional;
      if (transitional !== void 0) {
        validator.assertOptions(transitional, {
          silentJSONParsing: validators.transitional(validators.boolean, "1.0.0"),
          forcedJSONParsing: validators.transitional(validators.boolean, "1.0.0"),
          clarifyTimeoutError: validators.transitional(validators.boolean, "1.0.0")
        }, false);
      }
      var requestInterceptorChain = [];
      var synchronousRequestInterceptors = true;
      this.interceptors.request.forEach(function unshiftRequestInterceptors(interceptor) {
        if (typeof interceptor.runWhen === "function" && interceptor.runWhen(config) === false) {
          return;
        }
        synchronousRequestInterceptors = synchronousRequestInterceptors && interceptor.synchronous;
        requestInterceptorChain.unshift(interceptor.fulfilled, interceptor.rejected);
      });
      var responseInterceptorChain = [];
      this.interceptors.response.forEach(function pushResponseInterceptors(interceptor) {
        responseInterceptorChain.push(interceptor.fulfilled, interceptor.rejected);
      });
      var promise;
      if (!synchronousRequestInterceptors) {
        var chain = [dispatchRequest, void 0];
        Array.prototype.unshift.apply(chain, requestInterceptorChain);
        chain = chain.concat(responseInterceptorChain);
        promise = Promise.resolve(config);
        while (chain.length) {
          promise = promise.then(chain.shift(), chain.shift());
        }
        return promise;
      }
      var newConfig = config;
      while (requestInterceptorChain.length) {
        var onFulfilled = requestInterceptorChain.shift();
        var onRejected = requestInterceptorChain.shift();
        try {
          newConfig = onFulfilled(newConfig);
        } catch (error) {
          onRejected(error);
          break;
        }
      }
      try {
        promise = dispatchRequest(newConfig);
      } catch (error) {
        return Promise.reject(error);
      }
      while (responseInterceptorChain.length) {
        promise = promise.then(responseInterceptorChain.shift(), responseInterceptorChain.shift());
      }
      return promise;
    };
    Axios.prototype.getUri = function getUri(config) {
      config = mergeConfig(this.defaults, config);
      return buildURL(config.url, config.params, config.paramsSerializer).replace(/^\?/, "");
    };
    utils.forEach(["delete", "get", "head", "options"], function forEachMethodNoData(method) {
      Axios.prototype[method] = function(url, config) {
        return this.request(mergeConfig(config || {}, {
          method,
          url,
          data: (config || {}).data
        }));
      };
    });
    utils.forEach(["post", "put", "patch"], function forEachMethodWithData(method) {
      Axios.prototype[method] = function(url, data, config) {
        return this.request(mergeConfig(config || {}, {
          method,
          url,
          data
        }));
      };
    });
    module.exports = Axios;
  }
});

// node_modules/axios/lib/cancel/Cancel.js
var require_Cancel = __commonJS({
  "node_modules/axios/lib/cancel/Cancel.js"(exports, module) {
    "use strict";
    function Cancel(message) {
      this.message = message;
    }
    Cancel.prototype.toString = function toString() {
      return "Cancel" + (this.message ? ": " + this.message : "");
    };
    Cancel.prototype.__CANCEL__ = true;
    module.exports = Cancel;
  }
});

// node_modules/axios/lib/cancel/CancelToken.js
var require_CancelToken = __commonJS({
  "node_modules/axios/lib/cancel/CancelToken.js"(exports, module) {
    "use strict";
    var Cancel = require_Cancel();
    function CancelToken(executor) {
      if (typeof executor !== "function") {
        throw new TypeError("executor must be a function.");
      }
      var resolvePromise;
      this.promise = new Promise(function promiseExecutor(resolve) {
        resolvePromise = resolve;
      });
      var token = this;
      executor(function cancel(message) {
        if (token.reason) {
          return;
        }
        token.reason = new Cancel(message);
        resolvePromise(token.reason);
      });
    }
    CancelToken.prototype.throwIfRequested = function throwIfRequested() {
      if (this.reason) {
        throw this.reason;
      }
    };
    CancelToken.source = function source() {
      var cancel;
      var token = new CancelToken(function executor(c) {
        cancel = c;
      });
      return {
        token,
        cancel
      };
    };
    module.exports = CancelToken;
  }
});

// node_modules/axios/lib/helpers/spread.js
var require_spread = __commonJS({
  "node_modules/axios/lib/helpers/spread.js"(exports, module) {
    "use strict";
    module.exports = function spread(callback) {
      return function wrap2(arr) {
        return callback.apply(null, arr);
      };
    };
  }
});

// node_modules/axios/lib/helpers/isAxiosError.js
var require_isAxiosError = __commonJS({
  "node_modules/axios/lib/helpers/isAxiosError.js"(exports, module) {
    "use strict";
    module.exports = function isAxiosError(payload) {
      return typeof payload === "object" && payload.isAxiosError === true;
    };
  }
});

// node_modules/axios/lib/axios.js
var require_axios = __commonJS({
  "node_modules/axios/lib/axios.js"(exports, module) {
    "use strict";
    var utils = require_utils();
    var bind = require_bind();
    var Axios = require_Axios();
    var mergeConfig = require_mergeConfig();
    var defaults = require_defaults();
    function createInstance(defaultConfig) {
      var context = new Axios(defaultConfig);
      var instance = bind(Axios.prototype.request, context);
      utils.extend(instance, Axios.prototype, context);
      utils.extend(instance, context);
      return instance;
    }
    var axios2 = createInstance(defaults);
    axios2.Axios = Axios;
    axios2.create = function create(instanceConfig) {
      return createInstance(mergeConfig(axios2.defaults, instanceConfig));
    };
    axios2.Cancel = require_Cancel();
    axios2.CancelToken = require_CancelToken();
    axios2.isCancel = require_isCancel();
    axios2.all = function all(promises) {
      return Promise.all(promises);
    };
    axios2.spread = require_spread();
    axios2.isAxiosError = require_isAxiosError();
    module.exports = axios2;
    module.exports.default = axios2;
  }
});

// node_modules/axios/index.js
var require_axios2 = __commonJS({
  "node_modules/axios/index.js"(exports, module) {
    module.exports = require_axios();
  }
});

// node_modules/@sitecore-jss/sitecore-jss/dist/cjs/utils/is-server.js
var require_is_server = __commonJS({
  "node_modules/@sitecore-jss/sitecore-jss/dist/cjs/utils/is-server.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    function isServer2() {
      return !(typeof window !== "undefined" && window.document);
    }
    exports.default = isServer2;
  }
});

// node_modules/@sitecore-jss/sitecore-jss/dist/cjs/utils/utils.js
var require_utils2 = __commonJS({
  "node_modules/@sitecore-jss/sitecore-jss/dist/cjs/utils/utils.js"(exports) {
    "use strict";
    var __importDefault = exports && exports.__importDefault || function(mod) {
      return mod && mod.__esModule ? mod : { "default": mod };
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.isTimeoutError = exports.isAbsoluteUrl = exports.resolveUrl = void 0;
    var is_server_1 = __importDefault(require_is_server());
    function getQueryString(params) {
      return Object.keys(params).map((k3) => `${encodeURIComponent(k3)}=${encodeURIComponent(String(params[k3]))}`).join("&");
    }
    function resolveUrl2(urlBase, params = {}) {
      if (!urlBase) {
        throw new RangeError("url must be a non-empty string");
      }
      if ((0, is_server_1.default)()) {
        const url = new URL(urlBase);
        for (const key in params) {
          if ({}.hasOwnProperty.call(params, key)) {
            url.searchParams.append(key, String(params[key]));
          }
        }
        const result2 = url.toString();
        return result2;
      }
      const qs = getQueryString(params);
      const result = urlBase.indexOf("?") !== -1 ? `${urlBase}&${qs}` : `${urlBase}?${qs}`;
      return result;
    }
    exports.resolveUrl = resolveUrl2;
    var isAbsoluteUrl = (url) => {
      if (!url) {
        return false;
      }
      if (typeof url !== "string") {
        throw new TypeError("Expected a string");
      }
      return /^[a-z][a-z0-9+.-]*:/.test(url);
    };
    exports.isAbsoluteUrl = isAbsoluteUrl;
    var isTimeoutError = (error) => {
      var _a2;
      return error.code === "408" || error.code === "ECONNABORTED" || error.code === "ETIMEDOUT" || ((_a2 = error.response) === null || _a2 === void 0 ? void 0 : _a2.status) === 408 || error.name === "AbortError";
    };
    exports.isTimeoutError = isTimeoutError;
  }
});

// node_modules/@sitecore-jss/sitecore-jss/dist/cjs/utils/env.js
var require_env = __commonJS({
  "node_modules/@sitecore-jss/sitecore-jss/dist/cjs/utils/env.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.tryParseEnvValue = void 0;
    var tryParseEnvValue = (envValue, defaultValue) => {
      if (!envValue) {
        return defaultValue;
      }
      if (envValue.startsWith("{") && envValue.endsWith("}")) {
        try {
          return JSON.parse(envValue);
        } catch (error) {
          console.warn("Parsing of env variable failed");
          console.warn(`Attempted to parse ${envValue}`);
          return defaultValue;
        }
      }
      return defaultValue;
    };
    exports.tryParseEnvValue = tryParseEnvValue;
  }
});

// node_modules/@sitecore-jss/sitecore-jss/dist/cjs/utils/editing.js
var require_editing = __commonJS({
  "node_modules/@sitecore-jss/sitecore-jss/dist/cjs/utils/editing.js"(exports) {
    "use strict";
    var __importDefault = exports && exports.__importDefault || function(mod) {
      return mod && mod.__esModule ? mod : { "default": mod };
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.handleEditorAnchors = exports.resetEditorChromes = exports.isEditorActive = exports.HorizonEditor = exports.ChromeRediscoveryGlobalFunctionName = exports.ExperienceEditor = void 0;
    var is_server_1 = __importDefault(require_is_server());
    var ExperienceEditor = class {
      /**
       * Determines whether the current execution context is within a Experience Editor.
       * Experience Editor environment can be identified only in the browser
       * @returns true if executing within a Experience Editor
       */
      static isActive() {
        if ((0, is_server_1.default)()) {
          return false;
        }
        const sc = window.Sitecore;
        return Boolean(sc && sc.PageModes && sc.PageModes.ChromeManager);
      }
      static resetChromes() {
        if ((0, is_server_1.default)()) {
          return;
        }
        window.Sitecore.PageModes.ChromeManager.resetChromes();
      }
    };
    exports.ExperienceEditor = ExperienceEditor;
    exports.ChromeRediscoveryGlobalFunctionName = {
      name: "Sitecore.Horizon.ResetChromes"
    };
    var HorizonEditor2 = class {
      /**
       * Determines whether the current execution context is within a Horizon Editor.
       * Horizon Editor environment can be identified only in the browser
       * @returns true if executing within a Horizon Editor
       */
      static isActive() {
        if ((0, is_server_1.default)()) {
          return false;
        }
        return window.location.search.indexOf("sc_horizon=editor") > -1;
      }
      static resetChromes() {
        if ((0, is_server_1.default)()) {
          return;
        }
        window[exports.ChromeRediscoveryGlobalFunctionName.name] && window[exports.ChromeRediscoveryGlobalFunctionName.name]();
      }
    };
    exports.HorizonEditor = HorizonEditor2;
    var isEditorActive2 = () => {
      return ExperienceEditor.isActive() || HorizonEditor2.isActive();
    };
    exports.isEditorActive = isEditorActive2;
    var resetEditorChromes2 = () => {
      if (ExperienceEditor.isActive()) {
        ExperienceEditor.resetChromes();
      } else if (HorizonEditor2.isActive()) {
        HorizonEditor2.resetChromes();
      }
    };
    exports.resetEditorChromes = resetEditorChromes2;
    var handleEditorAnchors = () => {
      if (!window || !ExperienceEditor.isActive()) {
        return;
      }
      const targetNode = document.querySelector("body");
      const callback = (mutationList) => {
        mutationList.forEach((mutation) => {
          const btns = document.querySelectorAll('.scChromeDropDown > a[href="#"], .scChromeDropDown > a[href="#!"], a[onclick]');
          if (mutation.type === "childList") {
            btns.forEach((link) => {
              link.href = "javascript:void(0);";
            });
          }
          return;
        });
      };
      const observer = new MutationObserver(callback);
      const observerOptions = {
        childList: true,
        subtree: true
      };
      if (targetNode) {
        observer.observe(targetNode, observerOptions);
      }
    };
    exports.handleEditorAnchors = handleEditorAnchors;
  }
});

// node_modules/@sitecore-jss/sitecore-jss/dist/cjs/utils/edit-frame.js
var require_edit_frame = __commonJS({
  "node_modules/@sitecore-jss/sitecore-jss/dist/cjs/utils/edit-frame.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.commandBuilder = exports.mapButtonToCommand = exports.DefaultEditFrameButtons = exports.DefaultEditFrameButton = exports.DefaultEditFrameButtonIds = void 0;
    exports.DefaultEditFrameButtonIds = {
      edit: "{70C4EED5-D4CD-4D7D-9763-80C42504F5E7}"
    };
    exports.DefaultEditFrameButton = {
      insert: {
        header: "Insert New",
        icon: "/~/icon/Office/16x16/insert_from_template.png",
        click: "webedit:new",
        tooltip: "Insert a new item"
      },
      editRelatedItem: {
        header: "Edit the related item",
        icon: "/~/icon/Office/16x16/cubes.png",
        click: "webedit:open",
        tooltip: "Edit the related item in the Content Editor."
      },
      edit: {
        header: "Edit Item",
        icon: "/~/icon/people/16x16/cubes_blue.png",
        fields: ["Title", "Text"],
        tooltip: "Edit the item fields."
      }
    };
    exports.DefaultEditFrameButtons = [
      exports.DefaultEditFrameButton.editRelatedItem,
      exports.DefaultEditFrameButton.insert,
      exports.DefaultEditFrameButton.edit
    ];
    function isWebEditButton(button) {
      return button.click !== void 0;
    }
    function mapButtonToCommand2(button, itemId, frameParameters) {
      if (button === "|" || button.isDivider) {
        return {
          click: "chrome:dummy",
          header: "Separator",
          icon: "",
          isDivider: true,
          tooltip: null,
          type: "separator"
        };
      } else if (isWebEditButton(button)) {
        return commandBuilder(button, itemId, frameParameters);
      } else {
        const fieldsString = button.fields.join("|");
        const editButton = Object.assign({ click: `webedit:fieldeditor(command=${exports.DefaultEditFrameButtonIds.edit},fields=${fieldsString})` }, button);
        return commandBuilder(editButton, itemId, frameParameters);
      }
    }
    exports.mapButtonToCommand = mapButtonToCommand2;
    function commandBuilder(button, itemId, frameParameters) {
      if (!button.click) {
        return Object.assign({ isDivider: false, type: button.type || null, header: button.header || "", icon: button.icon || "", tooltip: button.tooltip || "" }, button);
      } else if (button.click.startsWith("javascript:") || button.click.startsWith("chrome:")) {
        return Object.assign({ isDivider: false, type: button.type || null, header: button.header || "", icon: button.icon || "", tooltip: button.tooltip || "" }, button);
      } else {
        if (!itemId) {
          return Object.assign({ isDivider: false, type: button.type || null, header: button.header || "", icon: button.icon || "", tooltip: button.tooltip || "" }, button);
        } else {
          let message = button.click;
          let parameters = {};
          const length = button.click.indexOf("(");
          if (length >= 0) {
            const end = button.click.indexOf(")");
            if (end < 0) {
              throw new Error('Message with arguments must end with ")".');
            }
            parameters = button.click.substring(length + 1, end).split(",").map((_4) => _4.trim()).reduce((previous, current) => {
              const parts = current.split("=");
              if (parts.length < 2) {
                previous[parts[0]] = "";
              } else {
                previous[parts[0]] = parts[1];
              }
              return previous;
            }, {});
            message = button.click.substring(0, length);
          }
          parameters.id = itemId;
          if (button.parameters) {
            Object.keys(button.parameters).forEach((_4) => {
              var _a2;
              parameters[_4] = ((_a2 = button.parameters[_4]) === null || _a2 === void 0 ? void 0 : _a2.toString()) || "";
            });
          }
          if (frameParameters) {
            Object.keys(frameParameters).forEach((_4) => {
              var _a2;
              parameters[_4] = ((_a2 = frameParameters[_4]) === null || _a2 === void 0 ? void 0 : _a2.toString()) || "";
            });
          }
          const parameterString = Object.keys(parameters).map((_4) => `${_4}=${parameters[_4]}`).join(", ");
          const click = `${message}(${parameterString})`;
          return {
            isDivider: false,
            click: `javascript:Sitecore.PageModes.PageEditor.postRequest('${click}',null,false)`,
            header: button.header || "",
            icon: button.icon || "",
            tooltip: button.tooltip || "",
            type: button.type || null
          };
        }
      }
    }
    exports.commandBuilder = commandBuilder;
  }
});

// node_modules/@sitecore-jss/sitecore-jss/dist/cjs/utils/index.js
var require_utils3 = __commonJS({
  "node_modules/@sitecore-jss/sitecore-jss/dist/cjs/utils/index.js"(exports) {
    "use strict";
    var __importDefault = exports && exports.__importDefault || function(mod) {
      return mod && mod.__esModule ? mod : { "default": mod };
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.mapButtonToCommand = exports.DefaultEditFrameButtonIds = exports.DefaultEditFrameButtons = exports.DefaultEditFrameButton = exports.handleEditorAnchors = exports.resetEditorChromes = exports.isEditorActive = exports.HorizonEditor = exports.ExperienceEditor = exports.tryParseEnvValue = exports.isTimeoutError = exports.isAbsoluteUrl = exports.resolveUrl = exports.isServer = void 0;
    var is_server_1 = require_is_server();
    Object.defineProperty(exports, "isServer", { enumerable: true, get: function() {
      return __importDefault(is_server_1).default;
    } });
    var utils_1 = require_utils2();
    Object.defineProperty(exports, "resolveUrl", { enumerable: true, get: function() {
      return utils_1.resolveUrl;
    } });
    Object.defineProperty(exports, "isAbsoluteUrl", { enumerable: true, get: function() {
      return utils_1.isAbsoluteUrl;
    } });
    Object.defineProperty(exports, "isTimeoutError", { enumerable: true, get: function() {
      return utils_1.isTimeoutError;
    } });
    var env_1 = require_env();
    Object.defineProperty(exports, "tryParseEnvValue", { enumerable: true, get: function() {
      return env_1.tryParseEnvValue;
    } });
    var editing_1 = require_editing();
    Object.defineProperty(exports, "ExperienceEditor", { enumerable: true, get: function() {
      return editing_1.ExperienceEditor;
    } });
    Object.defineProperty(exports, "HorizonEditor", { enumerable: true, get: function() {
      return editing_1.HorizonEditor;
    } });
    Object.defineProperty(exports, "isEditorActive", { enumerable: true, get: function() {
      return editing_1.isEditorActive;
    } });
    Object.defineProperty(exports, "resetEditorChromes", { enumerable: true, get: function() {
      return editing_1.resetEditorChromes;
    } });
    Object.defineProperty(exports, "handleEditorAnchors", { enumerable: true, get: function() {
      return editing_1.handleEditorAnchors;
    } });
    var edit_frame_1 = require_edit_frame();
    Object.defineProperty(exports, "DefaultEditFrameButton", { enumerable: true, get: function() {
      return edit_frame_1.DefaultEditFrameButton;
    } });
    Object.defineProperty(exports, "DefaultEditFrameButtons", { enumerable: true, get: function() {
      return edit_frame_1.DefaultEditFrameButtons;
    } });
    Object.defineProperty(exports, "DefaultEditFrameButtonIds", { enumerable: true, get: function() {
      return edit_frame_1.DefaultEditFrameButtonIds;
    } });
    Object.defineProperty(exports, "mapButtonToCommand", { enumerable: true, get: function() {
      return edit_frame_1.mapButtonToCommand;
    } });
  }
});

// node_modules/@sitecore-jss/sitecore-jss/utils.js
var require_utils4 = __commonJS({
  "node_modules/@sitecore-jss/sitecore-jss/utils.js"(exports, module) {
    module.exports = require_utils3();
  }
});

// node_modules/@sitecore-jss/sitecore-jss/dist/cjs/layout/models.js
var require_models = __commonJS({
  "node_modules/@sitecore-jss/sitecore-jss/dist/cjs/layout/models.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.RenderingType = exports.LayoutServicePageState = exports.EDITING_COMPONENT_ID = exports.EDITING_COMPONENT_PLACEHOLDER = void 0;
    exports.EDITING_COMPONENT_PLACEHOLDER = "editing-componentmode-placeholder";
    exports.EDITING_COMPONENT_ID = "editing-component";
    var LayoutServicePageState3;
    (function(LayoutServicePageState4) {
      LayoutServicePageState4["Preview"] = "preview";
      LayoutServicePageState4["Edit"] = "edit";
      LayoutServicePageState4["Normal"] = "normal";
    })(LayoutServicePageState3 = exports.LayoutServicePageState || (exports.LayoutServicePageState = {}));
    var RenderingType;
    (function(RenderingType2) {
      RenderingType2["Component"] = "component";
    })(RenderingType = exports.RenderingType || (exports.RenderingType = {}));
  }
});

// node_modules/@sitecore-jss/sitecore-jss/dist/cjs/layout/utils.js
var require_utils5 = __commonJS({
  "node_modules/@sitecore-jss/sitecore-jss/dist/cjs/layout/utils.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.getChildPlaceholder = exports.getFieldValue = void 0;
    function getFieldValue3(renderingOrFields, fieldName, defaultValue) {
      if (!renderingOrFields || !fieldName) {
        return defaultValue;
      }
      const fields = renderingOrFields;
      const field = fields[fieldName];
      if (field && typeof field.value !== "undefined") {
        return field.value;
      }
      const rendering = renderingOrFields;
      if (!rendering.fields || !rendering.fields[fieldName] || typeof rendering.fields[fieldName].value === "undefined") {
        return defaultValue;
      }
      return rendering.fields[fieldName].value;
    }
    exports.getFieldValue = getFieldValue3;
    function getChildPlaceholder2(rendering, placeholderName) {
      if (!rendering || !placeholderName || !rendering.placeholders || !rendering.placeholders[placeholderName]) {
        return [];
      }
      return rendering.placeholders[placeholderName];
    }
    exports.getChildPlaceholder = getChildPlaceholder2;
  }
});

// node_modules/@sitecore-jss/sitecore-jss/dist/cjs/constants.js
var require_constants = __commonJS({
  "node_modules/@sitecore-jss/sitecore-jss/dist/cjs/constants.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.SITECORE_EDGE_URL_DEFAULT = exports.siteNameError = exports.JSS_MODE = exports.FETCH_WITH = exports.SitecoreTemplateId = void 0;
    var SitecoreTemplateId2;
    (function(SitecoreTemplateId3) {
      SitecoreTemplateId3["JssApp"] = "061cba1554744b918a0617903b102b82";
      SitecoreTemplateId3["DictionaryEntry"] = "6d1cd89719364a3aa511289a94c2a7b1";
    })(SitecoreTemplateId2 = exports.SitecoreTemplateId || (exports.SitecoreTemplateId = {}));
    exports.FETCH_WITH = {
      GRAPHQL: "GraphQL",
      REST: "Rest"
    };
    exports.JSS_MODE = {
      CONNECTED: "connected",
      DISCONNECTED: "disconnected"
    };
    exports.siteNameError = "The siteName cannot be empty";
    exports.SITECORE_EDGE_URL_DEFAULT = "https://edge-platform.sitecorecloud.io";
  }
});

// node_modules/@sitecore-jss/sitecore-jss/dist/cjs/layout/content-styles.js
var require_content_styles = __commonJS({
  "node_modules/@sitecore-jss/sitecore-jss/dist/cjs/layout/content-styles.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.traverseComponent = exports.traverseField = exports.traversePlaceholder = exports.getContentStylesheetUrl = exports.getContentStylesheetLink = void 0;
    var constants_1 = require_constants();
    var CLASS_REGEXP = /class=".*(\bck-content\b).*"/g;
    var getContentStylesheetLink2 = (layoutData, sitecoreEdgeContextId, sitecoreEdgeUrl = constants_1.SITECORE_EDGE_URL_DEFAULT) => {
      if (!layoutData.sitecore.route)
        return null;
      const config = { loadStyles: false };
      (0, exports.traverseComponent)(layoutData.sitecore.route, config);
      if (!config.loadStyles)
        return null;
      return {
        href: (0, exports.getContentStylesheetUrl)(sitecoreEdgeContextId, sitecoreEdgeUrl),
        rel: "stylesheet"
      };
    };
    exports.getContentStylesheetLink = getContentStylesheetLink2;
    var getContentStylesheetUrl = (sitecoreEdgeContextId, sitecoreEdgeUrl = constants_1.SITECORE_EDGE_URL_DEFAULT) => `${sitecoreEdgeUrl}/v1/files/pages/styles/content-styles.css?sitecoreContextId=${sitecoreEdgeContextId}`;
    exports.getContentStylesheetUrl = getContentStylesheetUrl;
    var traversePlaceholder = (components, config) => {
      if (config.loadStyles)
        return;
      components.forEach((component) => {
        (0, exports.traverseComponent)(component, config);
      });
    };
    exports.traversePlaceholder = traversePlaceholder;
    var traverseField = (field, config) => {
      if (!field || config.loadStyles)
        return;
      if ("editable" in field && field.editable) {
        config.loadStyles = CLASS_REGEXP.test(field.editable);
      } else if ("value" in field && typeof field.value === "string") {
        config.loadStyles = CLASS_REGEXP.test(field.value);
      } else if ("fields" in field) {
        Object.values(field.fields).forEach((field2) => {
          (0, exports.traverseField)(field2, config);
        });
      } else if (Array.isArray(field)) {
        field.forEach((field2) => {
          (0, exports.traverseField)(field2, config);
        });
      }
    };
    exports.traverseField = traverseField;
    var traverseComponent = (component, config) => {
      if (config.loadStyles)
        return;
      if ("fields" in component && component.fields) {
        Object.values(component.fields).forEach((field) => {
          (0, exports.traverseField)(field, config);
        });
      }
      const placeholders = component.placeholders || {};
      Object.keys(placeholders).forEach((placeholder) => {
        (0, exports.traversePlaceholder)(placeholders[placeholder], config);
      });
    };
    exports.traverseComponent = traverseComponent;
  }
});

// node_modules/@sitecore-jss/sitecore-jss/dist/cjs/layout/layout-service.js
var require_layout_service = __commonJS({
  "node_modules/@sitecore-jss/sitecore-jss/dist/cjs/layout/layout-service.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.LayoutServiceBase = void 0;
    var LayoutServiceBase = class {
    };
    exports.LayoutServiceBase = LayoutServiceBase;
  }
});

// node_modules/@sitecore-jss/sitecore-jss/dist/cjs/debug.js
var require_debug = __commonJS({
  "node_modules/@sitecore-jss/sitecore-jss/dist/cjs/debug.js"(exports) {
    "use strict";
    var __importDefault = exports && exports.__importDefault || function(mod) {
      return mod && mod.__esModule ? mod : { "default": mod };
    };
    var _a2;
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.enableDebug = void 0;
    var debug_1 = __importDefault(require_browser());
    var is_server_1 = __importDefault(require_is_server());
    var rootNamespace2 = "sitecore-jss";
    if ((0, is_server_1.default)() && ((_a2 = process === null || process === void 0 ? void 0 : process.env) === null || _a2 === void 0 ? void 0 : _a2.DEBUG_MULTILINE) === "true" && debug_1.default.formatters.o && debug_1.default.formatters.O) {
      debug_1.default.formatters.o = debug_1.default.formatters.O;
    }
    var enableDebug2 = (namespaces) => debug_1.default.enable(namespaces);
    exports.enableDebug = enableDebug2;
    exports.default = {
      common: (0, debug_1.default)(`${rootNamespace2}:common`),
      http: (0, debug_1.default)(`${rootNamespace2}:http`),
      layout: (0, debug_1.default)(`${rootNamespace2}:layout`),
      dictionary: (0, debug_1.default)(`${rootNamespace2}:dictionary`),
      editing: (0, debug_1.default)(`${rootNamespace2}:editing`),
      sitemap: (0, debug_1.default)(`${rootNamespace2}:sitemap`),
      multisite: (0, debug_1.default)(`${rootNamespace2}:multisite`),
      robots: (0, debug_1.default)(`${rootNamespace2}:robots`),
      redirects: (0, debug_1.default)(`${rootNamespace2}:redirects`),
      personalize: (0, debug_1.default)(`${rootNamespace2}:personalize`),
      errorpages: (0, debug_1.default)(`${rootNamespace2}:errorpages`)
    };
  }
});

// node_modules/@sitecore-jss/sitecore-jss/dist/cjs/axios-fetcher.js
var require_axios_fetcher = __commonJS({
  "node_modules/@sitecore-jss/sitecore-jss/dist/cjs/axios-fetcher.js"(exports) {
    "use strict";
    var __rest9 = exports && exports.__rest || function(s2, e) {
      var t2 = {};
      for (var p in s2) if (Object.prototype.hasOwnProperty.call(s2, p) && e.indexOf(p) < 0)
        t2[p] = s2[p];
      if (s2 != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s2); i < p.length; i++) {
          if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s2, p[i]))
            t2[p[i]] = s2[p[i]];
        }
      return t2;
    };
    var __importDefault = exports && exports.__importDefault || function(mod) {
      return mod && mod.__esModule ? mod : { "default": mod };
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.AxiosDataFetcher = void 0;
    var axios_1 = __importDefault(require_axios2());
    var debug_1 = __importDefault(require_debug());
    var isAxiosError = (error) => {
      return error.isAxiosError !== void 0;
    };
    var AxiosDataFetcher2 = class {
      /**
       * @param {AxiosDataFetcherConfig} dataFetcherConfig Axios data fetcher configuration.
       * Note `withCredentials` is set to `true` by default in order for Sitecore cookies to
       * be included in CORS requests (which is necessary for analytics and such).
       */
      constructor(dataFetcherConfig = {}) {
        const { onReq, onRes, onReqError, onResError, debugger: debuggerOverride } = dataFetcherConfig, axiosConfig = __rest9(dataFetcherConfig, ["onReq", "onRes", "onReqError", "onResError", "debugger"]);
        if (axiosConfig.withCredentials === void 0) {
          axiosConfig.withCredentials = true;
        }
        this.instance = axios_1.default.create(axiosConfig);
        const debug2 = debuggerOverride || debug_1.default.http;
        if (debug2.enabled) {
          this.instance.interceptors.request.use((config) => {
            debug2("request: %o", config);
            config.headers.timestamp = Date.now();
            return config;
          }, (error) => {
            debug2("request error: %o", isAxiosError(error) ? error.toJSON() : error);
            return Promise.reject(error);
          });
        }
        if (onReq) {
          this.instance.interceptors.request.use(onReq, onReqError);
        }
        if (onRes) {
          this.instance.interceptors.response.use(onRes, onResError);
        }
        if (debug2.enabled) {
          this.instance.interceptors.response.use((response) => {
            const { request, config } = response, rest = __rest9(response, ["request", "config"]);
            const duration = Date.now() - config.headers.timestamp;
            delete response.config.headers.timestamp;
            debug2("response in %dms: %o", duration, rest);
            return response;
          }, (error) => {
            debug2("response error: %o", isAxiosError(error) ? error.toJSON() : error);
            return Promise.reject(error);
          });
        }
      }
      /**
       * Implements a data fetcher. @see HttpDataFetcher<T> type for implementation details/notes.
       * @param {string} url The URL to request; may include query string
       * @param {unknown} [data] Optional data to POST with the request.
       * @returns {Promise<AxiosResponse<T>>} response
       */
      fetch(url, data) {
        return this.instance.request({
          url,
          method: data ? "POST" : "GET",
          data
        });
      }
      /**
       * Perform a GET request
       * @param {string} url The URL to request; may include query string
       * @param {AxiosRequestConfig} [config] Axios config
       * @returns {Promise<AxiosResponse<T>>} response
       */
      get(url, config) {
        return this.instance.get(url, config);
      }
      /**
       * Perform a HEAD request
       * @param {string} url The URL to request; may include query string
       * @param {AxiosRequestConfig} [config] Axios config
       * @returns {Promise<AxiosResponse>} response
       */
      head(url, config) {
        return this.instance.head(url, config);
      }
      /**
       * Perform a POST request
       * @param {string} url The URL to request; may include query string
       * @param {unknown} [data] Data to POST with the request.
       * @param {AxiosRequestConfig} [config] Axios config
       * @returns {Promise<AxiosResponse>} response
       */
      post(url, data, config) {
        return this.instance.post(url, data, config);
      }
      /**
       * Perform a PUT request
       * @param {string} url The URL to request; may include query string
       * @param {unknown} [data] Data to PUT with the request.
       * @param {AxiosRequestConfig} [config] Axios config
       * @returns {Promise<AxiosResponse>} response
       */
      put(url, data, config) {
        return this.instance.put(url, data, config);
      }
      /**
       * Perform a DELETE request
       * @param {string} url The URL to request; may include query string
       * @param {AxiosRequestConfig} [config] Axios config
       * @returns {Promise<AxiosResponse>} response
       */
      delete(url, config) {
        return this.instance.delete(url, config);
      }
    };
    exports.AxiosDataFetcher = AxiosDataFetcher2;
  }
});

// node_modules/@sitecore-jss/sitecore-jss/dist/cjs/data-fetcher.js
var require_data_fetcher = __commonJS({
  "node_modules/@sitecore-jss/sitecore-jss/dist/cjs/data-fetcher.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.fetchData = exports.checkStatus = exports.ResponseError = void 0;
    var utils_1 = require_utils2();
    var ResponseError = class _ResponseError extends Error {
      constructor(message, response) {
        super(message);
        Object.setPrototypeOf(this, _ResponseError.prototype);
        this.response = response;
      }
    };
    exports.ResponseError = ResponseError;
    function checkStatus(response) {
      if (response.status >= 200 && response.status < 300) {
        return response;
      }
      const error = new ResponseError(response.statusText, response);
      throw error;
    }
    exports.checkStatus = checkStatus;
    function fetchData3(url, fetcher, params = {}) {
      return fetcher((0, utils_1.resolveUrl)(url, params)).then(checkStatus).then((response) => {
        return response.data;
      });
    }
    exports.fetchData = fetchData3;
  }
});

// node_modules/@sitecore-jss/sitecore-jss/dist/cjs/layout/rest-layout-service.js
var require_rest_layout_service = __commonJS({
  "node_modules/@sitecore-jss/sitecore-jss/dist/cjs/layout/rest-layout-service.js"(exports) {
    "use strict";
    var __importDefault = exports && exports.__importDefault || function(mod) {
      return mod && mod.__esModule ? mod : { "default": mod };
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.RestLayoutService = void 0;
    var layout_service_1 = require_layout_service();
    var axios_fetcher_1 = require_axios_fetcher();
    var data_fetcher_1 = require_data_fetcher();
    var debug_1 = __importDefault(require_debug());
    var RestLayoutService2 = class extends layout_service_1.LayoutServiceBase {
      constructor(serviceConfig) {
        super();
        this.serviceConfig = serviceConfig;
        this.getFetchParams = (language) => {
          var _a2;
          return {
            sc_apikey: this.serviceConfig.apiKey,
            sc_site: this.serviceConfig.siteName,
            sc_lang: language || "",
            tracking: (_a2 = this.serviceConfig.tracking) !== null && _a2 !== void 0 ? _a2 : true
          };
        };
        this.getDefaultFetcher = (req, res) => {
          const config = {
            debugger: debug_1.default.layout
          };
          if (req && res) {
            config.onReq = this.setupReqHeaders(req);
            config.onRes = this.setupResHeaders(res);
          }
          const axiosFetcher = new axios_fetcher_1.AxiosDataFetcher(config);
          const fetcher = (url, data) => {
            return axiosFetcher.fetch(url, data);
          };
          return fetcher;
        };
      }
      /**
       * Fetch layout data for an item.
       * @param {string} itemPath item path to fetch layout data for.
       * @param {string} [language] the language to fetch layout data for.
       * @param {IncomingMessage} [req] Request instance
       * @param {ServerResponse} [res] Response instance
       * @returns {Promise<LayoutServiceData>} layout service data
       * @throws {Error} the item with the specified path is not found
       */
      fetchLayoutData(itemPath, language, req, res) {
        const querystringParams = this.getFetchParams(language);
        debug_1.default.layout("fetching layout data for %s %s %s", itemPath, language, this.serviceConfig.siteName);
        const fetcher = this.serviceConfig.dataFetcherResolver ? this.serviceConfig.dataFetcherResolver(req, res) : this.getDefaultFetcher(req, res);
        const fetchUrl = this.resolveLayoutServiceUrl("render");
        return (0, data_fetcher_1.fetchData)(fetchUrl, fetcher, Object.assign({ item: itemPath }, querystringParams)).catch((error) => {
          var _a2;
          if (((_a2 = error.response) === null || _a2 === void 0 ? void 0 : _a2.status) === 404) {
            return error.response.data;
          }
          throw error;
        });
      }
      /**
       * Fetch layout data for a particular placeholder.
       * Makes a request to Sitecore Layout Service for the specified placeholder in
       * a specific route item. Allows you to retrieve rendered data for individual placeholders instead of entire routes.
       * @param {string} placeholderName the name of the placeholder to fetch layout data for.
       * @param {string} itemPath the path to the item to fetch layout data for.
       * @param {string} [language] the language to fetch data for.
       * @param {IncomingMessage} [req] Request instance
       * @param {ServerResponse} [res] Response instance
       * @returns {Promise<PlaceholderData>} placeholder data
       */
      fetchPlaceholderData(placeholderName, itemPath, language, req, res) {
        const querystringParams = this.getFetchParams(language);
        debug_1.default.layout("fetching placeholder data for %s %s %s %s", placeholderName, itemPath, language, this.serviceConfig.siteName);
        const fetcher = this.serviceConfig.dataFetcherResolver ? this.serviceConfig.dataFetcherResolver(req, res) : this.getDefaultFetcher(req, res);
        const fetchUrl = this.resolveLayoutServiceUrl("placeholder");
        return (0, data_fetcher_1.fetchData)(fetchUrl, fetcher, Object.assign({ placeholderName, item: itemPath }, querystringParams));
      }
      /**
       * Resolves layout service url
       * @param {string} apiType which layout service API to call ('render' or 'placeholder')
       * @returns the layout service url
       */
      resolveLayoutServiceUrl(apiType) {
        const { apiHost = "", configurationName = "jss" } = this.serviceConfig;
        return `${apiHost}/sitecore/api/layout/${apiType}/${configurationName}`;
      }
      /**
       * Setup request headers
       * @param {IncomingMessage} req Request instance
       * @returns {AxiosRequestConfig} axios request config
       */
      setupReqHeaders(req) {
        return (reqConfig) => {
          debug_1.default.layout("performing request header passing");
          reqConfig.headers.common = Object.assign(Object.assign(Object.assign(Object.assign(Object.assign({}, reqConfig.headers.common), req.headers.cookie && { cookie: req.headers.cookie }), req.headers.referer && { referer: req.headers.referer }), req.headers["user-agent"] && { "user-agent": req.headers["user-agent"] }), req.connection.remoteAddress && { "X-Forwarded-For": req.connection.remoteAddress });
          return reqConfig;
        };
      }
      /**
       * Setup response headers based on response from layout service
       * @param {ServerResponse} res Response instance
       * @returns {AxiosResponse} response
       */
      setupResHeaders(res) {
        return (serverRes) => {
          debug_1.default.layout("performing response header passing");
          serverRes.headers["set-cookie"] && res.setHeader("set-cookie", serverRes.headers["set-cookie"]);
          return serverRes;
        };
      }
    };
    exports.RestLayoutService = RestLayoutService2;
  }
});

// node_modules/@sitecore-jss/sitecore-jss/dist/cjs/utils/timeout-promise.js
var require_timeout_promise = __commonJS({
  "node_modules/@sitecore-jss/sitecore-jss/dist/cjs/utils/timeout-promise.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var TimeoutPromise2 = class {
      constructor(timeout) {
        this.timeout = timeout;
        this.timeoutId = void 0;
      }
      /**
       * Creates a timeout promise
       */
      get start() {
        return new Promise((_4, reject) => {
          this.timeoutId = setTimeout(() => {
            const abortError = new Error(`Request timed out, timeout of ${this.timeout}ms is exceeded`);
            abortError.name = "AbortError";
            reject(abortError);
          }, this.timeout);
        });
      }
      /**
       * Clears the timeout from timeout promise
       */
      clear() {
        this.timeoutId && clearTimeout(this.timeoutId);
      }
    };
    exports.default = TimeoutPromise2;
  }
});

// node_modules/@sitecore-jss/sitecore-jss/dist/cjs/graphql-request-client.js
var require_graphql_request_client = __commonJS({
  "node_modules/@sitecore-jss/sitecore-jss/dist/cjs/graphql-request-client.js"(exports) {
    "use strict";
    var __awaiter3 = exports && exports.__awaiter || function(thisArg, _arguments, P2, generator) {
      function adopt(value) {
        return value instanceof P2 ? value : new P2(function(resolve) {
          resolve(value);
        });
      }
      return new (P2 || (P2 = Promise))(function(resolve, reject) {
        function fulfilled(value) {
          try {
            step(generator.next(value));
          } catch (e) {
            reject(e);
          }
        }
        function rejected(value) {
          try {
            step(generator["throw"](value));
          } catch (e) {
            reject(e);
          }
        }
        function step(result) {
          result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
      });
    };
    var __importDefault = exports && exports.__importDefault || function(mod) {
      return mod && mod.__esModule ? mod : { "default": mod };
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.GraphQLRequestClient = exports.DefaultRetryStrategy = void 0;
    var graphql_request_1 = require_dist();
    var url_parse_1 = __importDefault(require_url_parse());
    var debug_1 = __importDefault(require_debug());
    var timeout_promise_1 = __importDefault(require_timeout_promise());
    var DefaultRetryStrategy3 = class {
      /**
       * @param {Object} options Configurable options for retry mechanism.
       * @param {number[]} [options.statusCodes] HTTP status codes to trigger retries on. Default is [429].
       * @param {string[]} [options.errorCodes] Node error codes to trigger retries. Default is ['ECONNRESET', 'ETIMEDOUT', 'EPROTO'].
       * @param {number} [options.factor] Factor by which the delay increases with each retry attempt. Default is 2.
       */
      constructor(options = {}) {
        this.statusCodes = options.statusCodes || [429];
        this.errorCodes = options.errorCodes || ["ECONNRESET", "ETIMEDOUT", "EPROTO"];
        this.factor = options.factor || 2;
      }
      shouldRetry(error, attempt, retries) {
        var _a2;
        const isStatusCodeError = ((_a2 = error.response) === null || _a2 === void 0 ? void 0 : _a2.status) !== void 0 && this.statusCodes.includes(error.response.status);
        const isNodeErrorCode = error.code !== void 0 && this.errorCodes.includes(error.code);
        return retries > 0 && attempt <= retries && (isStatusCodeError || isNodeErrorCode);
      }
      getDelay(error, attempt) {
        var _a2;
        const rawHeaders = (_a2 = error.response) === null || _a2 === void 0 ? void 0 : _a2.headers;
        const retryAfterHeader = rawHeaders === null || rawHeaders === void 0 ? void 0 : rawHeaders.get("Retry-After");
        if (retryAfterHeader !== null && retryAfterHeader !== void 0 && retryAfterHeader.trim() !== "") {
          const delaySeconds = Number.parseFloat(retryAfterHeader);
          return delaySeconds * 1e3;
        } else {
          return Math.pow(this.factor, attempt - 1) * 1e3;
        }
      }
    };
    exports.DefaultRetryStrategy = DefaultRetryStrategy3;
    var GraphQLRequestClient2 = class _GraphQLRequestClient {
      /**
       * Provides ability to execute graphql query using given `endpoint`
       * @param {string} endpoint The Graphql endpoint
       * @param {GraphQLRequestClientConfig} [clientConfig] GraphQL request client configuration.
       */
      constructor(endpoint, clientConfig = {}) {
        var _a2;
        this.endpoint = endpoint;
        this.headers = {};
        if (clientConfig.apiKey) {
          this.headers.sc_apikey = clientConfig.apiKey;
        }
        if (!endpoint || !(0, url_parse_1.default)(endpoint).hostname) {
          throw new Error(`Invalid GraphQL endpoint '${endpoint}'. Verify that 'layoutServiceHost' property in 'scjssconfig.json' file or appropriate environment variable is set`);
        }
        this.timeout = clientConfig.timeout;
        this.retries = (_a2 = clientConfig.retries) !== null && _a2 !== void 0 ? _a2 : 3;
        this.retryStrategy = clientConfig.retryStrategy || new DefaultRetryStrategy3({ statusCodes: [429, 502, 503, 504, 520, 521, 522, 523, 524] });
        this.client = new graphql_request_1.GraphQLClient(endpoint, {
          headers: this.headers,
          fetch: clientConfig.fetch
        });
        this.debug = clientConfig.debugger || debug_1.default.http;
      }
      /**
       * Factory method for creating a GraphQLRequestClientFactory.
       * @param {Object} config - client configuration options.
       * @param {string} config.endpoint - endpoint
       * @param {string} [config.apiKey] - apikey
       */
      static createClientFactory({ endpoint, apiKey }) {
        return (config = {}) => new _GraphQLRequestClient(endpoint, Object.assign(Object.assign({}, config), { apiKey }));
      }
      /**
       * Execute graphql request
       * @param {string | DocumentNode} query graphql query
       * @param {Object} variables graphql variables
       */
      request(query, variables) {
        return __awaiter3(this, void 0, void 0, function* () {
          let attempt = 1;
          const retryer = () => __awaiter3(this, void 0, void 0, function* () {
            this.debug("request: %o", {
              url: this.endpoint,
              headers: this.headers,
              query,
              variables
            });
            const startTimestamp = Date.now();
            const fetchWithOptionalTimeout = [this.client.request(query, variables)];
            if (this.timeout) {
              this.abortTimeout = new timeout_promise_1.default(this.timeout);
              fetchWithOptionalTimeout.push(this.abortTimeout.start);
            }
            return Promise.race(fetchWithOptionalTimeout).then((data) => {
              var _a2;
              (_a2 = this.abortTimeout) === null || _a2 === void 0 ? void 0 : _a2.clear();
              this.debug("response in %dms: %o", Date.now() - startTimestamp, data);
              return Promise.resolve(data);
            }, (error) => __awaiter3(this, void 0, void 0, function* () {
              var _a2, _b;
              (_a2 = this.abortTimeout) === null || _a2 === void 0 ? void 0 : _a2.clear();
              this.debug("response error: %o", error.response || error.message || error);
              const status2 = ((_b = error.response) === null || _b === void 0 ? void 0 : _b.status) || error.code;
              const shouldRetry = this.retryStrategy.shouldRetry(error, attempt, this.retries);
              if (shouldRetry) {
                const delayMs = this.retryStrategy.getDelay(error, attempt);
                this.debug("Error: %s. Retrying in %dms (attempt %d).", status2, delayMs, attempt);
                attempt++;
                return new Promise((resolve) => setTimeout(resolve, delayMs)).then(retryer);
              } else {
                return Promise.reject(error);
              }
            }));
          });
          return retryer();
        });
      }
    };
    exports.GraphQLRequestClient = GraphQLRequestClient2;
  }
});

// node_modules/@sitecore-jss/sitecore-jss/dist/cjs/layout/graphql-layout-service.js
var require_graphql_layout_service = __commonJS({
  "node_modules/@sitecore-jss/sitecore-jss/dist/cjs/layout/graphql-layout-service.js"(exports) {
    "use strict";
    var __awaiter3 = exports && exports.__awaiter || function(thisArg, _arguments, P2, generator) {
      function adopt(value) {
        return value instanceof P2 ? value : new P2(function(resolve) {
          resolve(value);
        });
      }
      return new (P2 || (P2 = Promise))(function(resolve, reject) {
        function fulfilled(value) {
          try {
            step(generator.next(value));
          } catch (e) {
            reject(e);
          }
        }
        function rejected(value) {
          try {
            step(generator["throw"](value));
          } catch (e) {
            reject(e);
          }
        }
        function step(result) {
          result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
      });
    };
    var __importDefault = exports && exports.__importDefault || function(mod) {
      return mod && mod.__esModule ? mod : { "default": mod };
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.GraphQLLayoutService = void 0;
    var layout_service_1 = require_layout_service();
    var graphql_request_client_1 = require_graphql_request_client();
    var debug_1 = __importDefault(require_debug());
    var GraphQLLayoutService2 = class extends layout_service_1.LayoutServiceBase {
      /**
       * Fetch layout data using the Sitecore GraphQL endpoint.
       * @param {GraphQLLayoutServiceConfig} serviceConfig configuration
       */
      constructor(serviceConfig) {
        super();
        this.serviceConfig = serviceConfig;
        this.graphQLClient = this.getGraphQLClient();
      }
      /**
       * Fetch layout data for an item.
       * @param {string} itemPath item path to fetch layout data for.
       * @param {string} [language] the language to fetch layout data for.
       * @returns {Promise<LayoutServiceData>} layout service data
       */
      fetchLayoutData(itemPath, language) {
        var _a2, _b;
        return __awaiter3(this, void 0, void 0, function* () {
          const query = this.getLayoutQuery(itemPath, language);
          debug_1.default.layout("fetching layout data for %s %s %s", itemPath, language, this.serviceConfig.siteName);
          const data = yield this.graphQLClient.request(query);
          return ((_b = (_a2 = data === null || data === void 0 ? void 0 : data.layout) === null || _a2 === void 0 ? void 0 : _a2.item) === null || _b === void 0 ? void 0 : _b.rendered) || {
            sitecore: { context: { pageEditing: false, language }, route: null }
          };
        });
      }
      /**
       * Gets a GraphQL client that can make requests to the API. Uses graphql-request as the default
       * library for fetching graphql data (@see GraphQLRequestClient). Override this method if you
       * want to use something else.
       * @returns {GraphQLClient} implementation
       */
      getGraphQLClient() {
        if (!this.serviceConfig.endpoint) {
          if (!this.serviceConfig.clientFactory) {
            throw new Error("You should provide either an endpoint and apiKey, or a clientFactory.");
          }
          return this.serviceConfig.clientFactory({
            debugger: debug_1.default.layout,
            retries: this.serviceConfig.retries,
            retryStrategy: this.serviceConfig.retryStrategy
          });
        }
        return new graphql_request_client_1.GraphQLRequestClient(this.serviceConfig.endpoint, {
          apiKey: this.serviceConfig.apiKey,
          debugger: debug_1.default.layout,
          retries: this.serviceConfig.retries,
          retryStrategy: this.serviceConfig.retryStrategy
        });
      }
      /**
       * Returns GraphQL Layout query
       * @param {string} itemPath page route
       * @param {string} [language] language
       * @returns {string} GraphQL query
       */
      getLayoutQuery(itemPath, language) {
        const languageVariable = language ? `, language:"${language}"` : "";
        const layoutQuery = this.serviceConfig.formatLayoutQuery ? this.serviceConfig.formatLayoutQuery(this.serviceConfig.siteName, itemPath, language) : `layout(site:"${this.serviceConfig.siteName}", routePath:"${itemPath}"${languageVariable})`;
        return `query {
      ${layoutQuery}{
        item {
          rendered
        }
      }
    }`;
      }
    };
    exports.GraphQLLayoutService = GraphQLLayoutService2;
  }
});

// node_modules/@sitecore-jss/sitecore-jss/dist/cjs/layout/themes.js
var require_themes = __commonJS({
  "node_modules/@sitecore-jss/sitecore-jss/dist/cjs/layout/themes.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.getStylesheetUrl = exports.getComponentLibraryStylesheetLinks = void 0;
    var _1 = require_layout();
    var constants_1 = require_constants();
    var STYLES_LIBRARY_ID_REGEX = /-library--([^\s]+)/;
    function getComponentLibraryStylesheetLinks2(layoutData, sitecoreEdgeContextId, sitecoreEdgeUrl = constants_1.SITECORE_EDGE_URL_DEFAULT) {
      const ids = /* @__PURE__ */ new Set();
      if (!layoutData.sitecore.route)
        return [];
      traverseComponent(layoutData.sitecore.route, ids);
      return [...ids].map((id) => ({
        href: (0, exports.getStylesheetUrl)(id, sitecoreEdgeContextId, sitecoreEdgeUrl),
        rel: "stylesheet"
      }));
    }
    exports.getComponentLibraryStylesheetLinks = getComponentLibraryStylesheetLinks2;
    var getStylesheetUrl = (id, sitecoreEdgeContextId, sitecoreEdgeUrl = constants_1.SITECORE_EDGE_URL_DEFAULT) => {
      return `${sitecoreEdgeUrl}/v1/files/components/styles/${id}.css?sitecoreContextId=${sitecoreEdgeContextId}`;
    };
    exports.getStylesheetUrl = getStylesheetUrl;
    var traversePlaceholder = (components, ids) => {
      components.map((component) => {
        const rendering = component;
        return traverseComponent(rendering, ids);
      });
    };
    var traverseComponent = (component, ids) => {
      var _a2, _b, _c, _d, _e2, _f, _g;
      let libraryId = void 0;
      if ("params" in component && component.params) {
        libraryId = ((_b = (_a2 = component.params.CSSStyles) === null || _a2 === void 0 ? void 0 : _a2.match(STYLES_LIBRARY_ID_REGEX)) === null || _b === void 0 ? void 0 : _b[1]) || ((_d = (_c = component.params.Styles) === null || _c === void 0 ? void 0 : _c.match(STYLES_LIBRARY_ID_REGEX)) === null || _d === void 0 ? void 0 : _d[1]) || component.params.LibraryId || void 0;
      }
      if (!libraryId && "fields" in component && component.fields) {
        libraryId = ((_e2 = (0, _1.getFieldValue)(component.fields, "CSSStyles", "").match(STYLES_LIBRARY_ID_REGEX)) === null || _e2 === void 0 ? void 0 : _e2[1]) || ((_f = (0, _1.getFieldValue)(component.fields, "Styles", "").match(STYLES_LIBRARY_ID_REGEX)) === null || _f === void 0 ? void 0 : _f[1]) || (0, _1.getFieldValue)(component.fields, "LibraryId", "") || void 0;
      }
      if (!libraryId && "attributes" in component && typeof component.attributes.class === "string") {
        libraryId = (_g = component.attributes.class.match(STYLES_LIBRARY_ID_REGEX)) === null || _g === void 0 ? void 0 : _g[1];
      }
      if (libraryId) {
        ids.add(libraryId);
      }
      const placeholders = component.placeholders || {};
      Object.keys(placeholders).forEach((placeholder) => {
        traversePlaceholder(placeholders[placeholder], ids);
      });
    };
  }
});

// node_modules/@sitecore-jss/sitecore-jss/dist/cjs/layout/index.js
var require_layout = __commonJS({
  "node_modules/@sitecore-jss/sitecore-jss/dist/cjs/layout/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.getComponentLibraryStylesheetLinks = exports.GraphQLLayoutService = exports.RestLayoutService = exports.getContentStylesheetLink = exports.getChildPlaceholder = exports.getFieldValue = exports.EDITING_COMPONENT_ID = exports.EDITING_COMPONENT_PLACEHOLDER = exports.RenderingType = exports.LayoutServicePageState = void 0;
    var models_1 = require_models();
    Object.defineProperty(exports, "LayoutServicePageState", { enumerable: true, get: function() {
      return models_1.LayoutServicePageState;
    } });
    Object.defineProperty(exports, "RenderingType", { enumerable: true, get: function() {
      return models_1.RenderingType;
    } });
    Object.defineProperty(exports, "EDITING_COMPONENT_PLACEHOLDER", { enumerable: true, get: function() {
      return models_1.EDITING_COMPONENT_PLACEHOLDER;
    } });
    Object.defineProperty(exports, "EDITING_COMPONENT_ID", { enumerable: true, get: function() {
      return models_1.EDITING_COMPONENT_ID;
    } });
    var utils_1 = require_utils5();
    Object.defineProperty(exports, "getFieldValue", { enumerable: true, get: function() {
      return utils_1.getFieldValue;
    } });
    Object.defineProperty(exports, "getChildPlaceholder", { enumerable: true, get: function() {
      return utils_1.getChildPlaceholder;
    } });
    var content_styles_1 = require_content_styles();
    Object.defineProperty(exports, "getContentStylesheetLink", { enumerable: true, get: function() {
      return content_styles_1.getContentStylesheetLink;
    } });
    var rest_layout_service_1 = require_rest_layout_service();
    Object.defineProperty(exports, "RestLayoutService", { enumerable: true, get: function() {
      return rest_layout_service_1.RestLayoutService;
    } });
    var graphql_layout_service_1 = require_graphql_layout_service();
    Object.defineProperty(exports, "GraphQLLayoutService", { enumerable: true, get: function() {
      return graphql_layout_service_1.GraphQLLayoutService;
    } });
    var themes_1 = require_themes();
    Object.defineProperty(exports, "getComponentLibraryStylesheetLinks", { enumerable: true, get: function() {
      return themes_1.getComponentLibraryStylesheetLinks;
    } });
  }
});

// node_modules/@sitecore-jss/sitecore-jss/layout.js
var require_layout2 = __commonJS({
  "node_modules/@sitecore-jss/sitecore-jss/layout.js"(exports, module) {
    module.exports = require_layout();
  }
});

// node_modules/@sitecore-jss/sitecore-jss/dist/cjs/tracking/trackingApi.js
var require_trackingApi = __commonJS({
  "node_modules/@sitecore-jss/sitecore-jss/dist/cjs/tracking/trackingApi.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.trackEvent = exports.checkStatus = void 0;
    var utils_1 = require_utils3();
    var ResponseError = class _ResponseError extends Error {
      constructor(message, response) {
        super(message);
        Object.setPrototypeOf(this, _ResponseError.prototype);
        this.response = response;
      }
    };
    function checkStatus(response) {
      if (response.status >= 200 && response.status < 300) {
        return response;
      }
      const error = new ResponseError(response.statusText, response);
      throw error;
    }
    exports.checkStatus = checkStatus;
    function fetchData3(url, data, fetcher, params = {}) {
      return fetcher((0, utils_1.resolveUrl)(url, params), data).then(checkStatus).then((response) => {
        return response.data;
      });
    }
    function resolveTrackingUrl(options) {
      const { host = "", serviceUrl = "/sitecore/api/jss/track", action = "event" } = options;
      return `${host}${serviceUrl}/${action}`;
    }
    function trackEvent(events, options) {
      const { querystringParams } = options;
      if (!options.test && (0, utils_1.isServer)()) {
        return Promise.resolve();
      }
      if (!Array.isArray(events)) {
        events = [events];
      }
      const fetchUrl = resolveTrackingUrl(options);
      return fetchData3(fetchUrl, events, options.fetcher, querystringParams);
    }
    exports.trackEvent = trackEvent;
  }
});

// node_modules/@sitecore-jss/sitecore-jss/dist/cjs/tracking/index.js
var require_tracking = __commonJS({
  "node_modules/@sitecore-jss/sitecore-jss/dist/cjs/tracking/index.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k3, k22) {
      if (k22 === void 0) k22 = k3;
      var desc = Object.getOwnPropertyDescriptor(m, k3);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k3];
        } };
      }
      Object.defineProperty(o, k22, desc);
    } : function(o, m, k3, k22) {
      if (k22 === void 0) k22 = k3;
      o[k22] = m[k3];
    });
    var __setModuleDefault = exports && exports.__setModuleDefault || (Object.create ? function(o, v3) {
      Object.defineProperty(o, "default", { enumerable: true, value: v3 });
    } : function(o, v3) {
      o["default"] = v3;
    });
    var __importStar = exports && exports.__importStar || function(mod) {
      if (mod && mod.__esModule) return mod;
      var result = {};
      if (mod != null) {
        for (var k3 in mod) if (k3 !== "default" && Object.prototype.hasOwnProperty.call(mod, k3)) __createBinding(result, mod, k3);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.trackingApi = void 0;
    var trackingApi2 = __importStar(require_trackingApi());
    exports.trackingApi = trackingApi2;
  }
});

// node_modules/@sitecore-jss/sitecore-jss/tracking.js
var require_tracking2 = __commonJS({
  "node_modules/@sitecore-jss/sitecore-jss/tracking.js"(exports, module) {
    module.exports = require_tracking();
  }
});

// node_modules/memory-cache/index.js
var require_memory_cache = __commonJS({
  "node_modules/memory-cache/index.js"(exports, module) {
    "use strict";
    function Cache() {
      var _cache = /* @__PURE__ */ Object.create(null);
      var _hitCount = 0;
      var _missCount = 0;
      var _size = 0;
      var _debug = false;
      this.put = function(key, value, time, timeoutCallback) {
        if (_debug) {
          console.log("caching: %s = %j (@%s)", key, value, time);
        }
        if (typeof time !== "undefined" && (typeof time !== "number" || isNaN(time) || time <= 0)) {
          throw new Error("Cache timeout must be a positive number");
        } else if (typeof timeoutCallback !== "undefined" && typeof timeoutCallback !== "function") {
          throw new Error("Cache timeout callback must be a function");
        }
        var oldRecord = _cache[key];
        if (oldRecord) {
          clearTimeout(oldRecord.timeout);
        } else {
          _size++;
        }
        var record = {
          value,
          expire: time + Date.now()
        };
        if (!isNaN(record.expire)) {
          record.timeout = setTimeout((function() {
            _del(key);
            if (timeoutCallback) {
              timeoutCallback(key, value);
            }
          }).bind(this), time);
        }
        _cache[key] = record;
        return value;
      };
      this.del = function(key) {
        var canDelete = true;
        var oldRecord = _cache[key];
        if (oldRecord) {
          clearTimeout(oldRecord.timeout);
          if (!isNaN(oldRecord.expire) && oldRecord.expire < Date.now()) {
            canDelete = false;
          }
        } else {
          canDelete = false;
        }
        if (canDelete) {
          _del(key);
        }
        return canDelete;
      };
      function _del(key) {
        _size--;
        delete _cache[key];
      }
      this.clear = function() {
        for (var key in _cache) {
          clearTimeout(_cache[key].timeout);
        }
        _size = 0;
        _cache = /* @__PURE__ */ Object.create(null);
        if (_debug) {
          _hitCount = 0;
          _missCount = 0;
        }
      };
      this.get = function(key) {
        var data = _cache[key];
        if (typeof data != "undefined") {
          if (isNaN(data.expire) || data.expire >= Date.now()) {
            if (_debug) _hitCount++;
            return data.value;
          } else {
            if (_debug) _missCount++;
            _size--;
            delete _cache[key];
          }
        } else if (_debug) {
          _missCount++;
        }
        return null;
      };
      this.size = function() {
        return _size;
      };
      this.memsize = function() {
        var size = 0, key;
        for (key in _cache) {
          size++;
        }
        return size;
      };
      this.debug = function(bool) {
        _debug = bool;
      };
      this.hits = function() {
        return _hitCount;
      };
      this.misses = function() {
        return _missCount;
      };
      this.keys = function() {
        return Object.keys(_cache);
      };
      this.exportJson = function() {
        var plainJsCache = {};
        for (var key in _cache) {
          var record = _cache[key];
          plainJsCache[key] = {
            value: record.value,
            expire: record.expire || "NaN"
          };
        }
        return JSON.stringify(plainJsCache);
      };
      this.importJson = function(jsonToImport, options) {
        var cacheToImport = JSON.parse(jsonToImport);
        var currTime = Date.now();
        var skipDuplicates = options && options.skipDuplicates;
        for (var key in cacheToImport) {
          if (cacheToImport.hasOwnProperty(key)) {
            if (skipDuplicates) {
              var existingRecord = _cache[key];
              if (existingRecord) {
                if (_debug) {
                  console.log("Skipping duplicate imported key '%s'", key);
                }
                continue;
              }
            }
            var record = cacheToImport[key];
            var remainingTime = record.expire - currTime;
            if (remainingTime <= 0) {
              this.del(key);
              continue;
            }
            remainingTime = remainingTime > 0 ? remainingTime : void 0;
            this.put(key, record.value, remainingTime);
          }
        }
        return this.size();
      };
    }
    module.exports = new Cache();
    module.exports.Cache = Cache;
  }
});

// node_modules/@sitecore-jss/sitecore-jss/dist/cjs/cache-client.js
var require_cache_client = __commonJS({
  "node_modules/@sitecore-jss/sitecore-jss/dist/cjs/cache-client.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.MemoryCacheClient = void 0;
    var memory_cache_1 = require_memory_cache();
    var DEFAULTS = Object.freeze({
      cacheTimeout: 60,
      cacheEnabled: true
    });
    var MemoryCacheClient = class {
      /**
       * Initializes a new instance of @see MemoryCacheClient using the provided @see CacheOptions
       * @param {CacheOptions} options Configuration options
       */
      constructor(options) {
        var _a2;
        this.options = options;
        this.cache = new memory_cache_1.Cache();
        this.options.cacheTimeout = ((_a2 = this.options.cacheTimeout) !== null && _a2 !== void 0 ? _a2 : DEFAULTS.cacheTimeout) * 1e3;
        if (this.options.cacheEnabled === void 0) {
          this.options.cacheEnabled = DEFAULTS.cacheEnabled;
        }
      }
      /**
       * Retrieves a value from the cache.
       * @template T The type of data being cached.
       * @param {string} key The cache key.
       * @returns The cache value as {T}, or null if the specified key is not found in the cache.
       */
      getCacheValue(key) {
        return this.options.cacheEnabled ? this.cache.get(key) : null;
      }
      /**
       * Adds a value to the cache for the specified cache key.
       * @template T The type of data being cached.
       * @param {string} key The cache key.
       * @param {T} value The value to cache.
       * @returns The value added to the cache.
       */
      setCacheValue(key, value) {
        return this.options.cacheEnabled ? this.cache.put(key, value, this.options.cacheTimeout) : value;
      }
    };
    exports.MemoryCacheClient = MemoryCacheClient;
  }
});

// node_modules/@sitecore-jss/sitecore-jss/dist/cjs/i18n/dictionary-service.js
var require_dictionary_service = __commonJS({
  "node_modules/@sitecore-jss/sitecore-jss/dist/cjs/i18n/dictionary-service.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.DictionaryServiceBase = void 0;
    var cache_client_1 = require_cache_client();
    var DictionaryServiceBase = class {
      /**
       * Initializes a new instance of @see DictionaryService using the provided @see CacheOptions
       * @param {CacheOptions} options Configuration options
       */
      constructor(options) {
        this.options = options;
        this.cache = this.getCacheClient();
      }
      /**
       * Caches a @see DictionaryPhrases value for the specified cache key.
       * @param {string} key The cache key.
       * @param {DictionaryPhrases} value The value to cache.
       * @returns The value added to the cache.
       * @mixes CacheClient<DictionaryPhrases>
       */
      setCacheValue(key, value) {
        return this.cache.setCacheValue(key, value);
      }
      /**
       * Retrieves a @see DictionaryPhrases value from the cache.
       * @param {string} key The cache key.
       * @returns The @see DictionaryPhrases value, or null if the specified key is not found in the cache.
       */
      getCacheValue(key) {
        return this.cache.getCacheValue(key);
      }
      /**
       * Gets a cache client that can cache data. Uses memory-cache as the default
       * library for caching (@see MemoryCacheClient). Override this method if you
       * want to use something else.
       * @returns {CacheClient} implementation
       */
      getCacheClient() {
        return new cache_client_1.MemoryCacheClient(this.options);
      }
    };
    exports.DictionaryServiceBase = DictionaryServiceBase;
  }
});

// node_modules/@sitecore-jss/sitecore-jss/dist/cjs/graphql/app-root-query.js
var require_app_root_query = __commonJS({
  "node_modules/@sitecore-jss/sitecore-jss/dist/cjs/graphql/app-root-query.js"(exports) {
    "use strict";
    var __awaiter3 = exports && exports.__awaiter || function(thisArg, _arguments, P2, generator) {
      function adopt(value) {
        return value instanceof P2 ? value : new P2(function(resolve) {
          resolve(value);
        });
      }
      return new (P2 || (P2 = Promise))(function(resolve, reject) {
        function fulfilled(value) {
          try {
            step(generator.next(value));
          } catch (e) {
            reject(e);
          }
        }
        function rejected(value) {
          try {
            step(generator["throw"](value));
          } catch (e) {
            reject(e);
          }
        }
        function step(result) {
          result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
      });
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.getAppRootId = exports.languageError = exports.siteNameError = void 0;
    var constants_1 = require_constants();
    exports.siteNameError = "The site name must be a non-empty string";
    exports.languageError = "The language must be a non-empty string";
    var appRootQuery = (
      /* GraphQL */
      `
  query AppRootQuery($jssAppTemplateId: String!, $siteName: String!, $language: String!) {
    layout(site: $siteName, routePath: "/", language: $language) {
      homePage: item {
        rootItem: ancestors(includeTemplateIDs: [$jssAppTemplateId]) {
          id
        }
      }
    }
  }
`
    );
    function getAppRootId(client, siteName, language, jssAppTemplateId) {
      var _a2, _b, _c, _d, _e2, _f;
      return __awaiter3(this, void 0, void 0, function* () {
        if (!siteName) {
          throw new RangeError(exports.siteNameError);
        }
        if (!language) {
          throw new RangeError(exports.languageError);
        }
        let fetchResponse = yield client.request(appRootQuery, {
          jssAppTemplateId: jssAppTemplateId || constants_1.SitecoreTemplateId.JssApp,
          siteName,
          language
        });
        if (!((_c = (_b = (_a2 = fetchResponse === null || fetchResponse === void 0 ? void 0 : fetchResponse.layout) === null || _a2 === void 0 ? void 0 : _a2.homePage) === null || _b === void 0 ? void 0 : _b.rootItem) === null || _c === void 0 ? void 0 : _c.length) && language !== "en") {
          fetchResponse = yield client.request(appRootQuery, {
            jssAppTemplateId: jssAppTemplateId || constants_1.SitecoreTemplateId.JssApp,
            siteName,
            language: "en"
          });
        }
        if (!((_f = (_e2 = (_d = fetchResponse === null || fetchResponse === void 0 ? void 0 : fetchResponse.layout) === null || _d === void 0 ? void 0 : _d.homePage) === null || _e2 === void 0 ? void 0 : _e2.rootItem) === null || _f === void 0 ? void 0 : _f.length)) {
          return null;
        }
        return fetchResponse.layout.homePage.rootItem[0].id;
      });
    }
    exports.getAppRootId = getAppRootId;
  }
});

// node_modules/@sitecore-jss/sitecore-jss/dist/cjs/graphql/search-service.js
var require_search_service = __commonJS({
  "node_modules/@sitecore-jss/sitecore-jss/dist/cjs/graphql/search-service.js"(exports) {
    "use strict";
    var __awaiter3 = exports && exports.__awaiter || function(thisArg, _arguments, P2, generator) {
      function adopt(value) {
        return value instanceof P2 ? value : new P2(function(resolve) {
          resolve(value);
        });
      }
      return new (P2 || (P2 = Promise))(function(resolve, reject) {
        function fulfilled(value) {
          try {
            step(generator.next(value));
          } catch (e) {
            reject(e);
          }
        }
        function rejected(value) {
          try {
            step(generator["throw"](value));
          } catch (e) {
            reject(e);
          }
        }
        function step(result) {
          result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
      });
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.SearchQueryService = void 0;
    var SearchQueryService = class {
      /**
       * Creates an instance of search query service.
       * @param {GraphQLClient} client that fetches data from a GraphQL endpoint.
       */
      constructor(client) {
        this.client = client;
      }
      /**
       * 1. Validates mandatory search query arguments
       * 2. Executes search query with pagination
       * 3. Aggregates pagination results into a single result-set.
       * @template T The type of objects being requested.
       * @param {string | DocumentNode} query the search query.
       * @param {SearchQueryVariables} args search query arguments.
       * @returns {T[]} array of result objects.
       * @throws {RangeError} if a valid root item ID is not provided.
       * @throws {RangeError} if the provided language(s) is(are) not valid.
       */
      fetch(query, args) {
        var _a2;
        return __awaiter3(this, void 0, void 0, function* () {
          if (!args.rootItemId) {
            throw new RangeError('"rootItemId" and "language" must be non-empty strings');
          }
          if (!args.language) {
            throw new RangeError('"rootItemId" and "language" must be non-empty strings');
          }
          let results = [];
          let hasNext = true;
          let after = "";
          while (hasNext) {
            const fetchResponse = yield this.client.request(query, Object.assign(Object.assign({}, args), { after }));
            results = results.concat((_a2 = fetchResponse === null || fetchResponse === void 0 ? void 0 : fetchResponse.search) === null || _a2 === void 0 ? void 0 : _a2.results);
            hasNext = fetchResponse.search.pageInfo.hasNext;
            after = fetchResponse.search.pageInfo.endCursor;
          }
          return results;
        });
      }
    };
    exports.SearchQueryService = SearchQueryService;
  }
});

// node_modules/@sitecore-jss/sitecore-jss/dist/cjs/graphql/graphql-edge-proxy.js
var require_graphql_edge_proxy = __commonJS({
  "node_modules/@sitecore-jss/sitecore-jss/dist/cjs/graphql/graphql-edge-proxy.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.getEdgeProxyContentUrl = void 0;
    var constants_1 = require_constants();
    var getEdgeProxyContentUrl = (sitecoreEdgeContextId, sitecoreEdgeUrl = constants_1.SITECORE_EDGE_URL_DEFAULT) => `${sitecoreEdgeUrl}/v1/content/api/graphql/v1?sitecoreContextId=${sitecoreEdgeContextId}`;
    exports.getEdgeProxyContentUrl = getEdgeProxyContentUrl;
  }
});

// node_modules/@sitecore-jss/sitecore-jss/dist/cjs/graphql/index.js
var require_graphql = __commonJS({
  "node_modules/@sitecore-jss/sitecore-jss/dist/cjs/graphql/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.getEdgeProxyContentUrl = exports.SearchQueryService = exports.GraphQLRequestClient = exports.DefaultRetryStrategy = exports.getAppRootId = void 0;
    var app_root_query_1 = require_app_root_query();
    Object.defineProperty(exports, "getAppRootId", { enumerable: true, get: function() {
      return app_root_query_1.getAppRootId;
    } });
    var graphql_request_client_1 = require_graphql_request_client();
    Object.defineProperty(exports, "DefaultRetryStrategy", { enumerable: true, get: function() {
      return graphql_request_client_1.DefaultRetryStrategy;
    } });
    Object.defineProperty(exports, "GraphQLRequestClient", { enumerable: true, get: function() {
      return graphql_request_client_1.GraphQLRequestClient;
    } });
    var search_service_1 = require_search_service();
    Object.defineProperty(exports, "SearchQueryService", { enumerable: true, get: function() {
      return search_service_1.SearchQueryService;
    } });
    var graphql_edge_proxy_1 = require_graphql_edge_proxy();
    Object.defineProperty(exports, "getEdgeProxyContentUrl", { enumerable: true, get: function() {
      return graphql_edge_proxy_1.getEdgeProxyContentUrl;
    } });
  }
});

// node_modules/@sitecore-jss/sitecore-jss/dist/cjs/i18n/graphql-dictionary-service.js
var require_graphql_dictionary_service = __commonJS({
  "node_modules/@sitecore-jss/sitecore-jss/dist/cjs/i18n/graphql-dictionary-service.js"(exports) {
    "use strict";
    var __awaiter3 = exports && exports.__awaiter || function(thisArg, _arguments, P2, generator) {
      function adopt(value) {
        return value instanceof P2 ? value : new P2(function(resolve) {
          resolve(value);
        });
      }
      return new (P2 || (P2 = Promise))(function(resolve, reject) {
        function fulfilled(value) {
          try {
            step(generator.next(value));
          } catch (e) {
            reject(e);
          }
        }
        function rejected(value) {
          try {
            step(generator["throw"](value));
          } catch (e) {
            reject(e);
          }
        }
        function step(result) {
          result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
      });
    };
    var __importDefault = exports && exports.__importDefault || function(mod) {
      return mod && mod.__esModule ? mod : { "default": mod };
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.GraphQLDictionaryService = exports.queryError = void 0;
    var graphql_request_client_1 = require_graphql_request_client();
    var constants_1 = require_constants();
    var dictionary_service_1 = require_dictionary_service();
    var graphql_1 = require_graphql();
    var debug_1 = __importDefault(require_debug());
    exports.queryError = "Valid value for rootItemId not provided and failed to auto-resolve app root item.";
    var query = (
      /* GraphQL */
      `
  query DictionarySearch(
    $rootItemId: String!
    $language: String!
    $templates: String!
    $pageSize: Int = 10
    $after: String
  ) {
    search(
      where: {
        AND: [
          { name: "_path", value: $rootItemId, operator: CONTAINS }
          { name: "_language", value: $language }
          { name: "_templates", value: $templates, operator: CONTAINS }
        ]
      }
      first: $pageSize
      after: $after
    ) {
      total
      pageInfo {
        endCursor
        hasNext
      }
      results {
        key: field(name: "Key") {
          value
        }
        phrase: field(name: "Phrase") {
          value
        }
      }
    }
  }
`
    );
    var GraphQLDictionaryService2 = class extends dictionary_service_1.DictionaryServiceBase {
      /**
       * Creates an instance of graphQL dictionary service with the provided options
       * @param {GraphQLDictionaryService} options instance
       */
      constructor(options) {
        super(options);
        this.options = options;
        this.graphQLClient = this.getGraphQLClient();
        this.searchService = new graphql_1.SearchQueryService(this.graphQLClient);
      }
      /**
       * Fetches dictionary data for internalization.
       * @param {string} language the language to fetch
       * @default query (@see query)
       * @returns {Promise<DictionaryPhrases>} dictionary phrases
       * @throws {Error} if the app root was not found for the specified site and language.
       */
      fetchDictionaryData(language) {
        return __awaiter3(this, void 0, void 0, function* () {
          const cacheKey = this.options.siteName + language;
          const cachedValue = this.getCacheValue(cacheKey);
          if (cachedValue) {
            debug_1.default.dictionary("using cached dictionary data for %s %s", language, this.options.siteName);
            return cachedValue;
          }
          debug_1.default.dictionary("fetching site root for %s %s", language, this.options.siteName);
          const rootItemId = this.options.rootItemId || (yield (0, graphql_1.getAppRootId)(this.graphQLClient, this.options.siteName, language, this.options.jssAppTemplateId));
          if (!rootItemId) {
            throw new Error(exports.queryError);
          }
          debug_1.default.dictionary("fetching dictionary data for %s %s", language, this.options.siteName);
          const phrases = {};
          yield this.searchService.fetch(query, {
            rootItemId,
            language,
            templates: this.options.dictionaryEntryTemplateId || constants_1.SitecoreTemplateId.DictionaryEntry,
            pageSize: this.options.pageSize
          }).then((results) => {
            results.forEach((item) => phrases[item.key.value] = item.phrase.value);
          });
          this.setCacheValue(cacheKey, phrases);
          return phrases;
        });
      }
      /**
       * Gets a GraphQL client that can make requests to the API. Uses graphql-request as the default
       * library for fetching graphql data (@see GraphQLRequestClient). Override this method if you
       * want to use something else.
       * @returns {GraphQLClient} implementation
       */
      getGraphQLClient() {
        if (!this.options.endpoint) {
          if (!this.options.clientFactory) {
            throw new Error("You should provide either an endpoint and apiKey, or a clientFactory.");
          }
          return this.options.clientFactory({
            debugger: debug_1.default.dictionary,
            retries: this.options.retries,
            retryStrategy: this.options.retryStrategy
          });
        }
        return new graphql_request_client_1.GraphQLRequestClient(this.options.endpoint, {
          apiKey: this.options.apiKey,
          debugger: debug_1.default.dictionary,
          retries: this.options.retries,
          retryStrategy: this.options.retryStrategy
        });
      }
    };
    exports.GraphQLDictionaryService = GraphQLDictionaryService2;
  }
});

// node_modules/@sitecore-jss/sitecore-jss/dist/cjs/i18n/rest-dictionary-service.js
var require_rest_dictionary_service = __commonJS({
  "node_modules/@sitecore-jss/sitecore-jss/dist/cjs/i18n/rest-dictionary-service.js"(exports) {
    "use strict";
    var __awaiter3 = exports && exports.__awaiter || function(thisArg, _arguments, P2, generator) {
      function adopt(value) {
        return value instanceof P2 ? value : new P2(function(resolve) {
          resolve(value);
        });
      }
      return new (P2 || (P2 = Promise))(function(resolve, reject) {
        function fulfilled(value) {
          try {
            step(generator.next(value));
          } catch (e) {
            reject(e);
          }
        }
        function rejected(value) {
          try {
            step(generator["throw"](value));
          } catch (e) {
            reject(e);
          }
        }
        function step(result) {
          result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
      });
    };
    var __importDefault = exports && exports.__importDefault || function(mod) {
      return mod && mod.__esModule ? mod : { "default": mod };
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.RestDictionaryService = void 0;
    var axios_fetcher_1 = require_axios_fetcher();
    var data_fetcher_1 = require_data_fetcher();
    var dictionary_service_1 = require_dictionary_service();
    var debug_1 = __importDefault(require_debug());
    var RestDictionaryService2 = class extends dictionary_service_1.DictionaryServiceBase {
      constructor(options) {
        super(options);
        this.options = options;
      }
      /**
       * Provides default @see AxiosDataFetcher data fetcher
       */
      get defaultFetcher() {
        const dataFetcher = new axios_fetcher_1.AxiosDataFetcher({
          debugger: debug_1.default.dictionary,
          // CORS issue: Sitecore provides 'Access-Control-Allow-Origin' as wildcard '*', so we can't include credentials for the dictionary service
          withCredentials: false
        });
        return (url) => dataFetcher.fetch(url);
      }
      /**
       * Fetch dictionary data for a language.
       * @param {string} language the language to be used to fetch the dictionary
       * @returns {Promise<DictionaryPhrases>} dictionary phrases
       */
      fetchDictionaryData(language) {
        return __awaiter3(this, void 0, void 0, function* () {
          const endpoint = this.getUrl(language);
          const cachedValue = this.getCacheValue(endpoint);
          if (cachedValue) {
            debug_1.default.dictionary("using cached dictionary data for %s %s", language, this.options.siteName);
            return cachedValue;
          }
          debug_1.default.dictionary("fetching dictionary data for %s %s", language, this.options.siteName);
          const fetcher = this.options.dataFetcher || this.defaultFetcher;
          const response = yield (0, data_fetcher_1.fetchData)(endpoint, fetcher, {
            sc_apikey: this.options.apiKey
          });
          return this.setCacheValue(endpoint, response.phrases);
        });
      }
      /**
       * Generate dictionary service url
       * @param {string} language the language to be used to fetch the dictionary
       * @returns {string} dictionary service url
       */
      getUrl(language) {
        return `${this.options.apiHost}/sitecore/api/jss/dictionary/${this.options.siteName}/${language}`;
      }
    };
    exports.RestDictionaryService = RestDictionaryService2;
  }
});

// node_modules/@sitecore-jss/sitecore-jss/dist/cjs/i18n/index.js
var require_i18n = __commonJS({
  "node_modules/@sitecore-jss/sitecore-jss/dist/cjs/i18n/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.RestDictionaryService = exports.GraphQLDictionaryService = exports.DictionaryServiceBase = void 0;
    var dictionary_service_1 = require_dictionary_service();
    Object.defineProperty(exports, "DictionaryServiceBase", { enumerable: true, get: function() {
      return dictionary_service_1.DictionaryServiceBase;
    } });
    var graphql_dictionary_service_1 = require_graphql_dictionary_service();
    Object.defineProperty(exports, "GraphQLDictionaryService", { enumerable: true, get: function() {
      return graphql_dictionary_service_1.GraphQLDictionaryService;
    } });
    var rest_dictionary_service_1 = require_rest_dictionary_service();
    Object.defineProperty(exports, "RestDictionaryService", { enumerable: true, get: function() {
      return rest_dictionary_service_1.RestDictionaryService;
    } });
  }
});

// node_modules/@sitecore-jss/sitecore-jss/i18n.js
var require_i18n2 = __commonJS({
  "node_modules/@sitecore-jss/sitecore-jss/i18n.js"(exports, module) {
    module.exports = require_i18n();
  }
});

// node_modules/@sitecore-jss/sitecore-jss/graphql.js
var require_graphql2 = __commonJS({
  "node_modules/@sitecore-jss/sitecore-jss/graphql.js"(exports, module) {
    module.exports = require_graphql();
  }
});

// node_modules/lodash.unescape/index.js
var require_lodash = __commonJS({
  "node_modules/lodash.unescape/index.js"(exports, module) {
    var INFINITY = 1 / 0;
    var symbolTag = "[object Symbol]";
    var reEscapedHtml = /&(?:amp|lt|gt|quot|#39|#96);/g;
    var reHasEscapedHtml = RegExp(reEscapedHtml.source);
    var htmlUnescapes = {
      "&amp;": "&",
      "&lt;": "<",
      "&gt;": ">",
      "&quot;": '"',
      "&#39;": "'",
      "&#96;": "`"
    };
    var freeGlobal = typeof global == "object" && global && global.Object === Object && global;
    var freeSelf = typeof self == "object" && self && self.Object === Object && self;
    var root = freeGlobal || freeSelf || Function("return this")();
    function basePropertyOf(object) {
      return function(key) {
        return object == null ? void 0 : object[key];
      };
    }
    var unescapeHtmlChar = basePropertyOf(htmlUnescapes);
    var objectProto = Object.prototype;
    var objectToString = objectProto.toString;
    var Symbol2 = root.Symbol;
    var symbolProto = Symbol2 ? Symbol2.prototype : void 0;
    var symbolToString = symbolProto ? symbolProto.toString : void 0;
    function baseToString(value) {
      if (typeof value == "string") {
        return value;
      }
      if (isSymbol(value)) {
        return symbolToString ? symbolToString.call(value) : "";
      }
      var result = value + "";
      return result == "0" && 1 / value == -INFINITY ? "-0" : result;
    }
    function isObjectLike2(value) {
      return !!value && typeof value == "object";
    }
    function isSymbol(value) {
      return typeof value == "symbol" || isObjectLike2(value) && objectToString.call(value) == symbolTag;
    }
    function toString(value) {
      return value == null ? "" : baseToString(value);
    }
    function unescape2(string) {
      string = toString(string);
      return string && reHasEscapedHtml.test(string) ? string.replace(reEscapedHtml, unescapeHtmlChar) : string;
    }
    module.exports = unescape2;
  }
});

// node_modules/@sitecore-jss/sitecore-jss/dist/cjs/media/media-api.js
var require_media_api = __commonJS({
  "node_modules/@sitecore-jss/sitecore-jss/dist/cjs/media/media-api.js"(exports) {
    "use strict";
    var __importDefault = exports && exports.__importDefault || function(mod) {
      return mod && mod.__esModule ? mod : { "default": mod };
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.getSrcSet = exports.updateImageUrl = exports.replaceMediaUrlPrefix = exports.getRequiredParams = exports.findEditorImageTag = void 0;
    var lodash_unescape_1 = __importDefault(require_lodash());
    var url_parse_1 = __importDefault(require_url_parse());
    var imgTagRegex = /<img([^>]+)\/>/i;
    var htmlAttrsRegex = /([^=\s]+)(="([^"]*)")?/gi;
    var mediaUrlPrefixRegex = /\/([-~]{1})\/media\//i;
    var findEditorImageTag = (editorMarkup) => {
      const tagMatch = editorMarkup.match(imgTagRegex);
      if (!tagMatch || tagMatch.length < 2) {
        return null;
      }
      const attrs = {};
      let match = htmlAttrsRegex.exec(tagMatch[1]);
      while (match !== null) {
        attrs[match[1]] = (0, lodash_unescape_1.default)(match[3]);
        match = htmlAttrsRegex.exec(tagMatch[1]);
      }
      return {
        imgTag: tagMatch[0],
        attrs
      };
    };
    exports.findEditorImageTag = findEditorImageTag;
    var getRequiredParams = (qs) => {
      const { rev, db, la, vs, ts } = qs;
      return { rev, db, la, vs, ts };
    };
    exports.getRequiredParams = getRequiredParams;
    var replaceMediaUrlPrefix = (url, mediaUrlPrefix = mediaUrlPrefixRegex) => {
      const parsed = (0, url_parse_1.default)(url, {}, true);
      const match = mediaUrlPrefix.exec(parsed.pathname);
      if (match && match.length > 1) {
        parsed.set("pathname", parsed.pathname.replace(mediaUrlPrefix, `/${match[1]}/jssmedia/`));
      }
      return parsed.toString();
    };
    exports.replaceMediaUrlPrefix = replaceMediaUrlPrefix;
    var updateImageUrl = (url, params, mediaUrlPrefix = mediaUrlPrefixRegex) => {
      if (!params || Object.keys(params).length === 0) {
        return url;
      }
      if (typeof window !== "undefined" && !window.global) {
        window.global = {};
      }
      const parsed = (0, url_parse_1.default)((0, exports.replaceMediaUrlPrefix)(url, mediaUrlPrefix), {}, true);
      const requiredParams = (0, exports.getRequiredParams)(parsed.query);
      const query = Object.assign({}, params);
      Object.entries(requiredParams).forEach(([key, param]) => {
        if (param) {
          query[key] = param;
        }
      });
      parsed.set("query", query);
      return parsed.toString();
    };
    exports.updateImageUrl = updateImageUrl;
    var getSrcSet = (url, srcSet, imageParams, mediaUrlPrefix) => {
      return srcSet.map((params) => {
        const newParams = Object.assign(Object.assign({}, imageParams), params);
        const imageWidth = newParams.w || newParams.mw;
        if (!imageWidth) {
          return null;
        }
        return `${(0, exports.updateImageUrl)(url, newParams, mediaUrlPrefix)} ${imageWidth}w`;
      }).filter((value) => value).join(", ");
    };
    exports.getSrcSet = getSrcSet;
  }
});

// node_modules/@sitecore-jss/sitecore-jss/dist/cjs/media/index.js
var require_media = __commonJS({
  "node_modules/@sitecore-jss/sitecore-jss/dist/cjs/media/index.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k3, k22) {
      if (k22 === void 0) k22 = k3;
      var desc = Object.getOwnPropertyDescriptor(m, k3);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k3];
        } };
      }
      Object.defineProperty(o, k22, desc);
    } : function(o, m, k3, k22) {
      if (k22 === void 0) k22 = k3;
      o[k22] = m[k3];
    });
    var __setModuleDefault = exports && exports.__setModuleDefault || (Object.create ? function(o, v3) {
      Object.defineProperty(o, "default", { enumerable: true, value: v3 });
    } : function(o, v3) {
      o["default"] = v3;
    });
    var __importStar = exports && exports.__importStar || function(mod) {
      if (mod && mod.__esModule) return mod;
      var result = {};
      if (mod != null) {
        for (var k3 in mod) if (k3 !== "default" && Object.prototype.hasOwnProperty.call(mod, k3)) __createBinding(result, mod, k3);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.mediaApi = void 0;
    var mediaApi3 = __importStar(require_media_api());
    exports.mediaApi = mediaApi3;
  }
});

// node_modules/@sitecore-jss/sitecore-jss/media.js
var require_media2 = __commonJS({
  "node_modules/@sitecore-jss/sitecore-jss/media.js"(exports, module) {
    module.exports = require_media();
  }
});

// node_modules/@sitecore-jss/sitecore-jss/dist/cjs/feaas/themes.js
var require_themes2 = __commonJS({
  "node_modules/@sitecore-jss/sitecore-jss/dist/cjs/feaas/themes.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.getStylesheetUrl = exports.getFEAASLibraryStylesheetLinks = void 0;
    var layout_1 = require_layout();
    var constants_1 = require_constants();
    var FEAAS_LIBRARY_ID_REGEX = /-library--([^\s]+)/;
    function getFEAASLibraryStylesheetLinks2(layoutData, sitecoreEdgeContextId, sitecoreEdgeUrl = constants_1.SITECORE_EDGE_URL_DEFAULT) {
      const ids = /* @__PURE__ */ new Set();
      if (!layoutData.sitecore.route)
        return [];
      traverseComponent(layoutData.sitecore.route, ids);
      return [...ids].map((id) => ({
        href: (0, exports.getStylesheetUrl)(id, sitecoreEdgeContextId, sitecoreEdgeUrl),
        rel: "stylesheet"
      }));
    }
    exports.getFEAASLibraryStylesheetLinks = getFEAASLibraryStylesheetLinks2;
    var getStylesheetUrl = (id, sitecoreEdgeContextId, sitecoreEdgeUrl = constants_1.SITECORE_EDGE_URL_DEFAULT) => {
      return `${sitecoreEdgeUrl}/v1/files/components/styles/${id}.css?sitecoreContextId=${sitecoreEdgeContextId}`;
    };
    exports.getStylesheetUrl = getStylesheetUrl;
    var traversePlaceholder = (components, ids) => {
      components.map((component) => {
        const rendering = component;
        return traverseComponent(rendering, ids);
      });
    };
    var traverseComponent = (component, ids) => {
      var _a2, _b, _c, _d;
      let libraryId = void 0;
      if ("params" in component && component.params) {
        libraryId = ((_b = (_a2 = component.params.CSSStyles) === null || _a2 === void 0 ? void 0 : _a2.match(FEAAS_LIBRARY_ID_REGEX)) === null || _b === void 0 ? void 0 : _b[1]) || component.params.LibraryId || void 0;
      }
      if (!libraryId && "fields" in component && component.fields) {
        libraryId = ((_c = (0, layout_1.getFieldValue)(component.fields, "CSSStyles", "").match(FEAAS_LIBRARY_ID_REGEX)) === null || _c === void 0 ? void 0 : _c[1]) || (0, layout_1.getFieldValue)(component.fields, "LibraryId", "") || void 0;
      }
      if (!libraryId && "attributes" in component && typeof component.attributes.class === "string") {
        libraryId = (_d = component.attributes.class.match(FEAAS_LIBRARY_ID_REGEX)) === null || _d === void 0 ? void 0 : _d[1];
      }
      if (libraryId) {
        ids.add(libraryId);
      }
      const placeholders = component.placeholders || {};
      Object.keys(placeholders).forEach((placeholder) => {
        traversePlaceholder(placeholders[placeholder], ids);
      });
    };
  }
});

// node_modules/@sitecore-jss/sitecore-jss/dist/cjs/feaas/index.js
var require_feaas = __commonJS({
  "node_modules/@sitecore-jss/sitecore-jss/dist/cjs/feaas/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.getFEAASLibraryStylesheetLinks = void 0;
    var themes_1 = require_themes2();
    Object.defineProperty(exports, "getFEAASLibraryStylesheetLinks", { enumerable: true, get: function() {
      return themes_1.getFEAASLibraryStylesheetLinks;
    } });
  }
});

// node_modules/@sitecore-jss/sitecore-jss/feaas.js
var require_feaas2 = __commonJS({
  "node_modules/@sitecore-jss/sitecore-jss/feaas.js"(exports, module) {
    module.exports = require_feaas();
  }
});

// node_modules/style-attr/lib/index.js
var require_lib = __commonJS({
  "node_modules/style-attr/lib/index.js"(exports, module) {
    function parse3(raw, opts) {
      opts = opts || {};
      var preserveNumbers = opts.preserveNumbers;
      var trim = function(s2) {
        return s2.trim();
      };
      var obj = {};
      getKeyValueChunks(raw).map(trim).filter(Boolean).forEach(function(item) {
        var pos = item.indexOf(":");
        var key = item.substr(0, pos).trim();
        var val = item.substr(pos + 1).trim();
        if (preserveNumbers && isNumeric(val)) {
          val = Number(val);
        }
        obj[key] = val;
      });
      return obj;
    }
    function isNumeric(n) {
      return !isNaN(parseFloat(n)) && isFinite(n);
    }
    function getKeyValueChunks(raw) {
      var chunks = [];
      var offset = 0;
      var sep = ";";
      var hasUnclosedUrl = /url\([^\)]+$/;
      var chunk = "";
      var nextSplit;
      while (offset < raw.length) {
        nextSplit = raw.indexOf(sep, offset);
        if (nextSplit === -1) {
          nextSplit = raw.length;
        }
        chunk += raw.substring(offset, nextSplit);
        if (hasUnclosedUrl.test(chunk)) {
          chunk += ";";
          offset = nextSplit + 1;
          continue;
        }
        chunks.push(chunk);
        chunk = "";
        offset = nextSplit + 1;
      }
      return chunks;
    }
    function stringify(obj) {
      return Object.keys(obj).map(function(key) {
        return key + ":" + obj[key];
      }).join(";");
    }
    function normalize(str, opts) {
      return stringify(parse3(str, opts));
    }
    module.exports.parse = parse3;
    module.exports.stringify = stringify;
    module.exports.normalize = normalize;
  }
});

// node_modules/fast-deep-equal/es6/react.js
var require_react2 = __commonJS({
  "node_modules/fast-deep-equal/es6/react.js"(exports, module) {
    "use strict";
    module.exports = function equal(a, b3) {
      if (a === b3) return true;
      if (a && b3 && typeof a == "object" && typeof b3 == "object") {
        if (a.constructor !== b3.constructor) return false;
        var length, i, keys;
        if (Array.isArray(a)) {
          length = a.length;
          if (length != b3.length) return false;
          for (i = length; i-- !== 0; )
            if (!equal(a[i], b3[i])) return false;
          return true;
        }
        if (a instanceof Map && b3 instanceof Map) {
          if (a.size !== b3.size) return false;
          for (i of a.entries())
            if (!b3.has(i[0])) return false;
          for (i of a.entries())
            if (!equal(i[1], b3.get(i[0]))) return false;
          return true;
        }
        if (a instanceof Set && b3 instanceof Set) {
          if (a.size !== b3.size) return false;
          for (i of a.entries())
            if (!b3.has(i[0])) return false;
          return true;
        }
        if (ArrayBuffer.isView(a) && ArrayBuffer.isView(b3)) {
          length = a.length;
          if (length != b3.length) return false;
          for (i = length; i-- !== 0; )
            if (a[i] !== b3[i]) return false;
          return true;
        }
        if (a.constructor === RegExp) return a.source === b3.source && a.flags === b3.flags;
        if (a.valueOf !== Object.prototype.valueOf) return a.valueOf() === b3.valueOf();
        if (a.toString !== Object.prototype.toString) return a.toString() === b3.toString();
        keys = Object.keys(a);
        length = keys.length;
        if (length !== Object.keys(b3).length) return false;
        for (i = length; i-- !== 0; )
          if (!Object.prototype.hasOwnProperty.call(b3, keys[i])) return false;
        for (i = length; i-- !== 0; ) {
          var key = keys[i];
          if (key === "_owner" && a.$$typeof) {
            continue;
          }
          if (!equal(a[key], b3[key])) return false;
        }
        return true;
      }
      return a !== a && b3 !== b3;
    };
  }
});

// node_modules/@sitecore-jss/sitecore-jss/dist/esm/constants.js
var constants_exports = {};
__export(constants_exports, {
  FETCH_WITH: () => FETCH_WITH,
  JSS_MODE: () => JSS_MODE,
  SITECORE_EDGE_URL_DEFAULT: () => SITECORE_EDGE_URL_DEFAULT,
  SitecoreTemplateId: () => SitecoreTemplateId,
  siteNameError: () => siteNameError
});
var SitecoreTemplateId;
(function(SitecoreTemplateId2) {
  SitecoreTemplateId2["JssApp"] = "061cba1554744b918a0617903b102b82";
  SitecoreTemplateId2["DictionaryEntry"] = "6d1cd89719364a3aa511289a94c2a7b1";
})(SitecoreTemplateId || (SitecoreTemplateId = {}));
var FETCH_WITH = {
  GRAPHQL: "GraphQL",
  REST: "Rest"
};
var JSS_MODE = {
  CONNECTED: "connected",
  DISCONNECTED: "disconnected"
};
var siteNameError = "The siteName cannot be empty";
var SITECORE_EDGE_URL_DEFAULT = "https://edge-platform.sitecorecloud.io";

// node_modules/@sitecore-jss/sitecore-jss/dist/esm/debug.js
var import_debug = __toESM(require_browser());

// node_modules/@sitecore-jss/sitecore-jss/dist/esm/utils/is-server.js
function isServer() {
  return !(typeof window !== "undefined" && window.document);
}
var is_server_default = isServer;

// node_modules/@sitecore-jss/sitecore-jss/dist/esm/debug.js
var _a;
var rootNamespace = "sitecore-jss";
if (is_server_default() && ((_a = process === null || process === void 0 ? void 0 : process.env) === null || _a === void 0 ? void 0 : _a.DEBUG_MULTILINE) === "true" && import_debug.default.formatters.o && import_debug.default.formatters.O) {
  import_debug.default.formatters.o = import_debug.default.formatters.O;
}
var enableDebug = (namespaces) => import_debug.default.enable(namespaces);
var debug_default = {
  common: (0, import_debug.default)(`${rootNamespace}:common`),
  http: (0, import_debug.default)(`${rootNamespace}:http`),
  layout: (0, import_debug.default)(`${rootNamespace}:layout`),
  dictionary: (0, import_debug.default)(`${rootNamespace}:dictionary`),
  editing: (0, import_debug.default)(`${rootNamespace}:editing`),
  sitemap: (0, import_debug.default)(`${rootNamespace}:sitemap`),
  multisite: (0, import_debug.default)(`${rootNamespace}:multisite`),
  robots: (0, import_debug.default)(`${rootNamespace}:robots`),
  redirects: (0, import_debug.default)(`${rootNamespace}:redirects`),
  personalize: (0, import_debug.default)(`${rootNamespace}:personalize`),
  errorpages: (0, import_debug.default)(`${rootNamespace}:errorpages`)
};

// node_modules/@sitecore-jss/sitecore-jss/dist/esm/graphql-request-client.js
var import_graphql_request = __toESM(require_dist());
var import_url_parse = __toESM(require_url_parse());

// node_modules/@sitecore-jss/sitecore-jss/dist/esm/axios-fetcher.js
var import_axios = __toESM(require_axios2());

// node_modules/@sitecore-jss/sitecore-jss/dist/esm/index.js
var import_graphql_request2 = __toESM(require_dist());

// node_modules/@sitecore-jss/sitecore-jss-react/dist/esm/index.js
var import_utils9 = __toESM(require_utils4());
var import_layout3 = __toESM(require_layout2());
var import_tracking = __toESM(require_tracking2());
var import_i18n = __toESM(require_i18n2());
var import_graphql = __toESM(require_graphql2());
var import_media2 = __toESM(require_media2());
var import_feaas = __toESM(require_feaas2());

// node_modules/@sitecore-jss/sitecore-jss-react/dist/esm/components/Placeholder.js
var import_react15 = __toESM(require_react());

// node_modules/@sitecore-jss/sitecore-jss-react/dist/esm/components/PlaceholderCommon.js
var import_react10 = __toESM(require_react());

// node_modules/@sitecore-jss/sitecore-jss-react/dist/esm/components/MissingComponent.js
var import_react = __toESM(require_react());
var MissingComponent = (props) => {
  const componentName = props.rendering && props.rendering.componentName ? props.rendering.componentName : "Unnamed Component";
  !props.errorOverride && console.log(`Component props for unimplemented '${componentName}' component`, props);
  const errorMessage = props.errorOverride || "JSS component is missing React implementation. See the developer console for more information.";
  return import_react.default.createElement(
    "div",
    { style: {
      background: "darkorange",
      outline: "5px solid orange",
      padding: "10px",
      color: "white",
      maxWidth: "500px"
    } },
    import_react.default.createElement("h2", null, componentName),
    import_react.default.createElement("p", null, errorMessage)
  );
};
MissingComponent.displayName = "MissingComponent";

// node_modules/@sitecore-jss/sitecore-jss-react/dist/esm/utils.js
var import_layout = __toESM(require_layout2());
var import_style_attr = __toESM(require_lib());
var __rest = function(s2, e) {
  var t2 = {};
  for (var p in s2) if (Object.prototype.hasOwnProperty.call(s2, p) && e.indexOf(p) < 0)
    t2[p] = s2[p];
  if (s2 != null && typeof Object.getOwnPropertySymbols === "function")
    for (var i = 0, p = Object.getOwnPropertySymbols(s2); i < p.length; i++) {
      if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s2, p[i]))
        t2[p[i]] = s2[p[i]];
    }
  return t2;
};
var convertKebabCasetoCamelCase = (str) => str.replace(/^.|-./g, (letter, index) => index === 0 ? letter.toLowerCase() : letter.substr(1).toUpperCase());
var convertStyleAttribute = (style = "") => {
  const parsedStyle = (0, import_style_attr.parse)(style, { preserveNumbers: true });
  return Object.keys(parsedStyle).reduce((initialResult, styleKey) => {
    const result = initialResult;
    const convertedKey = convertKebabCasetoCamelCase(styleKey);
    result[convertedKey] = parsedStyle[styleKey];
    return result;
  }, {});
};
var convertAttributesToReactProps = (attributes) => {
  if (!attributes) {
    return [];
  }
  return Object.keys(attributes).reduce((initialResult, attrName) => {
    const result = initialResult;
    switch (attrName) {
      case "class": {
        result.className = attributes.class;
        break;
      }
      case "style": {
        result.style = convertStyleAttribute(attributes.style);
        break;
      }
      default: {
        result[attrName] = attributes[attrName];
        break;
      }
    }
    return result;
  }, {});
};
var addClassName = (otherAttrs) => {
  if (otherAttrs.class) {
    if (otherAttrs.className) {
      let className = otherAttrs.className;
      className += ` ${otherAttrs.class}`;
      otherAttrs.className = className;
    } else {
      otherAttrs.className = otherAttrs.class;
    }
    delete otherAttrs.class;
  }
};
var getAttributesString = (attributes) => {
  const { className } = attributes, restAttributes = __rest(attributes, ["className"]);
  const attributesEntries = Object.entries(restAttributes).map(([key, value]) => {
    if (typeof value === "object") {
      const valueString = JSON.stringify(value).replace(/"|{|}/g, "").replace(/,/g, ";");
      return `${key}="${valueString}"`;
    }
    return `${key}="${value}"`;
  });
  if (className) {
    attributesEntries.push(`class="${className}"`);
  }
  return attributesEntries.join(" ");
};
var getDataFromFields = (fields) => {
  let data = {};
  data = Object.entries(fields).reduce((acc, [key]) => {
    acc[key] = (0, import_layout.getFieldValue)(fields, key);
    return acc;
  }, data);
  return data;
};

// node_modules/@sitecore-jss/sitecore-jss-react/dist/esm/components/HiddenRendering.js
var import_react2 = __toESM(require_react());
var styles = {
  height: "100px",
  backgroundImage: "linear-gradient(45deg, #ffffff 25%, #dcdcdc 25%, #dcdcdc 50%, #ffffff 50%, #ffffff 75%, #dcdcdc 75%, #dcdcdc 100%)",
  backgroundSize: "3px 3px"
};
var HiddenRendering = () => import_react2.default.createElement("div", { style: styles });
var HIDDEN_RENDERING_NAME = "Hidden Rendering";

// node_modules/@sitecore-jss/sitecore-jss-react/dist/esm/components/FEaaSComponent.js
var import_react6 = __toESM(require_react());

// node_modules/@sitecore/byoc/dist/browser/index.esm.js
var P = (e = {}) => Object.keys(e).reduce((t2, r) => Object.assign(t2, { [b(r)]: e[r] }), {});
var ie = (e = {}) => Object.keys(e).reduce((t2, r) => Object.assign(t2, { [O(r)]: e[r] }), {});
function b(e) {
  let t2 = /[A-Z\u00C0-\u00D6\u00D8-\u00DE]/g;
  return O(e).replace(t2, function(r) {
    return "-" + r.toLowerCase();
  });
}
function O(e) {
  return e = e.replace(/[-_ ]+/g, " "), e = e.charAt(0).toLowerCase() + e.slice(1), e.split(/\s+/).map((t2, r) => r === 0 ? t2 : t2.charAt(0).toUpperCase() + t2.slice(1)).join("");
}
var S = function(e, t2) {
  var r = {};
  for (var i in e) Object.prototype.hasOwnProperty.call(e, i) && t2.indexOf(i) < 0 && (r[i] = e[i]);
  if (e != null && typeof Object.getOwnPropertySymbols == "function") for (var o = 0, i = Object.getOwnPropertySymbols(e); o < i.length; o++) t2.indexOf(i[o]) < 0 && Object.prototype.propertyIsEnumerable.call(e, i[o]) && (r[i[o]] = e[i[o]]);
  return r;
};
function z(e, { name: t2 }) {
  if (t2.charAt(0) != t2.charAt(0).toUpperCase()) throw new Error("Custom types must start with a capital letter");
  h[t2] = e;
}
var h = {};
var Y = () => ({ type: "object", properties: { href: { required: true, type: "string", title: "URL", description: "The URL of the link, except for media items, for which the Url property contains the path to the media item relative to /Sitecore/Media Library." }, text: { type: "string", title: "Text", description: "The text content of the HTML <a> element." }, linktype: { type: "string", enum: ["internal", "external", "media", "anchor", "mailto", "javascript"], default: "internal", title: "Target", description: "The target attribute of the HTML <a> element." }, title: { type: "string", title: "Title", description: "The title attribute of the HTML <a> element." }, class: { type: "string", title: "Class Name", description: "The class attribute of the HTML <a> element." }, target: { type: "string", title: "Target", description: "The target attribute of the HTML <a> element.", enum: ["", "_blank", "_self", "_parent", "_top"] }, anchor: { type: "string", title: "Anchor", description: "The name attribute of the HTML <a> element, without the leading hash character (“#”)." }, querystring: { type: "string", title: "Query String", description: "Query string parameters to add to the URL." } } });
var C = (e) => {
  var { properties: t2 } = e, r = S(e, ["properties"]);
  return Object.assign(Object.assign({}, r), { type: "object", properties: { name: { type: "string" }, displayName: { type: "string" }, id: { type: "string" }, url: { type: "string" }, fields: M(t2) } });
};
function M(e = {}) {
  return { type: "object", properties: Object.keys(e).reduce((t2, r) => {
    let i = e[r], { title: o } = i, c = S(i, ["title"]);
    return Object.assign(Object.assign({}, t2), { [r]: { type: "object", properties: { value: Object.assign({ title: o || r }, e[r]) } } });
  }, {}) };
}
var A = { Link: Y, DropLink: C, DropTree: C, File: () => ({ type: "object", properties: { src: { type: "string", title: "Source", description: "The URL of the file." }, title: { type: "string", title: "Title", description: "Title of a file" }, displayName: { type: "string", title: "Display name", description: "Display name of a file" } } }), Date: () => ({ type: "string", format: "date" }), Datetime: () => ({ type: "string", format: "date-time" }), RichText: () => ({ type: "string" }), Image: (e) => ({ type: "object", properties: Object.assign({ src: { type: "string" } }, e.properties) }), SingleLineText: () => {
}, MultiLineText: () => ({ type: "string" }), Checkbox: () => ({ type: "boolean" }), String: () => ({ type: "string" }), Number: () => ({ type: "number" }), Boolean: () => ({ type: "boolean" }), Item: C, List: (e) => {
  var { properties: t2 } = e, r = S(e, ["properties"]);
  return Object.assign(Object.assign({}, r), { type: "array", items: { type: "object", properties: { name: { type: "string" }, displayName: { type: "string" }, id: { type: "string" }, url: { type: "string" }, fields: M(t2) } } });
} };
Object.keys(A).forEach((e) => {
  z(A[e], { name: e });
});
function T(e, t2) {
  var r = {};
  for (var i in e) {
    let o = e[i];
    o && typeof o == "object" ? Array.isArray(o) ? r[i] = o.map((c) => typeof c == "object" && c ? T(c, t2) : c) : r[i] = T(t2(o), t2) : r[i] = e[i];
  }
  return r;
}
function v(e, t2 = {}) {
  return e = N(Object.assign({ type: "object", properties: {}, required: [] }, e)), T(e, (r) => r.properties ? N(r, t2) : r);
}
function N(e, t2 = {}) {
  var r;
  let i = Object.assign({}, e);
  return i.properties && (i.required = ((r = e.required) === null || r === void 0 ? void 0 : r.slice()) || [], i.properties = Object.keys(i.properties).reduce((o, c) => {
    var a;
    let n = i.properties[c], s2 = (a = h[n == null ? void 0 : n.type]) === null || a === void 0 ? void 0 : a.call(h, n), l = Object.assign(Object.assign(Object.assign({}, s2), n), { type: (s2 == null ? void 0 : s2.type) || n.type, default: t2.hasOwnProperty(c) ? t2[c] : n.default, title: n.title || b(c).split("-").map((d) => d.charAt(0).toUpperCase() + d.slice(1).toLowerCase()).join(" ") });
    return (n != null && n.properties || s2 != null && s2.properties) && (l.properties = Object.assign({}, (s2 == null ? void 0 : s2.properties) || (n == null ? void 0 : n.properties)), Object.keys((s2 == null ? void 0 : s2.properties) || {}).forEach((d) => {
      var f, u;
      l.properties[d] = Object.assign(Object.assign({}, (f = s2 == null ? void 0 : s2.properties) === null || f === void 0 ? void 0 : f[d]), (u = n == null ? void 0 : n.properties) === null || u === void 0 ? void 0 : u[d]);
    })), (n != null && n.items || s2 != null && s2.items) && (l.items = (s2 == null ? void 0 : s2.items) || (n == null ? void 0 : n.items)), l.default === void 0 && delete l.default, "required" in l && typeof l.required == "boolean" && (i.required.indexOf(c) == -1 && i.required.push(c), delete l.required), Object.assign(o, { [c]: l });
  }, {})), Object.assign({ type: "object" }, i);
}
var y = (e, t2) => {
  var r, i, o, c;
  let a = Object.assign({}, e);
  for (var n in t2) typeof t2[n] != "object" || !t2[n] || ((((r = t2[n]) === null || r === void 0 ? void 0 : r.type) == "integer" || ((i = t2[n]) === null || i === void 0 ? void 0 : i.type) == "number") && (a[n] = Object.assign(Object.assign({}, a[n]), { "ui:options": { widget: "updown" } })), !((o = t2[n]) === null || o === void 0) && o.ui && (a[n] = Object.assign(Object.assign({}, a[n]), { "ui:options": Object.assign(Object.assign({}, (c = a[n]) === null || c === void 0 ? void 0 : c["ui:options"]), t2[n].ui) })), a = Object.assign(Object.assign({}, a), { [n]: t2[n].items ? { items: y(a[n], t2[n].items.properties) } : y(a[n], t2[n].properties || {}) }));
  return a;
};
function _(e, t2) {
  switch (t2) {
    case "string":
      return e;
    case "object":
      try {
        return typeof e == "object" && e != null ? e : JSON.parse(e);
      } catch (r) {
        return null;
      }
    case "array":
      try {
        return Array.isArray(e) ? e : JSON.parse(e);
      } catch (r) {
        return null;
      }
    case "number":
      return parseFloat(e);
    case "integer":
      return parseInt(e);
    case "boolean":
      return e == "true" || e == "1";
    default:
      return e;
  }
}
function F(e, t2) {
  return Object.keys(t2).reduce((r, i) => {
    let o = t2[i], c = O(i), a = e == null ? void 0 : e.properties[c], n = a == null ? void 0 : a.type, s2 = _(o, n);
    return s2 != null && !i.startsWith("data-attribute") && !["class", "id", "contenteditable"].includes(i) ? Object.assign(Object.assign({}, r), { [c]: s2 }) : r;
  }, {});
}
function H(e, t2) {
  return Object.assign(Object.assign({}, X(e)), F(e, t2));
}
function X(e) {
  return Object.keys(e.properties).reduce((t2, r) => {
    var i, o;
    return ((i = e.properties[r]) === null || i === void 0 ? void 0 : i.default) != null ? Object.assign(Object.assign({}, t2), { [r]: (o = e.properties[r]) === null || o === void 0 ? void 0 : o.default }) : t2;
  }, {});
}
var j = typeof window != "undefined" ? window.BYOCDatasources || (window.BYOCDatasources = {}) : {};
function k(e, t2) {
  if (typeof e != "function") throw new Error("The first argument of registerDatasource must be a function returning DataSettings or Promise of data");
  if (!t2.id) throw new Error("Missing 'id' property in input");
  if (!/^[a-zA-Z0-9-_]+$/.test(t2.id)) throw new Error("Invalid 'id' property in input. 'id' should only contain alphanumeric characters, hyphens, and underscores.");
  j[t2.id] = Object.assign(Object.assign({}, Q(t2)), { handler: e }), q();
}
function I(e) {
  return j[e];
}
function Q(e) {
  let { id: t2, name: r, title: i, properties: o, sample: c, schema: a, description: n = null, type: s2 = "object" } = e;
  return { id: t2, description: n, sample: c, name: r || i || t2, handler: (l) => l, schema: a || o ? v(Object.assign(Object.assign({}, a || { properties: o, type: s2 }), { title: (a == null ? void 0 : a.title) || i || r })) : void 0 };
}
var U;
function q() {
  clearTimeout(U), typeof window != "undefined" && window.parent !== window && (U = setTimeout(() => {
    var e;
    (e = window.parent) === null || e === void 0 || e.postMessage(JSON.stringify({ action: "register-datasources", data: Object.values(j) }), "*");
  }, 30));
}
q();
function le(e, t2) {
  let r = j[e];
  return r != null && r.handler ? r.handler(t2) : t2;
}
var B = function(e, t2) {
  var r = {};
  for (var i in e) Object.prototype.hasOwnProperty.call(e, i) && t2.indexOf(i) < 0 && (r[i] = e[i]);
  if (e != null && typeof Object.getOwnPropertySymbols == "function") for (var o = 0, i = Object.getOwnPropertySymbols(e); o < i.length; o++) t2.indexOf(i[o]) < 0 && Object.prototype.propertyIsEnumerable.call(e, i[o]) && (r[i[o]] = e[i[o]]);
  return r;
};
function V(e, t2, r) {
  let { thumbnail: i = "https://feaasstatic.blob.core.windows.net/assets/thumbnails/byoc.svg", name: o, id: c = e.name, group: a = null, ui: n, isHidden: s2 = false, datasourceIds: l = [], links: d = {}, meta: f = {}, uiSchema: u, schema: p } = e, g = B(e, ["thumbnail", "name", "id", "group", "ui", "isHidden", "datasourceIds", "links", "meta", "uiSchema", "schema"]), L = p || g || {}, W2 = u || n || {}, m = v(Object.assign(Object.assign({ description: "External component" }, L), { type: "object" }), r), K2 = y(W2, m.properties || {});
  return { component: t2 || (() => null), name: o, schema: m, uiSchema: K2, thumbnail: i, group: a || "Default collection", isHidden: s2, id: c, datasourceIds: l, links: d, meta: f, title: (m == null ? void 0 : m.title) || (g == null ? void 0 : g.title) || o };
}
var J;
var Z = typeof HTMLElement != "undefined" ? HTMLElement : typeof windowJSDOM != "undefined" ? windowJSDOM.HTMLElement : class {
  setAttribute() {
  }
};
var x = typeof window != "undefined" ? window.BYOCComponents || (window.BYOCComponents = {}) : {};
function $(e, t2, r = {}) {
  if (!(t2 != null && t2.name)) throw new Error("Could not register external component. Please make sure you provide a name in the options" + JSON.stringify(t2));
  let i = V(t2, e, r);
  x[i.id] = i, G(e) && w.register("byoc-" + b(t2.name), void 0, e), R();
}
function G(e) {
  return e && "prototype" in e && "setAttribute" in e.prototype;
}
function ee(e, t2 = {}) {
  var r;
  let i = (r = D(e)) === null || r === void 0 ? void 0 : r.schema;
  return i ? H(i, t2) : t2;
}
function D(e) {
  if (typeof e != "string") {
    if (e && "schema" in e) return e;
    throw new Error(`Component name should be a string, got ${typeof e}`);
  }
  let [t2, r] = e.split("?");
  var i = x[t2];
  if (r) {
    let o = x[e];
    if (!o && !i) return null;
    o && (i = Object.assign(Object.assign(Object.assign({}, i), o), { component: o.component || (i == null ? void 0 : i.component) })), r.split(/\&/g).forEach((c) => {
      var a, n, s2;
      let [l, d] = c.split("="), f = ((a = i.schema.properties) === null || a === void 0 ? void 0 : a[l]) || { type: "string" };
      i = Object.assign(Object.assign({}, i), { schema: Object.assign(Object.assign({}, i.schema), { properties: Object.assign(Object.assign({}, i.schema.properties), { [l]: Object.assign(Object.assign({}, f), { default: _(decodeURIComponent(d), f.type) }) }) }), uiSchema: Object.assign(Object.assign({}, i.uiSchema), { [l]: Object.assign(Object.assign({}, i.uiSchema[l]), { "ui:widget": (s2 = (n = i.uiSchema[l]) === null || n === void 0 ? void 0 : n["ui:widget"]) !== null && s2 !== void 0 ? s2 : "hidden" }) }) });
    });
  }
  return i;
}
function be(e) {
  let { componentName: t2, className: r, fallbackWrapper: i, fallback: o, suppressHydrationWarning: c, _dynamic: a, datasources: n } = e, s2 = B(e, ["componentName", "className", "fallbackWrapper", "fallback", "suppressHydrationWarning", "_dynamic", "datasources"]);
  try {
    var l = typeof n == "string" ? JSON.parse(n) : n;
  } catch (p) {
  }
  let d = Object.values(l || {}).find((p) => p && !Array.isArray(p) && Object.keys(p).length > 0), f = Object.assign(Object.assign(Object.assign({}, d), ee(t2, Object.assign(Object.assign({}, d), s2))), l ? { datasources: l } : {}), u = Object.assign(Object.assign({ "data-external-id": t2 }, P(f)), { suppressHydrationWarning: true, class: r });
  return te.forEach((p) => {
    Object.assign(u, { [b(p)]: E[p] });
  }), Object.keys(u).forEach((p) => {
    let g = u[p];
    if (g && typeof g == "object" && p != "class" && p != "children") try {
      Object.assign(u, { [p]: JSON.stringify(g) });
    } catch (L) {
      delete u[p];
    }
    (typeof g == "function" || g == null) && delete u[p];
  }), { attributes: u, properties: f, merged: Object.assign(Object.assign({}, E), f) };
}
function R() {
  clearTimeout(J), typeof window != "undefined" && window.parent !== window && (J = setTimeout(() => {
    var e;
    (e = window.parent) === null || e === void 0 || e.postMessage(JSON.stringify({ action: "register-components", data: Object.values(x) }), "*");
  }, 30));
}
R();
var w = class extends Z {
  connectedCallback() {
    try {
      JSON.parse(String(this.getAttribute("components"))).forEach((t2) => {
        D(t2.id) || $(null, t2);
      }), JSON.parse(String(this.getAttribute("datasources"))).forEach((t2) => {
        I(t2.id) || k((r) => r, t2);
      });
    } catch (t2) {
    }
  }
  static register(t2, r, i = this) {
    r == null && (r = typeof window != "undefined" ? window : void 0), r && !r.customElements.get(t2) && r.customElements.define(t2, class extends i {
    });
  }
};
var E = {};
var te = ["sitecoreEdgeUrl", "sitecoreEdgeContextId"];
w.register("byoc-registration");

// node_modules/@sitecore/byoc/dist/browser/react.esm.js
var import_react3 = __toESM(require_react());
var y2 = function(e, a) {
  var o = {};
  for (var r in e) Object.prototype.hasOwnProperty.call(e, r) && a.indexOf(r) < 0 && (o[r] = e[r]);
  if (e != null && typeof Object.getOwnPropertySymbols == "function") for (var n = 0, r = Object.getOwnPropertySymbols(e); n < r.length; n++) a.indexOf(r[n]) < 0 && Object.prototype.propertyIsEnumerable.call(e, r[n]) && (o[r[n]] = e[r[n]]);
  return o;
};
var b2 = null;
var s = null;
function N2(e) {
  var a;
  let { componentName: o, clientFallback: r } = e, n = y2(e, ["componentName", "clientFallback"]), l = (a = D(o)) === null || a === void 0 ? void 0 : a.component, i = import_react3.default.useMemo(() => import_react3.default.createElement(O2, Object.assign({}, n, { componentName: o })), []), d = import_react3.default.useMemo(() => s(() => Promise.resolve(b2), { ssr: false, loading: () => i }), []);
  var c = typeof window == "undefined" ? JSON.parse(JSON.stringify(n)) : n;
  return import_react3.default.createElement(d, Object.assign({}, c, { componentName: o, fallbackWrapper: !l, fallback: l ? i : r ? import_react3.default.createElement(s(() => Promise.resolve(() => r), { ssr: false })) : e.fallback }));
}
function _2(e) {
  return Object.keys(e).length == 0 ? import_react3.default.createElement(import_react3.default.Fragment, null) : s && !e._dynamic ? N2(Object.assign({ _dynamic: true }, e)) : O2(e);
}
function O2(e) {
  let { componentName: a, fallback: o, fallbackWrapper: r } = e, n = D(a), l = n == null ? void 0 : n.component, { attributes: i, properties: d, merged: c } = be(e);
  if (!l && o || !a) return r === false ? import_react3.default.createElement(import_react3.default.Fragment, null, o) : import_react3.default.createElement("feaas-external", Object.assign({}, i, { hydrate: "false" }), o);
  if (n && l && G(l)) {
    let p = "byoc-" + b(n.id);
    return import_react3.default.createElement(p, Object.assign(Object.assign({}, i), { ref: (m) => {
      var u;
      m && typeof window != "undefined" && ((u = window.customElements) === null || u === void 0 || u.whenDefined(p).then(() => {
        var f;
        (f = m.sitecoreContextCallback) === null || f === void 0 || f.call(m, Object.assign({}, c));
      }));
    } }));
  }
  return import_react3.default.createElement(import_react3.default.Fragment, null, import_react3.default.createElement("feaas-external", Object.assign({}, i, { hydrate: "false" }), l == null ? null : import_react3.default.createElement(l, Object.assign({}, c))));
}

// node_modules/@sitecore-feaas/clientside/dist/browser/react.esm.js
var import_react4 = __toESM(require_react());
var import_react5 = __toESM(require_react());
var import_react_dom = __toESM(require_react_dom());
var Xe = Object.defineProperty;
var dt = (t2, e) => {
  for (var r in e) Xe(t2, r, { get: e[r], enumerable: true });
};
var Dt = {};
dt(Dt, { renderDOMContent: () => G2, renderDOMElement: () => O3, renderHTMLContent: () => Ee, setDOMAttribute: () => W });
var _t = {};
dt(_t, { JSONPath: () => v2, queryObject: () => et, queryObjectRaw: () => zt, queryScopes: () => ft, serializeCH1RichText: () => q2 });
function T2(t2) {
  return T2 = typeof Symbol == "function" && typeof Symbol.iterator == "symbol" ? function(e) {
    return typeof e;
  } : function(e) {
    return e && typeof Symbol == "function" && e.constructor === Symbol && e !== Symbol.prototype ? "symbol" : typeof e;
  }, T2(t2);
}
function oe(t2, e) {
  if (!(t2 instanceof e)) throw new TypeError("Cannot call a class as a function");
}
function ie2(t2, e) {
  for (var r = 0; r < e.length; r++) {
    var n = e[r];
    n.enumerable = n.enumerable || false, n.configurable = true, "value" in n && (n.writable = true), Object.defineProperty(t2, n.key, n);
  }
}
function se(t2, e, r) {
  return e && ie2(t2.prototype, e), r && ie2(t2, r), Object.defineProperty(t2, "prototype", { writable: false }), t2;
}
function Qe(t2, e) {
  if (typeof e != "function" && e !== null) throw new TypeError("Super expression must either be null or a function");
  t2.prototype = Object.create(e && e.prototype, { constructor: { value: t2, writable: true, configurable: true } }), Object.defineProperty(t2, "prototype", { writable: false }), e && pt(t2, e);
}
function ht(t2) {
  return ht = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function(r) {
    return r.__proto__ || Object.getPrototypeOf(r);
  }, ht(t2);
}
function pt(t2, e) {
  return pt = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function(n, i) {
    return n.__proto__ = i, n;
  }, pt(t2, e);
}
function ae() {
  if (typeof Reflect > "u" || !Reflect.construct || Reflect.construct.sham) return false;
  if (typeof Proxy == "function") return true;
  try {
    return Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
    })), true;
  } catch {
    return false;
  }
}
function ut(t2, e, r) {
  return ae() ? ut = Reflect.construct.bind() : ut = function(i, o, s2) {
    var a = [null];
    a.push.apply(a, o);
    var l = Function.bind.apply(i, a), d = new l();
    return s2 && pt(d, s2.prototype), d;
  }, ut.apply(null, arguments);
}
function Ze(t2) {
  return Function.toString.call(t2).indexOf("[native code]") !== -1;
}
function Bt(t2) {
  var e = typeof Map == "function" ? /* @__PURE__ */ new Map() : void 0;
  return Bt = function(n) {
    if (n === null || !Ze(n)) return n;
    if (typeof n != "function") throw new TypeError("Super expression must either be null or a function");
    if (typeof e < "u") {
      if (e.has(n)) return e.get(n);
      e.set(n, i);
    }
    function i() {
      return ut(n, arguments, ht(this).constructor);
    }
    return i.prototype = Object.create(n.prototype, { constructor: { value: i, enumerable: false, writable: true, configurable: true } }), pt(i, n);
  }, Bt(t2);
}
function tr(t2) {
  if (t2 === void 0) throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
  return t2;
}
function er(t2, e) {
  if (e && (typeof e == "object" || typeof e == "function")) return e;
  if (e !== void 0) throw new TypeError("Derived constructors may only return object or undefined");
  return tr(t2);
}
function rr(t2) {
  var e = ae();
  return function() {
    var n = ht(t2), i;
    if (e) {
      var o = ht(this).constructor;
      i = Reflect.construct(n, arguments, o);
    } else i = n.apply(this, arguments);
    return er(this, i);
  };
}
function nr(t2) {
  return ir(t2) || or(t2) || le2(t2) || sr();
}
function ir(t2) {
  if (Array.isArray(t2)) return Ut(t2);
}
function or(t2) {
  if (typeof Symbol < "u" && t2[Symbol.iterator] != null || t2["@@iterator"] != null) return Array.from(t2);
}
function le2(t2, e) {
  if (t2) {
    if (typeof t2 == "string") return Ut(t2, e);
    var r = Object.prototype.toString.call(t2).slice(8, -1);
    if (r === "Object" && t2.constructor && (r = t2.constructor.name), r === "Map" || r === "Set") return Array.from(t2);
    if (r === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r)) return Ut(t2, e);
  }
}
function Ut(t2, e) {
  (e == null || e > t2.length) && (e = t2.length);
  for (var r = 0, n = new Array(e); r < e; r++) n[r] = t2[r];
  return n;
}
function sr() {
  throw new TypeError(`Invalid attempt to spread non-iterable instance.
In order to be iterable, non-array objects must have a [Symbol.iterator]() method.`);
}
function ar(t2, e) {
  var r = typeof Symbol < "u" && t2[Symbol.iterator] || t2["@@iterator"];
  if (!r) {
    if (Array.isArray(t2) || (r = le2(t2)) || e && t2 && typeof t2.length == "number") {
      r && (t2 = r);
      var n = 0, i = function() {
      };
      return { s: i, n: function() {
        return n >= t2.length ? { done: true } : { done: false, value: t2[n++] };
      }, e: function(l) {
        throw l;
      }, f: i };
    }
    throw new TypeError(`Invalid attempt to iterate non-iterable instance.
In order to be iterable, non-array objects must have a [Symbol.iterator]() method.`);
  }
  var o = true, s2 = false, a;
  return { s: function() {
    r = r.call(t2);
  }, n: function() {
    var l = r.next();
    return o = l.done, l;
  }, e: function(l) {
    s2 = true, a = l;
  }, f: function() {
    try {
      !o && r.return != null && r.return();
    } finally {
      if (s2) throw a;
    }
  } };
}
var _3 = Object.prototype.hasOwnProperty;
function Y2(t2, e) {
  return t2 = t2.slice(), t2.push(e), t2;
}
function Wt(t2, e) {
  return e = e.slice(), e.unshift(t2), e;
}
var lr = function(t2) {
  Qe(r, t2);
  var e = rr(r);
  function r(n) {
    var i;
    return oe(this, r), i = e.call(this, 'JSONPath should not be called with "new" (it prevents return of (unwrapped) scalar values)'), i.avoidNew = true, i.value = n, i.name = "NewError", i;
  }
  return se(r);
}(Bt(Error));
function v2(t2, e, r, n, i) {
  if (!(this instanceof v2)) try {
    return new v2(t2, e, r, n, i);
  } catch (l) {
    if (!l.avoidNew) throw l;
    return l.value;
  }
  typeof t2 == "string" && (i = n, n = r, r = e, e = t2, t2 = null);
  var o = t2 && T2(t2) === "object";
  if (t2 = t2 || {}, this.json = t2.json || r, this.path = t2.path || e, this.resultType = t2.resultType || "value", this.flatten = t2.flatten || false, this.wrap = _3.call(t2, "wrap") ? t2.wrap : true, this.sandbox = t2.sandbox || {}, this.preventEval = t2.preventEval || false, this.parent = t2.parent || null, this.parentProperty = t2.parentProperty || null, this.callback = t2.callback || n || null, this.otherTypeCallback = t2.otherTypeCallback || i || function() {
    throw new TypeError("You must supply an otherTypeCallback callback option with the @other() operator.");
  }, t2.autostart !== false) {
    var s2 = { path: o ? t2.path : e };
    o ? "json" in t2 && (s2.json = t2.json) : s2.json = r;
    var a = this.evaluate(s2);
    if (!a || T2(a) !== "object") throw new lr(a);
    return a;
  }
}
v2.prototype.evaluate = function(t2, e, r, n) {
  var i = this, o = this.parent, s2 = this.parentProperty, a = this.flatten, l = this.wrap;
  if (this.currResultType = this.resultType, this.currPreventEval = this.preventEval, this.currSandbox = this.sandbox, r = r || this.callback, this.currOtherTypeCallback = n || this.otherTypeCallback, e = e || this.json, t2 = t2 || this.path, t2 && T2(t2) === "object" && !Array.isArray(t2)) {
    if (!t2.path && t2.path !== "") throw new TypeError('You must supply a "path" property when providing an object argument to JSONPath.evaluate().');
    if (!_3.call(t2, "json")) throw new TypeError('You must supply a "json" property when providing an object argument to JSONPath.evaluate().');
    var d = t2;
    e = d.json, a = _3.call(t2, "flatten") ? t2.flatten : a, this.currResultType = _3.call(t2, "resultType") ? t2.resultType : this.currResultType, this.currSandbox = _3.call(t2, "sandbox") ? t2.sandbox : this.currSandbox, l = _3.call(t2, "wrap") ? t2.wrap : l, this.currPreventEval = _3.call(t2, "preventEval") ? t2.preventEval : this.currPreventEval, r = _3.call(t2, "callback") ? t2.callback : r, this.currOtherTypeCallback = _3.call(t2, "otherTypeCallback") ? t2.otherTypeCallback : this.currOtherTypeCallback, o = _3.call(t2, "parent") ? t2.parent : o, s2 = _3.call(t2, "parentProperty") ? t2.parentProperty : s2, t2 = t2.path;
  }
  if (o = o || null, s2 = s2 || null, Array.isArray(t2) && (t2 = v2.toPathString(t2)), !(!t2 && t2 !== "" || !e)) {
    var c = v2.toPathArray(t2);
    c[0] === "$" && c.length > 1 && c.shift(), this._hasParentSelector = null;
    var h2 = this._trace(c, e, ["$"], o, s2, r).filter(function(u) {
      return u && !u.isParentSelector;
    });
    return h2.length ? !l && h2.length === 1 && !h2[0].hasArrExpr ? this._getPreferredOutput(h2[0]) : h2.reduce(function(u, p) {
      var f = i._getPreferredOutput(p);
      return a && Array.isArray(f) ? u = u.concat(f) : u.push(f), u;
    }, []) : l ? [] : void 0;
  }
};
v2.prototype._getPreferredOutput = function(t2) {
  var e = this.currResultType;
  switch (e) {
    case "all": {
      var r = Array.isArray(t2.path) ? t2.path : v2.toPathArray(t2.path);
      return t2.pointer = v2.toPointer(r), t2.path = typeof t2.path == "string" ? t2.path : v2.toPathString(t2.path), t2;
    }
    case "value":
    case "parent":
    case "parentProperty":
      return t2[e];
    case "path":
      return v2.toPathString(t2[e]);
    case "pointer":
      return v2.toPointer(t2.path);
    default:
      throw new TypeError("Unknown result type");
  }
};
v2.prototype._handleCallback = function(t2, e, r) {
  if (e) {
    var n = this._getPreferredOutput(t2);
    t2.path = typeof t2.path == "string" ? t2.path : v2.toPathString(t2.path), e(n, r, t2);
  }
};
v2.prototype._trace = function(t2, e, r, n, i, o, s2, a) {
  var l = this, d;
  if (!t2.length) return d = { path: r, value: e, parent: n, parentProperty: i, hasArrExpr: s2 }, this._handleCallback(d, o, "value"), d;
  var c = t2[0], h2 = t2.slice(1), u = [];
  function p(b3) {
    Array.isArray(b3) ? b3.forEach(function(y3) {
      u.push(y3);
    }) : u.push(b3);
  }
  if ((typeof c != "string" || a) && e && _3.call(e, c)) p(this._trace(h2, e[c], Y2(r, c), e, c, o, s2));
  else if (c === "*") this._walk(e, function(b3) {
    p(l._trace(h2, e[b3], Y2(r, b3), e, b3, o, true, true));
  });
  else if (c === "..") p(this._trace(h2, e, r, n, i, o, s2)), this._walk(e, function(b3) {
    T2(e[b3]) === "object" && p(l._trace(t2.slice(), e[b3], Y2(r, b3), e, b3, o, true));
  });
  else {
    if (c === "^") return this._hasParentSelector = true, { path: r.slice(0, -1), expr: h2, isParentSelector: true };
    if (c === "~") return d = { path: Y2(r, c), value: i, parent: n, parentProperty: null }, this._handleCallback(d, o, "property"), d;
    if (c === "$") p(this._trace(h2, e, r, null, null, o, s2));
    else if (/^(\x2D?[0-9]*):(\x2D?[0-9]*):?([0-9]*)$/.test(c)) p(this._slice(c, h2, e, r, n, i, o));
    else if (c.indexOf("?(") === 0) {
      if (this.currPreventEval) throw new Error("Eval [?(expr)] prevented in JSONPath expression.");
      var f = c.replace(/^\?\(((?:[\0-\t\x0B\f\x0E-\u2027\u202A-\uD7FF\uE000-\uFFFF]|[\uD800-\uDBFF][\uDC00-\uDFFF]|[\uD800-\uDBFF](?![\uDC00-\uDFFF])|(?:[^\uD800-\uDBFF]|^)[\uDC00-\uDFFF])*?)\)$/, "$1");
      this._walk(e, function(b3) {
        l._eval(f, e[b3], b3, r, n, i) && p(l._trace(h2, e[b3], Y2(r, b3), e, b3, o, true));
      });
    } else if (c[0] === "(") {
      if (this.currPreventEval) throw new Error("Eval [(expr)] prevented in JSONPath expression.");
      p(this._trace(Wt(this._eval(c, e, r[r.length - 1], r.slice(0, -1), n, i), h2), e, r, n, i, o, s2));
    } else if (c[0] === "@") {
      var m = false, g = c.slice(1, -2);
      switch (g) {
        case "scalar":
          (!e || !["object", "function"].includes(T2(e))) && (m = true);
          break;
        case "boolean":
        case "string":
        case "undefined":
        case "function":
          T2(e) === g && (m = true);
          break;
        case "integer":
          Number.isFinite(e) && !(e % 1) && (m = true);
          break;
        case "number":
          Number.isFinite(e) && (m = true);
          break;
        case "nonFinite":
          typeof e == "number" && !Number.isFinite(e) && (m = true);
          break;
        case "object":
          e && T2(e) === g && (m = true);
          break;
        case "array":
          Array.isArray(e) && (m = true);
          break;
        case "other":
          m = this.currOtherTypeCallback(e, r, n, i);
          break;
        case "null":
          e === null && (m = true);
          break;
        default:
          throw new TypeError("Unknown value type " + g);
      }
      if (m) return d = { path: r, value: e, parent: n, parentProperty: i }, this._handleCallback(d, o, "value"), d;
    } else if (c[0] === "`" && e && _3.call(e, c.slice(1))) {
      var C2 = c.slice(1);
      p(this._trace(h2, e[C2], Y2(r, C2), e, C2, o, s2, true));
    } else if (c.includes(",")) {
      var N3 = c.split(","), L = ar(N3), tt;
      try {
        for (L.s(); !(tt = L.n()).done; ) {
          var St = tt.value;
          p(this._trace(Wt(St, h2), e, r, n, i, o, true));
        }
      } catch (b3) {
        L.e(b3);
      } finally {
        L.f();
      }
    } else !a && e && _3.call(e, c) && p(this._trace(h2, e[c], Y2(r, c), e, c, o, s2, true));
  }
  if (this._hasParentSelector) for (var k3 = 0; k3 < u.length; k3++) {
    var B2 = u[k3];
    if (B2 && B2.isParentSelector) {
      var S2 = this._trace(B2.expr, e, B2.path, n, i, o, s2);
      if (Array.isArray(S2)) {
        u[k3] = S2[0];
        for (var ot = S2.length, V2 = 1; V2 < ot; V2++) k3++, u.splice(k3, 0, S2[V2]);
      } else u[k3] = S2;
    }
  }
  return u;
};
v2.prototype._walk = function(t2, e) {
  if (Array.isArray(t2)) for (var r = t2.length, n = 0; n < r; n++) e(n);
  else t2 && T2(t2) === "object" && Object.keys(t2).forEach(function(i) {
    e(i);
  });
};
v2.prototype._slice = function(t2, e, r, n, i, o, s2) {
  if (Array.isArray(r)) {
    var a = r.length, l = t2.split(":"), d = l[2] && Number.parseInt(l[2]) || 1, c = l[0] && Number.parseInt(l[0]) || 0, h2 = l[1] && Number.parseInt(l[1]) || a;
    c = c < 0 ? Math.max(0, c + a) : Math.min(a, c), h2 = h2 < 0 ? Math.max(0, h2 + a) : Math.min(a, h2);
    for (var u = [], p = c; p < h2; p += d) {
      var f = this._trace(Wt(p, e), r, n, i, o, s2, true);
      f.forEach(function(m) {
        u.push(m);
      });
    }
    return u;
  }
};
v2.prototype._eval = function(t2, e, r, n, i, o) {
  this.currSandbox._$_parentProperty = o, this.currSandbox._$_parent = i, this.currSandbox._$_property = r, this.currSandbox._$_root = this.json, this.currSandbox._$_v = e;
  var s2 = t2.includes("@path");
  s2 && (this.currSandbox._$_path = v2.toPathString(n.concat([r])));
  var a = "script:" + t2;
  if (!v2.cache[a]) {
    var l = t2.replace(/@parentProperty/g, "_$_parentProperty").replace(/@parent/g, "_$_parent").replace(/@property/g, "_$_property").replace(/@root/g, "_$_root").replace(/@([\t-\r \)\.\[\xA0\u1680\u2000-\u200A\u2028\u2029\u202F\u205F\u3000\uFEFF])/g, "_$_v$1");
    s2 && (l = l.replace(/@path/g, "_$_path")), v2.cache[a] = new this.vm.Script(l);
  }
  try {
    return v2.cache[a].runInNewContext(this.currSandbox);
  } catch (d) {
    throw new Error("jsonPath: " + d.message + ": " + t2);
  }
};
v2.cache = {};
v2.toPathString = function(t2) {
  for (var e = t2, r = e.length, n = "$", i = 1; i < r; i++) /^(~|\^|@(?:[\0-\t\x0B\f\x0E-\u2027\u202A-\uD7FF\uE000-\uFFFF]|[\uD800-\uDBFF][\uDC00-\uDFFF]|[\uD800-\uDBFF](?![\uDC00-\uDFFF])|(?:[^\uD800-\uDBFF]|^)[\uDC00-\uDFFF])*?\(\))$/.test(e[i]) || (n += /^[\*0-9]+$/.test(e[i]) ? "[" + e[i] + "]" : "['" + e[i] + "']");
  return n;
};
v2.toPointer = function(t2) {
  for (var e = t2, r = e.length, n = "", i = 1; i < r; i++) /^(~|\^|@(?:[\0-\t\x0B\f\x0E-\u2027\u202A-\uD7FF\uE000-\uFFFF]|[\uD800-\uDBFF][\uDC00-\uDFFF]|[\uD800-\uDBFF](?![\uDC00-\uDFFF])|(?:[^\uD800-\uDBFF]|^)[\uDC00-\uDFFF])*?\(\))$/.test(e[i]) || (n += "/" + e[i].toString().replace(/~/g, "~0").replace(/\//g, "~1"));
  return n;
};
v2.toPathArray = function(t2) {
  var e = v2.cache;
  if (e[t2]) return e[t2].concat();
  var r = [], n = t2.replace(/@(?:null|boolean|number|string|integer|undefined|nonFinite|scalar|array|object|function|other)\(\)/g, ";$&;").replace(/['\[](\??\((?:[\0-\t\x0B\f\x0E-\u2027\u202A-\uD7FF\uE000-\uFFFF]|[\uD800-\uDBFF][\uDC00-\uDFFF]|[\uD800-\uDBFF](?![\uDC00-\uDFFF])|(?:[^\uD800-\uDBFF]|^)[\uDC00-\uDFFF])*?\))['\]]/g, function(o, s2) {
    return "[#" + (r.push(s2) - 1) + "]";
  }).replace(/\[["']((?:(?!['\]])[\s\S])*)["']\]/g, function(o, s2) {
    return "['" + s2.replace(/\./g, "%@%").replace(/~/g, "%%@@%%") + "']";
  }).replace(/~/g, ";~;").replace(/["']?\.["']?(?!(?:(?!\[)[\s\S])*\])|\[["']?/g, ";").replace(/%@%/g, ".").replace(/%%@@%%/g, "~").replace(/(?:;)?(\^+)(?:;)?/g, function(o, s2) {
    return ";" + s2.split("").join(";") + ";";
  }).replace(/;;;|;;/g, ";..;").replace(/;$|'?\]|'$/g, ""), i = n.split(";").map(function(o) {
    var s2 = o.match(/#([0-9]+)/);
    return !s2 || !s2[1] ? o : r[s2[1]];
  });
  return e[t2] = i, e[t2].concat();
};
var cr = function(e, r, n) {
  for (var i = e.length, o = 0; o < i; o++) {
    var s2 = e[o];
    n(s2) && r.push(e.splice(o--, 1)[0]);
  }
};
var dr = function() {
  function t2(e) {
    oe(this, t2), this.code = e;
  }
  return se(t2, [{ key: "runInNewContext", value: function(r) {
    var n = this.code, i = Object.keys(r), o = [];
    cr(i, o, function(c) {
      return typeof r[c] == "function";
    });
    var s2 = i.map(function(c, h2) {
      return r[c];
    }), a = o.reduce(function(c, h2) {
      var u = r[h2].toString();
      return /function/.test(u) || (u = "function " + u), "var " + h2 + "=" + u + ";" + c;
    }, "");
    n = a + n, !/(["'])use strict\1/.test(n) && !i.includes("arguments") && (n = "var arguments = undefined;" + n), n = n.replace(/;[\t-\r \xA0\u1680\u2000-\u200A\u2028\u2029\u202F\u205F\u3000\uFEFF]*$/, "");
    var l = n.lastIndexOf(";"), d = l > -1 ? n.slice(0, l + 1) + " return " + n.slice(l + 1) : " return " + n;
    return ut(Function, i.concat([d])).apply(void 0, nr(s2));
  } }]), t2;
}();
v2.prototype.vm = { Script: dr };
function zt(t2, e) {
  try {
    return v2({ path: e, json: t2 });
  } catch (r) {
    return [];
  }
}
function et(t2, e, r = true) {
  let n = zt(t2, e) || [];
  return r ? n.flat(1 / 0) : n;
}
function ft(t2, e, r = false, n = t2, i = true) {
  var o = e;
  let s2 = Object.keys(t2).sort((l, d) => d.length - l.length);
  for (let l of s2) if (e.startsWith(l)) {
    if (l == e) {
      if (r) return t2[l];
      continue;
    }
    o = e.substring(l.length + 1), n = t2[l];
    break;
  }
  var a = et(n, o, i);
  return a.length == 0 && (a = [o.replace(/^.*?\./, "_."), o.replace(/^.*?\./, ""), o.replace(/^([^.]+).*?\.\$([\.\[])/, "$1$2"), o.replace(/^.*?\.\$([\.\[])/, "_$1"), o.replace(/^.*?\.\$([\.\[])/, "$$$1"), o.replace(/^[^.]+$/, "_")].filter((l, d, c) => c.indexOf(l) === d).reduce((l, d) => l.length > 0 ? l : et(n, d, i), [])), r ? a[0] : a;
}
function Ht(t2, e = {}, r) {
  return r ? `<${r}${Object.entries(e).map(([n, i]) => i != null && ` ${n}="${i}"`).filter(Boolean).join("")}>${q2(t2)}</${r}>`.replace(/^<([a-z0-9][^>]*)><\/[^>]+>$/, "<$1 />") : q2(t2);
}
function q2(t2) {
  var e;
  if (Array.isArray(t2)) return t2.map(q2).join(`
`).trim();
  if (typeof t2 == "string") return t2;
  if (t2 == null) return "";
  switch (t2.type) {
    case "heading":
      let { level: r, ...n } = t2.attrs;
      return Ht(t2.content, n, "h" + r);
    case "text":
      return (t2.marks || []).reduce((i, o) => Ht(i, o.attrs, { link: "a", bold: "strong", italic: "em", strike: "s", underline: "u" }[o.type]), (e = t2.text) === null || e === void 0 ? void 0 : e.replace(/\s+/, " "));
    default:
      return Ht(t2.content || t2.text, t2.attrs, { bulletList: "ul", orderedList: "ol", listItem: "li", horizontalRule: "hr", paragraph: "p", codeBlock: "code", blockquote: "blockquote" }[t2.type]);
  }
}
function ce(t2) {
  let e = new t2.ownerDocument.defaultView.MutationObserver((r) => {
    r.forEach((n) => {
      let i = n.target, o = i.getAttribute("data-embed-src");
      o && mt(i, o), n.addedNodes && n.addedNodes.forEach((s2) => {
        s2.nodeType == 1 && de(s2, false);
      });
    });
  });
  return e.observe(t2, { attributes: true, subtree: true, childList: true }), e;
}
function de(t2, e = true) {
  let r = t2.querySelectorAll("[data-embed-src]");
  for (var n = 0; n < r.length; n++) {
    let i = r[n];
    mt(i, i.getAttribute("data-embed-src"));
  }
  if (e) return ce(t2);
}
function mt(t2, e) {
  for (var r = t2; r; r = r.parentElement) if (!r.parentElement) {
    let i = r.querySelectorAll("script");
    for (var n = 0; n < i.length; n++) if (i[n].getAttribute("src") == e) return true;
    r.tagName == "HTML" && (r = r.querySelector("head") || r);
    let o = r.ownerDocument.createElement("script");
    o.setAttribute("type", "module"), o.setAttribute("src", e), r.appendChild(o);
    break;
  }
}
var Ot = {};
dt(Ot, { adjustNumbers: () => fe, cleanCollectionBit: () => vt, getHumanizedLabel: () => me2, getLastPathBit: () => ve, getQualifier: () => pe, normalizeCollectionScope: () => Ft, parseLimit: () => ue, parseRange: () => he });
var ue = (t2) => {
  var e;
  let r = parseInt((e = t2 == null ? void 0 : t2.match(/\[0:(\d+)\]/)) === null || e === void 0 ? void 0 : e[1], 10);
  return !isNaN(r) && r > 0 ? String(r) : null;
};
var he = (t2) => {
  var e;
  let r = (e = t2 == null ? void 0 : t2.match(/\[([^\]]+)\]/)) === null || e === void 0 ? void 0 : e[1].split(/\s*,\s*/g).filter(Boolean).map((n) => {
    if (n.match(/^-?\d+$/)) return n;
    let i = n.match(/^(\d+):(\d+)$/);
    return i && parseInt(i[1], 10) < parseInt(i[2], 10) ? i[1] + "-" + i[2] : null;
  });
  return r != null && r.every(Boolean) ? r.join(",") : null;
};
var pe = (t2) => {
  var e;
  return (e = t2 == null ? void 0 : t2.match(/(\.\*|\[[^\]]*\])$/)) === null || e === void 0 ? void 0 : e[0];
};
function vt(t2) {
  return t2.replace(/(\.?\[[^\]\[]*\]|\.\*)$/g, "");
}
function Ft(t2) {
  return vt(t2) + ".*";
}
function fe(t2, e) {
  return t2 == null ? void 0 : t2.replace(/(.|^)(\d+)/g, (r, n, i) => n + (n == ":" ? i : String(parseInt(i) + e)));
}
function me2(t2, e = 2) {
  var r = vt(t2).split(/]\.|\.\*\./g).pop().split(/\./g).slice(-3);
  return r = r.filter((n) => isNaN(parseInt(n))), r.map((n) => n.charAt(0).toUpperCase() + n.slice(1)).slice(-e).join(" ");
}
function ve(t2) {
  return vt(t2).split(".").pop();
}
var ur = ["January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December"];
var ge = (t2) => {
  if (!t2 || typeof t2.getDay != "function") return;
  let e = t2.getFullYear(), r = ur[t2.getMonth()], n = t2.getDate();
  return `${r} ${n}, ${e}`;
};
var ye = function(t2) {
  return String(new Date(t2)) !== "Invalid Date" && !isNaN(Number(new Date(t2)));
};
function Ae(t2) {
  let e = t2.getAttribute("data-path-scope");
  for (var r = 0, n = t2; n = n.previousElementSibling; ) n.getAttribute("data-path-scope") == e && r++;
  return r;
}
function hr(t2, e, r) {
  let n = t2.getAttribute("data-path-scope");
  if (n == null) return;
  var i = Ae(t2);
  if (i != 0) return;
  let o = t2.parentNode;
  if (o != null) {
    e == 0 ? t2.setAttribute("hidden", "hidden") : t2.getAttribute("hidden") != null && t2.removeAttribute("hidden");
    for (var s2 = i + 1, a = t2, l = t2; l = l.nextElementSibling; ) l.getAttribute("data-path-scope") == n && (s2++, a = l);
    for (var d = s2; d < e; d++) o.insertBefore(a.cloneNode(true), a.nextElementSibling);
    for (var d = Math.max(1, e); d < s2; d++) a = a.previousElementSibling, o.removeChild(a.nextElementSibling);
  }
}
function W(t2, e, r, n) {
  var i, o, s2;
  if (!t2) return;
  var a = t2;
  (r == null ? void 0 : r.type) == "doc" && Array.isArray(r.content) && (r = q2(r)), n != null && n.processValue && (r = n == null ? void 0 : n.processValue(t2, e, r));
  var l = e.replace("data-path-", "");
  if (e == "data-path-src" || e == "data-path-alt") {
    let g = Array.from(t2.children).find((C2) => C2.localName == "picture") || t2;
    a = t2.localName == "img" ? t2 : g.querySelector("img, video");
  } else if (e == "data-path-href") a = t2.querySelector("a") || t2.closest("a");
  else if (e == "data-path-hidden") r = r ? null : true;
  else if (e == "data-path" || e == "data-embed-html" || e == "html") l = "innerHTML";
  else if (e == "data-embed-src") mt(t2, r);
  else if (e == "data-path-attributes") {
    if (!Array.isArray(r)) {
      let g = ((i = t2.getAttribute("data-attributes-keys")) === null || i === void 0 ? void 0 : i.split(",").filter(Boolean)) || [];
      if (!Array.isArray(r)) for (var d in r) {
        var c = r[d];
        W(t2, d, typeof c == "object" && c ? JSON.stringify(c) : c, n);
      }
      for (var h2 = 0; h2 < g.length; h2++) (r == null || !(g[h2] in r)) && W(t2, g[h2], null, n);
      W(t2, "data-attributes-keys", Object.keys(r || {}).join(","));
    }
    if (t2.tagName == "FEAAS-EXTERNAL") {
      let g = String(t2.getAttribute("data-path-attributes") || "").slice(0, -1).split(".")[0] || "_";
      W(t2, "datasources", JSON.stringify({ [g]: r }));
    }
    return;
  }
  if (typeof r == "boolean" && (r = r ? "" : null), !a) return;
  if ((l == "innerHTML" || l == "src") && (r == null || r === "")) {
    var p = String((s2 = (o = t2.getAttribute("data-path-placeholder") || a[l]) !== null && o !== void 0 ? o : a.getAttribute(l)) !== null && s2 !== void 0 ? s2 : "");
    l == "innerHTML" ? a.innerHTML = p : p ? a.setAttribute(l, p) : a.removeAttribute(l);
  } else if (r != null) if (l == "innerHTML") {
    for (var f = String(r), m = a; m.parentElement && m.localName.match(/^(a|var|strong|em|i|b)$/); ) m = m.parentElement;
    m.localName.match(/p|h\d|button|time|li/) && (f = f.replace(/<(p|h\d|li|ul)[^>]*?>|<\/(p|h\d|li|ul)[^>]*?>/g, " ").trim().replace(/\s+/g, " ")), String(m.getAttribute("class")).includes("-inline--time") && ye(f) && (f = ge(new Date(f))), a.innerHTML != f && (a.innerHTML = f);
  } else a.getAttribute(l) != r && a.setAttribute(l, r);
  else a.removeAttribute(l);
}
var be2 = ["data-attributes-keys", "data-path-attributes", "data-path-scope"];
function O3(t2, e, r, n) {
  var i, o, s2;
  let a = t2;
  if (n || (e = ((i = r == null ? void 0 : r.processData) === null || i === void 0 ? void 0 : i.call(r, a, e)) || e), a.nodeType == 1) {
    let c = a.getAttribute("data-path-scope");
    if (c) {
      let u = Ae(a), p = ft(e, c, false);
      u == 0 && hr(a, ((o = r == null ? void 0 : r.shouldRepeat) === null || o === void 0 ? void 0 : o.call(r, a, p)) === false ? 1 : p.length, r), e = { ...e, [Ft(c)]: p[u] };
    }
    let h2 = Array.prototype.slice.call(a.attributes).sort((u, p) => be2.indexOf(u.name) - be2.indexOf(p.name));
    for (var l = 0; l < h2.length; l++) {
      let { name: u, value: p } = h2[l];
      u.startsWith("data-path") && u != "data-path-scope" && W(a, u, ft(e, p, true, void 0, a.tagName != "FEAAS-EXTERNAL"), r), u == "data-embed-src" && W(a, u, a.getAttribute(u), r);
    }
  }
  for (var l = 0, d; d = a.childNodes[l++]; ) Ce(d) && O3(d, e, r, true);
  return n || (s2 = r == null ? void 0 : r.onRender) === null || s2 === void 0 || s2.call(r, a, e), a;
}
function Ce(t2) {
  return t2.nodeType == 1;
}
function G2(t2, e, r, n) {
  var i;
  let o = ((i = n == null ? void 0 : n.processTemplate) === null || i === void 0 ? void 0 : i.call(n, t2, e, r)) || e;
  if (t2.innerHTML = o, t2.classList.add("-feaas"), (t2.closest(".component.feaas") || t2).className.includes("-theme--")) for (var a = 0, l; l = t2.childNodes[a++]; ) Ce(l) && (l.className = l.className.replace(/(\s|^)-theme--[^\s]+\s*/g, "$1"));
  return O3(t2, r, n);
}
function Ee(t2, e, r, n = false) {
  var i;
  let o = ((i = r == null ? void 0 : r.processTemplate) === null || i === void 0 ? void 0 : i.call(r, null, t2, e)) || t2;
  if (typeof document == "undefined" || n) {
    let s2 = Nt(o);
    return O3(s2[0], e, r).outerHTML;
  } else {
    let s2 = document.createElement("div");
    return s2.innerHTML = o, O3(s2, e, r), s2.innerHTML;
  }
}
var H2 = class {
  constructor(e, r = 1, n) {
    this.ownerDocument = { createElement(i) {
      return new H2(i);
    }, createDocumentFragment() {
      return new H2(null, 11);
    } }, this.nodeName = e, this.nodeType = r, this.textContent = n, this.attributes = [], this.childNodes = [];
  }
  setAttribute(e, r) {
    let n = this.attributes.find((i) => i.name === e);
    n ? n.value = r : this.attributes.push({ name: e, value: r });
  }
  getAttribute(e) {
    let r = this.attributes.find((n) => n.name === e);
    return r ? r.value : void 0;
  }
  insertBefore(e, r) {
    if (e.parentNode = this, r === null) this.childNodes.push(e);
    else {
      let n = this.childNodes.indexOf(r);
      n !== -1 && this.childNodes.splice(n, 0, e);
    }
  }
  removeAttribute(e) {
    let r = this.attributes.findIndex((n) => n.name === e);
    r !== -1 && this.attributes.splice(r, 1);
  }
  appendChild(e) {
    e.parentNode = this, this.childNodes.push(e);
  }
  get tagName() {
    var e;
    return (e = this.nodeName) === null || e === void 0 ? void 0 : e.toUpperCase();
  }
  get localName() {
    var e;
    return (e = this.nodeName) === null || e === void 0 ? void 0 : e.toLowerCase();
  }
  get innerHTML() {
    return Vt(this.childNodes);
  }
  set innerHTML(e) {
    this.childNodes = Nt(String(e != null ? e : ""));
  }
  get outerHTML() {
    return Vt([this]);
  }
  get children() {
    return this.childNodes.filter((e) => e.nodeType == 1);
  }
  closest(e) {
    let r = this;
    for (; r; ) {
      if (xe(e, r)) return r;
      r = r.parentNode;
    }
    return null;
  }
  querySelectorAll(e) {
    let r = e.split(/\s*,\s*/), n = [], i = (o) => {
      for (let s2 of r) if (xe(s2, o)) {
        n.push(o);
        break;
      }
      for (let s2 of o.childNodes) i(s2);
    };
    for (let o of this.childNodes) i(o);
    return n;
  }
  querySelector(e) {
    return this.querySelectorAll(e)[0];
  }
  findSibling(e, r) {
    if (!this.parentNode) return null;
    let n = this.parentNode.childNodes, i = n.indexOf(this);
    if (i === -1) return null;
    for (let o = i + e; o >= 0 && o < n.length; o += e) {
      let s2 = n[o];
      if (!r || s2.nodeType === 1) return s2;
    }
    return null;
  }
  removeChild(e) {
    let r = this.childNodes.indexOf(e);
    if (r !== -1) return this.childNodes.splice(r, 1), e.parentNode = void 0, e;
  }
  get previousSibling() {
    return this.findSibling(-1);
  }
  get nextSibling() {
    return this.findSibling(1);
  }
  get previousElementSibling() {
    return this.findSibling(-1, true);
  }
  get nextElementSibling() {
    return this.findSibling(1, true);
  }
  cloneNode(e = false) {
    let r = new H2(this.nodeName, this.nodeType);
    if (r.attributes = JSON.parse(JSON.stringify(this.attributes)), this.textContent && (r.textContent = this.textContent), e) for (let n of this.childNodes) {
      let i = n.cloneNode(true);
      r.appendChild(i);
    }
    return r;
  }
  get parentElement() {
    var e;
    return ((e = this.parentNode) === null || e === void 0 ? void 0 : e.nodeType) == 1 ? this.parentNode : null;
  }
};
function xe(t2, e) {
  let r = t2.match(/([.#]?[\w-]+|\[([\w-]+)(="([^"]*)")?\])/g);
  if (!r) return false;
  for (let n of r) if (n.startsWith("#")) {
    if (e.getAttribute("id") !== n.slice(1)) return false;
  } else if (n.startsWith(".")) {
    if (!(e.getAttribute("class") || "").split(" ").includes(n.slice(1))) return false;
  } else if (n.startsWith("[")) {
    let i = n.match(/^\[([\w-]+)(="([^"]*)")?\]$/);
    if (i) {
      let o = i[1], s2 = i[3], a = e.getAttribute(o);
      if (typeof s2 == "undefined") {
        if (a === void 0) return false;
      } else if (a !== s2) return false;
    } else return false;
  } else if (e.nodeName !== n) return false;
  return true;
}
function Nt(t2) {
  var e;
  let r = [], n = [];
  for (; t2; ) {
    let i = t2.match(/^<([\w-]+)(\s[^>]*)?>/), o = t2.match(/^<\/([\w-]+)>/);
    if (i) {
      let s2 = i[1].toLowerCase(), l = ((e = (i[2] || "").match(/([\w-]+)(="([^"]*)")?/g)) === null || e === void 0 ? void 0 : e.map((c) => {
        let [h2, u, , p] = c.match(/([\w-]+)(="([^"]*)")?/);
        return { name: u, value: fr(p || "") };
      })) || [], d = new H2(s2, 1);
      if (d.attributes = l, n.length > 0) {
        let c = n[n.length - 1];
        c.childNodes.push(d), d.parentNode = c;
      } else r.push(d);
      ["img", "input", "br"].includes(s2) || n.push(d), t2 = t2.slice(i[0].length);
    } else if (o) n.pop(), t2 = t2.slice(o[0].length);
    else {
      let s2 = t2.indexOf("<"), a = t2.slice(0, s2 !== -1 ? s2 : void 0), l = new H2("#text", 3);
      if (l.textContent = a, n.length > 0) {
        let d = n[n.length - 1];
        d.childNodes.push(l), l.parentNode = d;
      } else r.push(l);
      t2 = t2.slice(a.length);
    }
  }
  return r;
}
function pr(t2) {
  return t2.replace(/&/g, "&amp;").replace(/</g, "&lt;").replace(/>/g, "&gt;").replace(/"/g, "&quot;").replace(/'/g, "&#x27;");
}
function fr(t2) {
  return t2.replace(/&amp;/g, "&").replace(/&lt;/g, "<").replace(/&gt;/g, ">").replace(/&quot;/g, '"').replace(/&#x27;/g, "'");
}
function Vt(t2) {
  return t2.map((e) => {
    if (e.nodeType === 3) return e.textContent || "";
    let { nodeName: r, attributes: n } = e, i = n.map(({ name: s2, value: a }) => ` ${s2}="${pr(String(a))}"`).join(""), o = Vt(e.childNodes);
    return ["img", "input", "br"].includes(r) ? `<${r}${i} />` : `<${r}${i}>${o}</${r}>`;
  }).join("");
}
function Jt(t2, e, r) {
  var n;
  let i = ((n = r == null ? void 0 : r.processTemplate) === null || n === void 0 ? void 0 : n.call(r, null, t2, e)) || t2;
  return Nt(i).map((s2) => O3(s2, e, r));
}
function gr(t2) {
  let { params: e, method: r, headers: n, body: i, url: o } = x2(t2);
  var s2 = { url: o }, a = { ...n };
  return n["Content-Type"] === "application/json" && delete a["Content-Type"], n.Accept === "application/json" && delete a.Accept, Object.keys(a).length > 0 && (s2.headers = a), r !== "GET" && (s2.method = r), r === "GET" || r === "HEAD" || Object.keys(i).length === 0 || (s2.body = i), Object.keys(e).length > 0 && (s2 = { ...s2, params: e }), s2;
}
var rt = (t2) => {
  if (!t2 || typeof t2.url != "string") return false;
  for (var e in t2) if (!(e == "body" || e == "params" || e == "headers" || e == "url" || e === "method" || e == "jsonpath" && typeof t2[e] == "string")) return false;
  return true;
};
function we(t2) {
  let { url: e, headers: r, params: n, method: i, body: o } = x2(t2), s2, a = r["Content-Type"];
  i != "GET" && i != "HEAD" && (a === "application/json" && (s2 = JSON.stringify(o)), a === "multipart/form-data" && (s2 = Object.keys(o).reduce((d, c) => (d.append(c, o[c]), d), new FormData())), a === "application/x-www-form-urlencoded" && (s2 = new URLSearchParams(o)));
  let l = Object.keys(n).length ? `?${new URLSearchParams(n)}` : "";
  return [`${e}${l}`, { headers: r, body: s2, method: i }];
}
function x2(t2) {
  let e = {};
  for (let r in (t2 == null ? void 0 : t2.headers) || {}) if (t2.headers.hasOwnProperty(r)) {
    let n = r.replace(/^[a-z]|\-[a-z]/g, (i) => i.toUpperCase());
    e[n] = t2.headers[r];
  }
  return e.Accept || (e.Accept = "application/json"), { params: (t2 == null ? void 0 : t2.params) || {}, headers: e, jsonpath: String((t2 == null ? void 0 : t2.jsonpath) || "$"), method: ((t2 == null ? void 0 : t2.method) || "GET").toUpperCase(), body: (t2 == null ? void 0 : t2.body) || {}, url: String((t2 == null ? void 0 : t2.url) || "") };
}
var Yt = async (t2, e) => {
  let r = le(e, t2);
  if (r instanceof Promise) return r;
  let n = t2;
  r && (n = x2(r));
  try {
    let [i, o] = we(n), a = await (await x2.fetchImplementation(i, { ...o, method: o.method.toLowerCase() })).json();
    return n.jsonpath && n.jsonpath != "$" ? et(a, n.jsonpath) : a;
  } catch (i) {
    return {};
  }
};
async function qt(t2) {
  if (!t2) return t2;
  if (rt(t2)) return Yt(t2);
  let e = Object.keys(t2), r = await Promise.all(e.map((n) => rt(t2[n]) ? Yt(t2[n], n) : null).filter(Boolean));
  return e.reduce((n, i) => ({ ...n, [i]: rt(t2[i]) ? r.shift() : t2[i] }), {});
}
function yr(t2) {
  return t2 ? rt(t2) || Object.values(t2).some(rt) : false;
}
x2.clean = gr;
x2.toFetchArguments = we;
x2.fetchOne = Yt;
x2.fetch = qt;
x2.isDataSettings = rt;
x2.hasDataSettings = yr;
x2.fetchImplementation = (...t2) => fetch(...t2);
var ee2 = {};
dt(ee2, { Component: () => Ct, ComponentProps: () => ke, Context: () => Z2, ControlledPromise: () => D2, DEFAULT_CDN_URL: () => M2, DOM: () => Dt, DataPath: () => Ot, DataScope: () => _t, DataSettings: () => x2, Element: () => E2, FEAASComponent: () => Ct, FEAASComponentsProps: () => ke, FEAASContext: () => Z2, FEAASContextProps: () => He, FEAASEditor: () => xt, FEAASEditorProps: () => Ue, FEAASElement: () => E2, FEAASLoader: () => Et, FEAASLoaderProps: () => Pe, FEAASPicker: () => wt, FEAASPickerProps: () => We, FEAASStylesheet: () => $t, FEAASStylesheetProps: () => Te, InvalidResponse: () => Pt, JSONPath: () => v2, Loader: () => Et, MyComponent: () => kt, Picker: () => wt, Stylesheet: () => $t, Thumbnail: () => jt, WebComponent: () => Se, adjustNumbers: () => fe, autoloadScripts: () => de, cleanCollectionBit: () => vt, clearFetchCache: () => br, createStylesheet: () => De, customizeDataSettings: () => le, fetchAndRevalidate: () => yt, fetchAndRevalidateComponent: () => it, fetchAndRevalidateStylesheet: () => Mt, fetchBypassingCache: () => Tt, fetchCache: () => gt, fetchComponent: () => Kt, fetchData: () => qt, fetchToValidateCache: () => bt, fetchWithCacheAwareness: () => K, findStylesheet: () => Oe, getComponent: () => D, getComponentSource: () => Ar, getComponentURL: () => At, getFetchCache: () => _e, getFramePosition: () => Be, getHumanizedLabel: () => me2, getLastPathBit: () => ve, getQualifier: () => pe, getStylesheetSource: () => Gt, getStylesheetURL: () => Q2, loadScript: () => mt, loadStylesheet: () => Lt, loadStylesheetAllowStale: () => Xt, normalizeCollectionScope: () => Ft, observeDOMElement: () => ce, parseComponentSource: () => X2, parseLimit: () => ue, parseRange: () => he, parseStylesheetSource: () => z2, queryObject: () => et, queryObjectRaw: () => zt, queryScopes: () => ft, registerComponent: () => $, registerDatasource: () => k, renderComponent: () => Qt, renderComponentElement: () => xr, renderComponentPromise: () => Ne, renderDOMContent: () => G2, renderDOMElement: () => O3, renderHTMLContent: () => Ee, renderStylesheet: () => Cr, renderStylesheetPromise: () => Fe, serializeCH1RichText: () => q2, setDOMAttribute: () => W });
function D2(t2, e = (r) => {
}) {
  var r;
  let n = () => {
    var i, o;
    let s2 = new Promise((l, d) => {
      i = (c) => {
        t2 == null || t2(c), l(c);
      }, o = d;
    });
    var a = Object.assign(s2, { resolve: i, reject: o, restart: n, first: r });
    return r = a, a.catch(e), a;
  };
  return n();
}
var Se = typeof HTMLElement == "undefined" ? typeof windowJSDOM != "undefined" ? windowJSDOM.HTMLElement : class {
} : HTMLElement;
var E2 = class extends Se {
  getProps(e) {
    return {};
  }
  constructor() {
    super(), this.defaultProps = {}, this.connected = false, this.refs = {}, this.descendants = [], this.whenLoaded = D2((e) => {
      this.payload = e;
    }), this.whenRendered = D2(() => this.initialized = true, () => this.cancelRender()), this.addEventListener("feaasMount", this), this.addEventListener("feaasUnmount", this);
  }
  getRoot() {
    return this;
  }
  attributeChangedCallback(e, r, n) {
    this.set();
  }
  connectedCallback() {
    this.mount();
  }
  disconnectedCallback() {
    this.unmount();
  }
  mount() {
    try {
      let e = this.getParent();
      if (e && !e.connected || this.connected) return;
      this.connected = true, this.log("FEAAS: Mount", this.tagName, this), this.dispatchEventIndirectly(new Event("feaasMount", { bubbles: true, composed: true })), this.getElements().map((r) => {
        var n;
        return (n = r.mount) === null || n === void 0 ? void 0 : n.call(r);
      }), this.set();
    } catch (e) {
      this.onError(e);
    }
  }
  dispatchEventIndirectly(e) {
    this.dispatchEvent(e);
    let r = this.getParent();
    r && !r.contains(this) && (Object.defineProperty(e, "target", { value: this, writable: false }), Object.defineProperty(e, "composedPath", { value: () => [this], writable: false }), r.handleEvent(e));
  }
  isJSONAttribute(e) {
    return false;
  }
  log(...e) {
    let r = e[0];
    (typeof location != "undefined" && (location != null && location.hostname.startsWith("components-")) || localStorage["Sitecore.Components.Debug"]) && console.log(r + " " + e.slice(1).map((n) => n && typeof n == "object" ? "%O" : "%s").join(" "), ...e.slice(1));
  }
  unmount() {
    this.connected && (this.log("FEAAS: Unmount", this), this.dispatchEventIndirectly(new Event("feaasUnmount", { bubbles: true, composed: true })), this.connected && this.initialized && this.render && this.update(), this.cancelRender(), this.connected = false, this.initialized && this.render && this.update());
  }
  getParent(e = true) {
    for (var r = this; r = r.parentElement || (r.parentNode instanceof ShadowRoot ? r.parentNode.host : null); ) if (!e || r.tagName.startsWith("FEAAS-")) return r;
    if (this.tagName != "FEAAS-CONTEXT") return document.querySelector("feaas-context");
  }
  getElements(e = this.getRoot(), r = true) {
    return Array.from(e.querySelectorAll("*")).map((n) => [!r || n.tagName.startsWith("FEAAS-") ? n : null, n.shadowRoot ? this.getElements(n.shadowRoot, r) : null]).flat().filter(Boolean);
  }
  handleEvent(e) {
    let r = e.composedPath()[0];
    switch (e.type) {
      case "feaasMount":
        r != this && this.nestedCallback(r);
        break;
      case "feaasUnmount":
        r != this && this.unnestedCallback(r);
        break;
    }
  }
  unnestedCallback(e) {
    let r = this.descendants.indexOf(e);
    r != -1 && (this.log("FEAAS: Unnest", this, e), this.descendants.splice(r, 1), this.refs[e.getComponentName()] = null, e.refs.parent == this && (e.refs.parent = null), e.refs.top == this && (e.refs.top = e.refs.parent));
  }
  nestedCallback(e) {
    var r, n;
    if (this.descendants.indexOf(e) == -1 && (this.descendants.push(e), this.log("FEAAS: Nest", this, e), this.refs[e.getComponentName()] = e, e.refs.top = this, (r = e.refs).parent || (r.parent = this), e.render)) for (var o = e.refs.parent; o; o = o.refs.parent) o.render && ((n = e.refs).parentReact || (n.parentReact = o), e.refs.topReact = o);
  }
  getComponentName() {
    return this.tagName.replace("FEAAS-", "").toLowerCase();
  }
  isReadyToLoad() {
    return this.payload === void 0 && this.getAttribute("hidden") == null;
  }
  onError(e, r = "uncaught", n = false) {
    let i = new CustomEvent("feaasError", { bubbles: true, composed: true, detail: e });
    if (this.dispatchEventIndirectly(i), this.whenLoaded.reject(e), !i.defaultPrevented && !n) {
      this.whenRendered.reject(e);
      try {
        this.unmount();
      } catch (o) {
      }
      return true;
    }
    return false;
  }
  shouldUpdateOnLoad() {
    return true;
  }
  async advance() {
    try {
      if (this.payload === void 0) {
        if (!this.isReadyToLoad()) return;
        this.payload = null, this.dispatchEventIndirectly(new Event("feaasLoad", { bubbles: true, composed: true }));
        let e = await this.load().catch((r) => {
          throw this.payload = void 0, r;
        });
        if (this.whenLoaded.resolve(e), this.onLoad) return;
      } else if (this.payload == null) return;
      this.flush(), this.whenRendered.resolve(this);
    } catch (e) {
      this.onError(e);
    }
  }
  flush() {
    var e, r;
    if (!this.connected) return;
    let n = (r = (e = this.payload) === null || e === void 0 ? void 0 : e.ReactDOM) === null || r === void 0 ? void 0 : r.flushSync;
    n ? n(() => this.update()) : this.update();
  }
  load() {
    return Promise.resolve(null);
  }
  update() {
    var e, r, n;
    if (this.payload == null || !this.render) return;
    let { React: i, ReactDOM: o, ReactDOMClient: s2 } = this.payload || {};
    if (!i) throw new Error(`${this.tagName}: React is not present in payload`);
    if (!o) throw new Error(`${this.tagName}: ReactDOM is not present in payload`);
    this.getAttribute("hydrate") == "false" && this.firstElementChild || (!this.refs.topReact && !this.forceUpdateReact ? (this.reactRoot || (this.reactRoot = s2.createRoot(this.getReactRootElement())), this.reactRoot.render(this.getReactElement())) : this.forceUpdateReact && this.connected ? (e = this.forceUpdateReact) === null || e === void 0 || e.call(this) : (n = (r = this.refs.topReact) === null || r === void 0 ? void 0 : r.forceUpdateReact) === null || n === void 0 || n.call(r));
  }
  invokeReactRendering() {
    let { React: e, ReactDOM: r } = this.payload || {};
    if (!this.connected) return null;
    let n = this.descendants.filter((i) => i.refs.parentReact == this && i.payload && i.connected).map((i, o) => this.getReactElement(i));
    return this.render({ ...this.props, children: n }, this.payload);
  }
  getReactErrorBoundary(e = this, r = e.tagName) {
    if (this.reactErrorBoundary) return this.reactErrorBoundary;
    let { React: n, ReactDOM: i } = e.payload || {};
    return this.reactErrorBoundary || (this.reactErrorBoundary = class extends n.Component {
      constructor() {
        super(...arguments), this.state = { error: null };
      }
      static getDerivedStateFromError(s2) {
        return { error: s2 };
      }
      componentDidCatch(s2, a) {
        console.error(`FEAAS: ${e.tagName} Error:`, s2, a), e.onError(s2, "react");
      }
      render() {
        if (!this.state.error) return this.props.children;
      }
    });
  }
  getReactElement(e = this, r) {
    let { React: n, ReactDOM: i } = e.payload || {}, o = this.getReactErrorBoundary(), s2 = this.getReactWrapper(e);
    return n.createElement(o, { key: e.tagName + "-" + e.getUID(), slot: e.getAttribute("slot") }, n.createElement(s2, null));
  }
  getReactWrapper(e = this, r = e.tagName) {
    if (e.reactWrapper) return e.reactWrapper;
    let { React: n, ReactDOM: i } = e.payload || {};
    return e.reactWrapper = (o) => {
      if (e.render) {
        let [s2, a] = n.useReducer((l) => l + 1, 0);
        return e.forceUpdateReact = a, i.createPortal(n.createElement(n.Fragment, null, e.invokeReactRendering()), e.getReactRootElement());
      } else return e.update();
    }, Object.assign(e.reactWrapper, { key: e.tagName + "-" + e.getUID(), displayName: r }), e.reactWrapper;
  }
  getUID() {
    return this.uid || (this.uid = String(Math.random()));
  }
  getShadowRoot() {
    return this.shadowRoot || this.attachShadow({ mode: "open" }), this.shadowRoot;
  }
  getReactRootElement() {
    return this.useShadowRoot ? this.getShadowRoot() : this.getRoot();
  }
  set(e) {
    try {
      this.scheduleRender(), this.overrides = { ...this.overrides, ...e }, this.props = { ...this.getProps(), ...this.overrides };
      for (var r in this.props) {
        let i = this.isJSONAttribute(r), o = this.props[r], s2 = i ? JSON.stringify(o) : String(o), a = this.defaultProps[r], l = i ? JSON.stringify(a) : String(a), d = r.replace(/([a-z])([A-Z])/g, "$1-$2").toLowerCase(), c = this.getAttribute(d);
        try {
          var n = i ? JSON.stringify(JSON.parse(c)) : c;
        } catch (h2) {
          var n = null;
        }
        o == null || s2 === l ? this.removeAttribute(d) : (typeof o == "string" || typeof o == "number" || typeof o == "boolean" || i) && n != s2 && this.setAttribute(d, s2);
      }
    } catch (i) {
      this.whenRendered.reject(i), this.onError(i, "set");
    }
    return this;
  }
  import(e) {
    return import(
      /*@vite-ignore*/
      /* webpackIgnore: true */
      e
    );
  }
  scheduleRender() {
    this.nextRender == null && (this.whenRendered = this.whenRendered.restart()), this.cancelRender(), this.nextRender = requestAnimationFrame(() => {
      this.nextRender = null, this.advance().catch((e) => {
      });
    });
  }
  cancelRender() {
    cancelAnimationFrame(this.nextRender);
  }
  formatURL(e, r) {
    return typeof e == "string" && e.match(/^\/[^\/]/) ? r + e : e;
  }
  getContextAttribute(e, r = this) {
    for (var n = this; n = n.parentElement || (n.parentNode instanceof ShadowRoot ? n.parentNode.host : null); ) if (n.getAttribute(e) != null) return n.getAttribute(e);
    return this.getAttribute(e);
  }
  static register(e, r) {
    r == null && (r = typeof window != "undefined" ? window : null), r && !r.customElements.get(e) && r.customElements.define(e, this);
  }
};
var nt = class extends E2 {
  load() {
    return Promise.all([import(
      /*@vite-ignore*/
      /* webpackIgnore: true */
      "https://cdn.skypack.dev/react"
    ), import(
      /*@vite-ignore*/
      /* webpackIgnore: true */
      "https://cdn.skypack.dev/react-dom"
    ), import(
      /*@vite-ignore*/
      /* webpackIgnore: true */
      "https://cdn.skypack.dev/react-dom/client"
    )]).then(([e, r, n]) => ({ React: e, ReactDOM: r, ReactDOMClient: n }));
  }
  render({}, { React: e }) {
    return e.createElement(e.Fragment, null);
  }
};
var kt = class extends nt {
  constructor() {
    super(...arguments), this.useShadowRoot = true;
  }
  getProps() {
    return { counter: parseFloat(this.getAttribute("counter")) };
  }
  render({ counter: e }, { React: r }) {
    let [n, i] = r.useState(0);
    return r.useEffect(() => {
      i((o) => o + 1);
    }, [e]), r.createElement(r.Fragment, null, r.createElement("p", null, "Rendering attribute: ", e), r.createElement("p", null, "Triggered updates: ", n));
  }
};
kt.observedAttributes = ["counter"];
var Re = ["initial", "check", "updated"];
var gt = {};
function br() {
  gt = {};
}
async function yt(t2, e, r, n, i = gt) {
  return K({ url: t2, options: e, validator: r, callback: n, cache: i }).then(bt).then((o) => o.response);
}
async function K({ url: t2, options: e, validator: r, callback: n, cache: i }, o = "initial") {
  let s2 = /* @__PURE__ */ new Date();
  if (i != null) {
    var a = _e(t2);
    if (Re.indexOf(a.phase) >= Re.indexOf(o)) var l = a[o];
    else a.phase = o;
  }
  let d = await (l || fetch(t2, e));
  if (!l && a && (d.ok ? a[o].resolve(d) : a[o].reject(new Error("Fetch failed"))), !d.ok) throw new Error("Fetch failed");
  let c = new Date(d.headers.get("date")) < s2 || l && o == "initial" && (a.phase == "updated" || a.phase == "check");
  if ((r == null ? void 0 : r(d, c)) === false) throw new Pt("Response is not valid");
  return await (n == null ? void 0 : n(d, o, c)), { url: t2, options: e, isCached: c, response: d, validator: r, callback: n, cache: i };
}
function _e(t2, e = false) {
  let r = String(t2).replace("?head", "");
  var n = gt[r];
  return !n && !e && (n = gt[r] = { phase: null, initial: D2(), check: D2(), updated: D2(), final: D2() }), n;
}
var Pt = class extends Error {
};
async function bt(t2) {
  let { url: e, isCached: r, options: n, validator: i, response: o, cache: s2 } = t2;
  if (r) {
    let { response: a } = await K({ url: e + (e.toString().includes("?") ? "&" : "?") + "head", options: { ...n, method: "HEAD", cache: "no-cache" }, validator: i, cache: s2 }, "check");
    if (a.headers.get("last-modified") != o.headers.get("last-modified")) return Tt(t2);
  }
  return t2;
}
async function Tt(t2) {
  return K({ ...t2, options: { ...t2.options, cache: "reload" } }, "updated");
}
var M2 = "https://feaas.blob.core.windows.net";
function X2(t2) {
  let e = t2 == null ? void 0 : t2.match(/^(?:(.*?)\/components)?\/?([^\/]+)\/([^\/]+)(?:\/([^\/]+)(?:\/(published|staged|saved|\d+)(?:\.html?)?)?)?$/);
  if (e) {
    var [, r, n, i, o, s2] = e;
    return { cdn: r, library: n, component: i, version: o, revision: s2 };
  }
}
function Ar(t2) {
  if (!t2 || !t2.library || !t2.component) throw new Error("Component requires `library` and `component` properties");
  return `${t2.cdn && t2.cdn != M2 ? `${t2.cdn}/components` : ""}/${t2.library}/${t2.component}/${!t2.version || t2.version == "responsive" && (!t2.revision || t2.revision == "published") ? "" : t2.version}/${!t2.revision || t2.revision == "published" ? "" : t2.revision}`.replace(/(^\/|\/$|\/\/)(?!.+\/components\/)/g, "");
}
function Gt(t2) {
  return `${t2.cdn && t2.cdn != M2 ? `${t2.cdn}/styles/` : ""}${t2.library}/${!t2.revision || t2.revision == "published" ? "" : t2.revision}`.replace(/\/$|\/\/(?!.+\/styles\/)/g, "");
}
function z2(t2) {
  let e = t2 == null ? void 0 : t2.match(/^(?:(.*?)\/styles\/)?([^\/]+)(?:\/(published|staged|saved|\d+)(?:.css)?)?$/);
  if (e) {
    var [, r, n, i] = e;
    return { cdn: r, library: n, revision: i };
  } else {
    let o = X2(t2);
    if (o) {
      var { cdn: r, library: n, revision: i } = o;
      return i != null && i.match(/\d/) && (i = void 0), { cdn: r, library: n, revision: i };
    }
  }
}
function At(t2) {
  return typeof t2 == "string" && (t2 = { src: t2 }), "src" in t2 && t2.src ? t2 = { ...X2(t2.src) } : t2 = { ...t2 }, `${t2.cdn || t2.hostname || M2}/components/${t2.library}/${t2.component}/${t2.version || "responsive"}/${t2.revision || "published"}.html`;
}
function Q2(t2) {
  if (typeof t2 == "string" && (t2 = { src: t2 }), "src" in t2) {
    if (String(t2.src).includes("v1/files/components/styles")) return t2.src;
    t2 = { ...z2(t2.src) };
  } else t2 = { ...t2 };
  return `${t2.cdn || t2.hostname || M2}/styles/${t2.library}/${t2.revision == "staged" ? "staged" : t2.revision == "saved" ? "saved" : "published"}.css`;
}
async function it(t2, e, r = false) {
  let n = (a) => a.headers.get("x-ms-meta-versionDeletedAt") == null, i = (a) => a.clone().text().then(e), o = await Promise.all([t2.instance && K({ options: { headers: { Accept: "text/html" }, credentials: "omit" }, url: At({ ...t2, version: t2.instance }), validator: n }).catch((a) => a), K({ url: At(t2), validator: n }).catch((a) => a)]), s2 = o.find((a) => a && "isCached" in a && a);
  if (!s2 || s2 instanceof Error) throw o.find((l) => l && l instanceof Error) || new Error("Can not fetch component");
  return o[0] == s2 && console.log("Using fork!", o), await i(s2.response), r ? s2 : bt({ ...s2, callback: i }).catch((a) => {
    if (o[0] == s2 && (Tt({ ...s2, callback: null, validator: null }), console.log("Fork was deleted"), !(o[1] instanceof Error))) return i(o[1].response), bt({ ...o[1], callback: i });
    throw a;
  });
}
async function Kt(t2) {
  typeof t2 == "string" && (t2 = { src: t2 });
  var e;
  let { response: r } = await it(t2, (n) => {
    e = n;
  }, true);
  return { ...t2, template: e, lastModified: r.headers.get("last-modified") };
}
async function Mt(t2, e) {
  return yt(Q2(t2), { headers: { Accept: "text/css" }, credentials: "omit" }, (r) => r.headers.get("x-ms-meta-deletedAt") == null, (r, n) => r.clone().text().then((i) => e(i, n)));
}
function Cr(t2, e) {
  return Fe(t2, e || (e = document.createElement("style"))), e;
}
function Fe(t2, e) {
  return e || (e = document.createElement("style")), Mt(t2, (r, n) => {
    e.textContent = r;
  }).then(() => e);
}
var Er = /* @__PURE__ */ new WeakSet();
function Lt(t2, e) {
  var r, n = Oe(t2);
  if (n) {
    if (Er.has(n)) return Promise.resolve(n);
    t2 = n.getAttribute("data-href") || n.getAttribute("href");
  }
  return Mt(t2, (i, o) => {
    o == "initial" && n || (r || (r = !n || n.tagName == "LINK" ? De(t2) : n), r.textContent = i), e == null || e(i, o);
  }).then(() => r || n);
}
function Xt(t2) {
  return new Promise((e, r) => {
    Lt(t2, e).catch(r);
  });
}
function Oe(t2) {
  let e = Q2(t2), { library: r } = z2(e), n = `/files/components/styles/${r}.css`;
  return document.querySelector(`style[data-href="${e}"], 
    link[rel="stylesheet"][href="${e}"], 
    style[data-href*="${n}"], 
    link[rel="stylesheet"][href*="${n}"]`);
}
function De(t2) {
  let e = Q2(t2), r = document.createElement("style");
  return r.setAttribute("data-href", e), document.head.appendChild(r), r;
}
function xr(t2, e) {
  let r = document.createElement("div");
  r.innerHTML = t2;
  let n = document.createDocumentFragment();
  for (; r.firstChild; ) n.appendChild(r.firstChild);
  return O3(n, e), r;
}
function Qt(t2, e) {
  return Ne(t2, e || (e = document.createElement("div"))), e;
}
async function Ne(t2, e) {
  return e || (e = document.createElement("div")), e.childNodes.length ? O3(e, t2.data, t2) : "template" in t2 ? G2(e, t2.template, t2.data, t2) : it(t2, (r) => G2(e, r, t2.data, t2)).then(() => e);
}
function ke(t2) {
  var e, r, n, i, o, s2, a, l;
  let d, c = t2.getAttribute("src");
  if (c) {
    let N3 = X2(c);
    if (!N3) throw new Error(`Could not parse FEAAS Component source: ${c}`);
    var { cdn: h2, library: u, component: p, version: f, revision: m } = N3;
  }
  let g = t2.getAttribute("data");
  if (g != null && g != "") try {
    d = typeof g == "string" ? JSON.parse(g) : {};
  } catch (N3) {
    console.error(N3);
  }
  let C2 = t2.getAttribute("fetch");
  return { data: d || {}, cdn: (r = (e = t2.getContextAttribute("cdn")) !== null && e !== void 0 ? e : h2) !== null && r !== void 0 ? r : M2, library: (n = t2.getAttribute("library")) !== null && n !== void 0 ? n : u, component: (i = t2.getAttribute("component")) !== null && i !== void 0 ? i : p, version: (s2 = (o = t2.getAttribute("version")) !== null && o !== void 0 ? o : f) !== null && s2 !== void 0 ? s2 : "responsive", revision: (l = (a = t2.getAttribute("revision")) !== null && a !== void 0 ? a : m) !== null && l !== void 0 ? l : "published", hostname: t2.getAttribute("hostname"), template: t2.getAttribute("template"), instance: t2.getAttribute("instance"), editable: t2.getAttribute("editable") != null, suspended: t2.getAttribute("suspended") != null, lastModified: t2.getAttribute("last-modified"), fetch: C2 == "false" || C2 == null && t2.hasAttribute("fetch") ? [] : C2 == null || C2 == "true" ? ["data", "template", "stylesheet"] : C2.split(/(\s+|\-)+/g).filter(Boolean) };
}
var Ct = class extends E2 {
  setData(e) {
    this.set({ data: e });
  }
  getProps() {
    return ke(this);
  }
  isJSONAttribute(e) {
    return e == "data";
  }
  attributeChangedCallback(e, r, n) {
    r !== n && ((e == "library" || e == "component" || e == "revision" || e == "version") && (this.payload = void 0, this.alreadyRendered && this.connected && (this.needsRefresh = true, this.needsToFetchTemplate = true)), super.attributeChangedCallback(e, r, n), e == "data" && (this.needsRefresh = true, (this.props.fetch.includes("data") || this.alreadyRendered || !x2.hasDataSettings(this.props.data)) && this.fetchData()));
  }
  async fetchData() {
    this.readyData = void 0, this.whenDataReady = this.whenDataReady.restart();
    let e = await x2.fetch(this.props.data), r = this.alreadyRendered;
    await this.whenDataReady.resolve(e), r && this.advance();
  }
  getEditor() {
    var e;
    return (e = document.querySelector("feaas-context")) === null || e === void 0 ? void 0 : e.refs.editor;
  }
  constructor() {
    super(), this.readyData = {}, this.whenDataReady = D2((r) => this.readyData = r, (r) => this.onError(r)), this.defaultProps = { cdn: M2, revision: "published", version: "responsive", editable: false, suspended: false, data: {} }, this.onLoad = (r) => {
      this.payload = r, this.advance();
    };
    let e = this.getAttribute("data");
    this.getAttribute("data") || this.whenDataReady.resolve({}), this.addEventListener("click", () => {
      this.props.editable && this.edit();
    });
  }
  edit() {
    let e = this.getEditor();
    if (e != null && e.setTarget(this)) return e.open(), true;
  }
  getOriginal() {
    let e = this.getAttribute("data-path-scope");
    if (e) {
      for (var r = this; (r = r.previousElementSibling) && r.getAttribute("data-path-scope") == e; ) var n = r;
      return n;
    }
  }
  isReadyToLoad() {
    return super.isReadyToLoad() && this.props.library != null && this.props.component != null && this.props.version != null;
  }
  async load() {
    var e;
    if (this.getOriginal()) return;
    let r = () => {
      this.payload != null && (n || this.readyData && this.onLoad(this.payload));
    };
    if (this.props.fetch.includes("stylesheet")) var n = Xt({ ...this.props }).then(() => {
      n = null, r();
    });
    if (this.props.fetch.includes("template") || this.needsToFetchTemplate) {
      this.needsToFetchTemplate = false;
      var i = it(this.props, (o) => {
        this.payload = o, this.needsRefresh = true, r();
      });
    } else this.payload = (e = this.props.template) !== null && e !== void 0 ? e : this.innerHTML;
    return Promise.all([n, this.whenDataReady.then(() => r()), i]).then(() => this.payload);
  }
  flush() {
    this.readyData && super.flush();
  }
  update() {
    if (this.alreadyRendered = true, !(!this.props.fetch.includes("data") && !this.props.fetch.includes("template") && this.firstElementChild && !this.needsRefresh)) if (Array.from(this.children).filter((e) => e.tagName != "BR").length > 0 && !this.needsRefresh) O3(this, this.readyData);
    else {
      if (this.needsRefresh = false, this.getOriginal()) return;
      G2(this, this.payload, this.readyData);
    }
  }
};
Ct.observedAttributes = ["library", "component", "version", "revision", "hostname", "cdn", "template", "data", "instance", "editable", "with-stylesheet", "fetch"];
Ct.register("feaas-component");
function Pe(t2) {
  return { opacity: t2 != null && t2.getAttribute("opacity") ? parseFloat(t2 == null ? void 0 : t2.getAttribute("opacity")) : 1, hidden: (t2 == null ? void 0 : t2.getAttribute("hidden")) != null };
}
var Et = class extends E2 {
  constructor() {
    super(...arguments), this.defaultProps = { hidden: false };
  }
  getProps() {
    return Pe(this);
  }
  attributeChangedCallback(e, r, n) {
    if (r !== n) return e == "hidden" && (this.style.setProperty("display", "block", "important"), this.style.setProperty("transition", "opacity 0.3s", "important"), n ? (this.style.setProperty("opacity", "0", "important"), this.style.pointerEvents = "none") : (this.style.setProperty("opacity", "1", "important"), this.style.pointerEvents = "all")), super.attributeChangedCallback(e, r, n);
  }
  connectedCallback() {
    this.payload = null, super.connectedCallback(), this.attributeChangedCallback("hidden", this.getAttribute("hidden"), this.getAttribute("hidden")), this.stylesheet = document.createElement("style"), this.stylesheet.textContent = `
  #loader {
    position: absolute;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
    display: flex;
    align-items: center;
    justify-content: center;
    background: #f6f6ff;
    z-index: 1000;
  }
  @keyframes loader-circular-track {
    0% {
      stroke-dasharray: 1, 400;
      stroke-dashoffset: 0;
    }
    50% {
      stroke-dasharray: 400, 400;
      stroke-dashoffset: -100;
    }
    100% {
      stroke-dasharray: 400, 400;
      stroke-dashoffset: -260;
    }
  }
  
  @keyframes loader-circular-spinner {
    0% {
      transform: rotate(0deg);
    }
  
    100% {
      transform: rotate(360deg);
    }
  }
  #loader .spinner {
    width: 48px;
    height: 48px;
  }
  `, this.loader = document.createElement("div"), this.loader.id = "loader", this.loader.innerHTML = `
  <div class="spinner">
    <svg
      viewBox="0 0 100 100"
      style="
        animation: 2s linear 0s infinite normal none running loader-circular-spinner;
        display: block;
        width: 48px;
        height: 48px;
      "
    >
      <circle fill="transparent" cx="50" cy="50" r="42" stroke="rgba(0,0,0,0.1)" stroke-width="10px"></circle>
      <circle
        fill="transparent"
        stroke="#5548D9"
        cx="50"
        cy="50"
        r="42"
        stroke-width="10px"
        stroke-linecap="round"
        style="animation: 1.5s linear 0s infinite normal none running loader-circular-track"
      ></circle>
    </svg>
  </div>`, this.getRoot().appendChild(this.stylesheet), this.getRoot().appendChild(this.loader);
  }
  update() {
    this.loader.style.opacity = String(this.props.opacity);
  }
};
Et.observedAttributes = ["hidden", "opacity"];
Et.register("feaas-loader");
function Te(t2) {
  var e, r, n, i;
  let o = t2.getAttribute("src");
  if (o) var { cdn: s2, library: a, revision: l } = z2(o);
  return { library: t2 == null ? void 0 : t2.getContextAttribute("library"), revision: (r = (e = t2 == null ? void 0 : t2.getAttribute("revision")) !== null && e !== void 0 ? e : l) !== null && r !== void 0 ? r : "published", cdn: (i = (n = t2 == null ? void 0 : t2.getContextAttribute("cdn")) !== null && n !== void 0 ? n : t2 == null ? void 0 : t2.getContextAttribute("hostname")) !== null && i !== void 0 ? i : M2 };
}
var $t = class extends E2 {
  constructor() {
    super(...arguments), this.onLoad = (e) => {
      this.payload = e, this.advance();
    };
  }
  getProps() {
    return Te(this);
  }
  isReadyToLoad() {
    return this.props.library != null && this.props.revision != null && this.props.cdn != null;
  }
  load() {
    return Lt(this.props, this.onLoad);
  }
};
$t.register("feaas-stylesheet");
var jt = {};
dt(jt, { convertBase64toBlob: () => Me, generate: () => je, get: () => wr, getVersionForThumbnail: () => Le, load: () => $e, responseToImage: () => Zt, upload: () => Ie });
var Me = (t2) => fetch(t2).then((e) => e.blob());
var Zt = (t2) => t2.blob().then((e) => new Promise((r, n) => {
  let i = new Image();
  i.onerror = n, i.onload = () => {
    r(i);
  }, i.src = URL.createObjectURL(e);
}));
async function Le(t2) {
  return t2.versions.length || await t2.versions.fetch(), t2.getVersionForWidth(800);
}
async function wr(t2, e, r) {
  try {
    if (!t2.isNew) return await $e(t2, e, r);
  } catch (i) {
    t2.sdk.log(`FEAAS: Thumbnail ${t2.id}, version: ${(e == null ? void 0 : e.id) || "responsive"}, status: generating ${status}, reason: ${i}`);
  }
  let n = await je(t2, e);
  return r == null || r(n, false), n && !t2.isNew && Me(n.src).then((i) => Ie(t2, e, i)), n;
}
async function $e(t2, e, r) {
  let n = e ? e.getThumbnailURL() : t2.getThumbnailURL(), i = t2.library.stylesheet, o = new Date(Math.max(Number(t2.modifiedAt), Number(i.modifiedAt)));
  t2.sdk.log(`FEAAS: Thumbnail ${t2.id}/${(e == null ? void 0 : e.id) || "responsive"}, loading`);
  var s2;
  return await yt(n, {}, (a, l) => {
    let d = Math.abs(Number(new Date(a.headers.get("x-ms-meta-componentRenderedAt"))) - Number(o)) < 2e3;
    return l && !d && Zt(a).then((c) => {
      s2 = c, r(c, l);
    }), d;
  }, (a, l, d) => {
    t2.sdk.log(`FEAAS: Thumbnail ${t2.id}/${(e == null ? void 0 : e.id) || "responsive"}, status: ${l}`), Zt(a).then((c) => {
      s2 = c, r(c, d);
    });
  }, null), s2;
}
async function je(t2, e, r) {
  let n = e || (t2.isNew ? null : await Le(t2));
  if (!n || n.isViewEmpty()) return null;
  let i = r || t2.library.stylesheets.first, { datasources: o } = t2.sdk;
  return await Sr(n.classList, i.getBreakpointForWidth(800, n.getBreakpoints()), n.view, o.reduce((a, l) => Object.assign(a, { [l.id]: l.sample }), {}), i.css, t2.sdk);
}
function Sr(t2, e, r, n, i, o) {
  let s2 = document.createElement("iframe");
  return s2.style.position = "absolute", s2.style.top = "-2000px", s2.style.left = "-2000px", s2.style.width = e.props.minWidth + "px", s2.style.height = "720px", s2.style.zIndex = "100011", document.body.appendChild(s2), new Promise((a, l) => {
    let d = document.createElement("script");
    d.onerror = l, d.src = o.frontend + "/assets/html2canvas.js", d.onload = () => {
      var p;
      (((p = s2.contentWindow.document.fonts) === null || p === void 0 ? void 0 : p.ready) || Promise.resolve()).then(function() {
        return s2.contentWindow.html2canvas(u, { scale: Math.max(1.1, 1e3 / Math.min(1401, Math.max(320, e.props.minWidth))), width: Math.min(1401, Math.max(320, e.props.minWidth)), height: Math.max(1, Math.min(2e3, u.offsetHeight)), windowWidth: e.props.minWidth || e.props.maxWidth + "px", windowHeight: 1e3, proxy: o.backend + "/proxy/media", backgroundColor: "#ffffff" }).then((f) => {
          let m = f.toDataURL("image/jpeg", 0.6);
          s2.parentElement.removeChild(s2);
          let g = new Image();
          g.onload = () => {
            a(g);
          }, g.onerror = l, g.src = m;
        });
      });
    }, s2.contentWindow.document.head.appendChild(d);
    let c = s2.contentWindow.document.createElement("style");
    c.textContent = `
      ${i}
      body, html { padding: 0; margin: 0; overflow: hidden }
    `;
    let h2 = s2.contentWindow.document.createElement("style");
    h2.textContent = `
      body, html { padding: 0; margin: 0; overflow: hidden }
    `, s2.contentWindow.document.head.appendChild(c), s2.contentWindow.document.head.appendChild(h2);
    let u = Qt({ template: r, data: n });
    u.classList.add(...t2, "-feaas--preview", "-emulate--" + e.details.slug), s2.contentWindow.document.body.appendChild(u);
  });
}
async function Ie(t2, e, r) {
  let n = e ? e.getThumbnailURL() : t2.getThumbnailURL(), i = new Date(Math.max(Number(t2.modifiedAt), Number(t2.library.stylesheet.modifiedAt)));
  try {
    await t2.sdk.uploadBlob("thumbnails", n.split(/\/thumbnails\//)[1], r, { headers: { "x-ms-blob-content-type": "image/jpg", "x-ms-blob-cache-control": "public,max-age=31536000,immutable", "x-ms-meta-versionId": e ? e.id : null, "x-ms-meta-versionRevision": e ? e.revision.toString() : null, "x-ms-meta-componentId": t2.id, "x-ms-meta-componentRenderedAt": i.toUTCString(), "x-ms-meta-componentModifiedAt": t2.modifiedAt.toUTCString(), "x-ms-meta-componentCreatedAt": t2.createdAt.toUTCString(), "x-ms-meta-modifiedAt": t2.modifiedAt.toUTCString() } }), fetch(n, { cache: "no-cache" }).then(() => {
      t2.sdk.log("FEAAS: Thumbnail uploaded", n);
    });
  } catch (o) {
    t2.sdk.log("FEAAS: Thumbnail failed to upload", n, o);
  }
  return n;
}
var te2;
typeof window != "undefined" && (window.FEAASReactElement = nt, (te2 = window.FEAASLoading) !== null && te2 !== void 0 || (window.FEAASLoading = Promise.resolve()));
function Be(t2) {
  let e = [];
  if (t2) {
    let r = t2.ownerDocument.defaultView, n, i;
    for (; r !== window.top; ) {
      n = r.parent;
      for (let o = 0; o < n.frames.length; o++) if (n.frames[o] === r) {
        for (let s2 of n.document.getElementsByTagName("iframe")) if (s2.contentWindow === r) {
          i = s2.getBoundingClientRect();
          let a = s2.contentWindow.getComputedStyle(s2);
          e.push({ left: i.left + parseInt(a.borderLeftWidth), top: i.top + parseInt(a.borderTopWidth) });
        }
        r = n;
        break;
      }
    }
  }
  return e.reduce((r, n) => ({ left: r.left + n.left, top: r.top + n.top }), { left: 0, top: 0 });
}
function Ue(t2) {
  var e;
  return { context: HTMLElement, frontend: t2 == null ? void 0 : t2.getContextAttribute("frontend"), src: (e = t2 == null ? void 0 : t2.getAttribute("src")) !== null && e !== void 0 ? e : "/editor.js", library: t2 == null ? void 0 : t2.getAttribute("library"), component: t2 == null ? void 0 : t2.getAttribute("component"), version: t2 == null ? void 0 : t2.getAttribute("version"), instance: t2 == null ? void 0 : t2.getAttribute("instance"), forked: t2 == null ? void 0 : t2.getAttribute("forked"), revision: (t2 == null ? void 0 : t2.getAttribute("revision")) || "saved", hidden: (t2 == null ? void 0 : t2.getAttribute("hidden")) != null, for: t2 == null ? void 0 : t2.getAttribute("for"), state: (t2 == null ? void 0 : t2.getAttribute("state")) || "idle", changed: (t2 == null ? void 0 : t2.getAttribute("changed")) != null };
}
var xt = class extends E2 {
  constructor() {
    super(...arguments), this.framePoint = { top: 0, left: 0 }, this.wrapperRect = { top: 0, left: 0, width: 0, height: 0 }, this.bodyRect = { top: 0, left: 0, width: 0, height: 0 }, this.defaultProps = { hidden: false }, this.setTarget = (e, r = { component: e.getAttribute("component"), version: e.getAttribute("version"), revision: e.getAttribute("revision"), instance: e.getAttribute("instance") }) => {
      if (!this.closing && (!this.target || e == null)) return this.set(r), this.target = e, true;
    }, this.onChromeMeasureElement = (e, r = e.getBoundingClientRect()) => e.ownerDocument == document ? { left: r.left - this.bodyRect.left, top: r.top - this.bodyRect.top, width: r.width, height: r.height } : { left: r.left + this.framePoint.left - this.bodyRect.left, top: r.top + this.framePoint.top - this.bodyRect.top, width: r.width, height: r.height }, this.onBeforeMeasure = (e) => {
      e.memoized.focusable && (this.framePoint = Be(e.memoized.focusable)), this.chrome && (this.wrapperRect = this.chrome.positionable.getBoundingClientRect(), this.bodyRect = this.chrome.positionable.ownerDocument.body.parentElement.getBoundingClientRect());
    }, this.onMeasure = () => {
    }, this.onPosition = ({ focusable: e, root: r }) => {
      !this.chrome || this.props.hidden || (e ? (this.chrome.wrapper.style.width = e.width + 16 * 2 + "px", this.chrome.wrapper.style.height = e.height + 16 * 1 + 64 + "px", this.chrome.wrapper.style.left = e.left - 16 + "px", this.chrome.wrapper.style.top = e.top - 64 + "px", this.chrome.wrapper.style.opacity = "1", this.chrome.absolute = this.querySelector(".ui.overlays"), this.chrome.absolute && (this.chrome.absolute.style.left = r.left + "px", this.chrome.absolute.style.top = r.top + "px")) : (this.chrome.wrapper.style.opacity = "0", this.chrome.wrapper.style.left = "-1000px", this.chrome.wrapper.style.top = "-1000px"));
    }, this.onWindowMessage = (e) => {
      var r;
      switch ((r = e.data) === null || r === void 0 ? void 0 : r.type) {
        case "feaasEdit":
          let n = this.getPlaceholder();
          this.setTarget(n.editable, e.data) && (this.loader = n.loader, document.body.appendChild(n.clipper), this.editedUID = e.data.id, this.setPlaceholder(), this.open());
          break;
        case "feaasMeasurements":
          this.measurements = e.data.measurements, this.props.hidden || this.setPlaceholder();
          break;
      }
    }, this.onContentChange = () => {
      this.setAttribute("changed", "changed"), requestAnimationFrame(() => {
        this.setIframeComponentContent();
      });
    }, this.onClose = () => {
      var e;
      this.setAttribute("hidden", "hidden"), this.placeholder && (this.placeholder.positionable.style.opacity = "0", this.placeholder.positionable.style.pointerEvents = "none"), this.chrome && (this.chrome.wrapper.style.opacity = "0"), !((e = this.target) === null || e === void 0) && e.parentNode && (this.target.outerHTML = this.target.outerHTML), this.setTarget(null, { component: null, version: null, instance: null, revision: null }), this.setEditorContext({ isFocused: false });
    }, this.onVersionStateChange = (e, r) => {
      this.versionContext = e, this.setVersionContext = r;
    }, this.onEditorStateChange = (e, r) => {
      this.editorContext = e, this.setEditorContext = r, e.editor && this.props.state == "loading" && !this.props.hidden && (this.setAttribute("state", "ready"), this.ownerDocument.fonts.ready.then(() => setTimeout(() => {
        this.setReadyState(), this.setIframeComponentContent();
      }, 100)));
    };
  }
  getProps() {
    return Ue(this);
  }
  getReactRootElement() {
    return this.reactRootElement || (this.reactRootElement = document.createElement("div"), this.getRoot().appendChild(this.reactRootElement)), this.reactRootElement;
  }
  showLoader() {
    this.loader || (this.loader = document.createElement("feaas-loader"), this.loader.setAttribute("opacity", "0.6"), this.loader.style.zIndex = "1000", this.target.appendChild(this.loader), this.target.tagName == "FEAAS-COMPONENT" && (this.target.style.position = "relative"));
  }
  hideLoader() {
    this.loader && (this.loader.setAttribute("hidden", "hidden"), this.target.tagName == "FEAAS-COMPONENT" && (this.target.style.position = "relative", this.target.style.position = ""));
  }
  load() {
    return import(
      /*@vite-ignore*/
      /* webpackIgnore: true */
      this.formatURL(this.props.src, this.props.frontend)
    );
  }
  connectedCallback() {
    super.connectedCallback(), window.addEventListener("message", this.onWindowMessage);
  }
  disconnectedCallback() {
    super.disconnectedCallback(), window.removeEventListener("message", this.onWindowMessage);
  }
  setIframe(e) {
    this.iframe = e;
  }
  setIframeComponentContent() {
    this.placeholder && this.iframe && this.placeholder.editable.innerHTML && this.iframe.contentWindow.postMessage({ type: "feaasUpdate", id: this.editedUID, content: this.placeholder.editable.innerHTML });
  }
  setPlaceholder() {
    if (!this.iframe) return;
    let e = this.iframe.clientWidth, r = this.iframe.clientHeight, n = this.iframe.getBoundingClientRect(), i = this.getPlaceholder(), o = document.body.getBoundingClientRect(), s2 = this.measurements[this.editedUID];
    s2 && (Object.assign(i.clipper.style, { position: "absolute", top: n.top + this.iframe.clientTop - o.top + "px", left: n.left + this.iframe.clientLeft - o.left + "px", width: e + "px", height: r + "px", pointerEvents: "none", zIndex: 1, overflow: "hidden" }), Object.assign(i.positionable.style, { position: "absolute", top: s2.top + "px", left: s2.left + "px", width: s2.width + "px", zIndex: 2, transition: "opacity 0.4s", pointerEvents: this.props.hidden ? "none" : "all" }), Object.assign(i.loader.style, { position: "absolute", top: s2.top + "px", left: s2.left + "px", width: s2.width + "px", height: s2.height + "px", filter: "opacity(0.6)", zIndex: 3, pointerEvents: "none" }), document.dispatchEvent(new Event("feaasRefresh", { bubbles: true })));
  }
  getPlaceholder() {
    return this.placeholder ? this.placeholder : (this.placeholder = { clipper: document.createElement("div"), positionable: document.createElement("div"), editable: Object.assign(document.createElement("div"), { className: "-feaas" }), loader: document.createElement("feaas-loader") }, this.placeholder.clipper.appendChild(this.placeholder.positionable), this.placeholder.positionable.appendChild(this.placeholder.editable), this.placeholder.clipper.appendChild(this.placeholder.loader), this.placeholder);
  }
  attributeChangedCallback(e, r, n) {
    r !== n && (e == "hidden" && (this.style.setProperty("display", "block", "important"), this.style.setProperty("transition", "opacity 0.3s", "important"), n ? (this.style.setProperty("opacity", "0", "important"), this.style.pointerEvents = "none") : (this.style.setProperty("opacity", "1", "important"), this.style.pointerEvents = "all")), super.attributeChangedCallback(e, r, n));
  }
  open() {
    clearTimeout(this.closing), this.removeAttribute("hidden"), this.removeAttribute("changed"), this.setLoadingState();
  }
  shouldFork(e) {
    return e.forkOriginId == null && this.props.instance != null;
  }
  cleanup() {
    var e;
    this.placeholder && ((e = this.placeholder.clipper) === null || e === void 0 || e.remove(), this.placeholder = null);
  }
  close() {
    console.log("Editor is not ready");
  }
  unfork() {
    console.log("Editor is not ready");
  }
  discard() {
    console.log("Editor is not ready");
  }
  save() {
    console.log("Editor is not ready");
  }
  setVersionContext(e) {
    console.log("Editor is not ready");
  }
  setEditorContext(e) {
    console.log("Editor is not ready");
  }
  setLoadingState() {
    this.showLoader(), this.setAttribute("state", "loading");
  }
  setReadyState() {
    this.hideLoader(), this.setEditorContext({ activeVersionId: this.component.versions[0].id }), this.setAttribute("state", "ready");
  }
  render({ children: e, component: r, version: n, instance: i }, { Editor: o, VersionStatusList: s2, VersionStatusButton: a, Version: l, VersionMenu: d, EditorUIUndo: c, EditorUIMode: h2, React: { useEffect: u, useMemo: p, useState: f, useContext: m }, Chakra: { HStack: g, Box: C2, Button: N3, MenuItem: L }, Chrome: tt, ReactDOM: St, useSDK: k3, useLibrary: B2, useSlots: S2, useModelObserver: ot, ConfirmationContext: V2, VersionContext: b3 }) {
    if (!this.payload) return;
    let { React: y3 } = this.payload, Rt = k3(), st = B2(), [A2, $2] = f(), { setConfirm: U2 } = m(V2), at = i || n;
    A2 && (this.component = A2), u(() => {
      if (this.props.hidden) return;
      let R2 = st.components.getItem(r).clone();
      return R2.versions.search({ ids: [n, i].filter(Boolean), componentIds: [r] }).then((J2) => {
        R2.versions.setItems(J2);
        let P2 = R2.findVersion(i, ["staged", "published"]), ct = R2.findVersion(n, ["staged", "published"]);
        if (P2) P2.deletedAt ? (P2.getDraft().changeAndNotify(ct.toProperties()).restore(), console.error("FEAAS Editor: Restoring fork")) : (console.error("FEAAS Editor: Pre-forked"), this.setAttribute("forked", P2.id));
        else if (this.removeAttribute("forked"), this.shouldFork(ct)) {
          console.error("FEAAS Editor: Forking");
          let It = ct.fork(i).id;
          this.setAttribute("instance", It);
        } else console.error("FEAAS Editor: Regular");
        $2(R2);
      }), () => {
        this.closing = setTimeout(() => {
          this.closing = null, this.cleanup(), $2(null);
        }, 400);
      };
    }, [n, this.props.hidden]);
    let ne = ot(A2 == null ? void 0 : A2.versions, []).filter((R2) => R2.id == at), lt = ne[0];
    lt && !this.props.hidden && (this.version = lt), u(() => (this.unfork = () => {
      U2({ title: "Reverting component customizations", button: "Discard", body: "Are you sure to reset component to its original state? All changes will be lost.", action: () => {
        let R2 = A2.findVersion(n, ["staged", "published"]);
        A2.findVersion(i).unstage().unpublish().changeAndNotify(R2.toProperties()), A2.saveVersions(false), this.setVersionContext({ needsWrite: true }), this.removeAttribute("forked"), requestAnimationFrame(this.onClose);
      } });
    }, this.discard = () => {
      this.props.changed && (A2.findVersion(at).revert(), A2.saveVersions(false), this.setVersionContext({ needsWrite: true }));
    }, this.close = () => {
      U2({ title: "Component has unsaved changes", button: "Discard", body: "Are you sure to close editor and discard changes?", bypass: !this.props.changed, action: () => {
        this.discard(), requestAnimationFrame(this.onClose);
      } });
    }, this.save = () => {
      U2({ bypass: !!this.props.forked, title: "Customizing component", button: "Save", body: "Changes to the component will only be visible on that page. Changes to component done in Component Builder will not be reflected here. It will be possible to revert the customization.", action: () => {
        var R2, J2;
        (J2 = (R2 = A2.findVersion(at).commitData({ view: this.editorContext.editor.getData({ rootName: at }), model: "" })) === null || R2 === void 0 ? void 0 : R2.stage()) === null || J2 === void 0 || J2.publish(), this.removeAttribute("changed"), this.setAttribute("forked", at), A2.saveVersions(false);
      } });
    }, () => {
      delete this.unfork, delete this.discard, delete this.save, delete this.editorContext, delete this.versionContext, delete this.setEditorContext, delete this.setVersionContext;
    }), [A2]);
    let Ke = p(() => this.target, [A2]);
    return p(() => A2 && S2(e, ({ picker: R2, children: J2 }) => y3.createElement(C2, { ref: (P2) => {
      this.chrome = P2 ? { positionable: P2, wrapper: P2.querySelector(".editor-chrome"), absolute: this.querySelector(".ui.overlays") } : null;
    } }, y3.createElement(C2, { className: "editor-wrapper", position: "absolute", left: 0, top: 0 }, y3.createElement(o, { datasources: Rt.datasources, sdk: Rt, library: st, component: A2, versions: ne, context: { isAutosaveEnabled: false, onChromeMeasure: this.onMeasure, onChromeBeforeMeasure: this.onBeforeMeasure, onChromeMeasureElement: this.onChromeMeasureElement, onChromePosition: this.onPosition, onContentChange: this.onContentChange } }, { exports: this.onEditorStateChange, after: J2, chrome: ({ editor: P2 }) => P2 && y3.createElement(tt, null), children: ({ isArchivedDisplayed: P2, editor: ct, status: It }) => y3.createElement(C2, { position: "absolute", left: 0, top: 0, className: "editor-chrome", p: 4, boxShadow: "2xl", pointerEvents: "none", opacity: 0, transition: "opacity 0.3s" }, y3.createElement(C2, { left: 0, width: "4", top: 0, bottom: 0, backdropFilter: "blur(2px)", background: "rgb(244 244 244 / 80%)", position: "absolute" }), y3.createElement(C2, { right: 0, width: "4", top: 0, bottom: 0, backdropFilter: "blur(2px)", background: "rgb(244 244 244 / 80%)", position: "absolute" }), y3.createElement(C2, { top: 0, height: "16", left: 0, right: 0, backdropFilter: "blur(2px)", background: "rgb(244 244 244 / 80%)", position: "absolute" }), y3.createElement(C2, { bottom: 0, height: "4", left: 0, right: 0, backdropFilter: "blur(2px)", background: "rgb(244 244 244 / 80%)", position: "absolute" }), lt && y3.createElement(l, { version: lt, node: Ke, ignoreBreakpoints: true, deps: [this.props.forked, this.props.changed] }, { exports: this.onVersionStateChange, left: y3.createElement(g, { justifyContent: "space-between" }, y3.createElement(c, { size: "sm", editor: It == "ready" ? ct : null }), y3.createElement(h2, { size: "sm" })), middle: (Mr, Lr) => [false], right: y3.createElement(y3.Fragment, null, y3.createElement(N3, { variant: "secondary", size: "sm", onClick: this.close }, "Close"), y3.createElement(N3, { variant: "primary", size: "sm", onClick: this.save, isDisabled: !this.props.changed }, this.props.changed ? this.props.forked ? "Save" : "Save customization" : "Up to date"), y3.createElement(d, { isDisabled: !this.props.forked && !this.props.changed }, y3.createElement(L, { onClick: this.unfork, isDisabled: !this.props.forked }, "Unfork"), y3.createElement(L, { onClick: this.discard, isDisabled: !this.props.changed }, "Discard"))) })) })))), [lt, this.props.forked, this.props.changed]);
  }
  isReadyToLoad() {
    return this.props.component != null && this.props.version != null && !this.props.hidden;
  }
};
xt.observedAttributes = ["library", "component", "version", "revision", "hidden", "state", "changed", "forked"];
xt.register("feaas-editor");
function We(t2) {
  var e, r;
  return { part: (t2 == null ? void 0 : t2.getAttribute("part")) || "picker", slot: (t2 == null ? void 0 : t2.getAttribute("part")) || "picker", mode: t2 == null ? void 0 : t2.getAttribute("mode"), dialog: t2 == null ? void 0 : t2.getAttribute("dialog"), placeholder: (t2 == null ? void 0 : t2.getAttribute("placeholder")) || "No theme", frontend: (e = t2 == null ? void 0 : t2.getContextAttribute("frontend")) !== null && e !== void 0 ? e : "https://components.sitecorecloud.io", src: (r = t2 == null ? void 0 : t2.getAttribute("src")) !== null && r !== void 0 ? r : "/picker.js", hidden: (t2 == null ? void 0 : t2.getAttribute("hidden")) != null, variant: t2 == null ? void 0 : t2.getAttribute("variant"), context: void 0, onClose: void 0, setAttribute: void 0, getAttribute: void 0 };
}
var wt = class extends E2 {
  constructor() {
    super(...arguments), this.defaultProps = { hidden: false };
  }
  getProps() {
    return We(this);
  }
  load() {
    return this.import(
      /*@vite-ignore*/
      /* webpackIgnore: true */
      this.formatURL(this.props.src, this.props.frontend)
    );
  }
  connectedCallback() {
    this.setAttribute("feaas-role", "ui"), super.connectedCallback();
  }
  render({ placeholder: e, context: r, mode: n, dialog: i, children: o, variant: s2 }, { Picker: a, React: l, useContext: d, EnvironmentContext: c, useLibrary: h2, useSDK: u, BYOC: p }) {
    var f, m, g;
    let [C2, N3] = l.useReducer((A2) => A2 + 1, 0), L = u(), tt = d(c), St = h2("collections"), k3 = h2("components"), B2 = u("datasources"), S2 = h2(), ot = ((m = (f = S2 == null ? void 0 : S2.stylesheets) === null || f === void 0 ? void 0 : f.first) === null || m === void 0 ? void 0 : m.rules) || ((g = S2 == null ? void 0 : S2.stylesheet) === null || g === void 0 ? void 0 : g.styles), V2 = u("renderingHost.expandedComponents");
    var b3 = r == null ? void 0 : r.getAttribute("data");
    if (b3) try {
      b3 = JSON.parse(b3);
    } catch (A2) {
    }
    if (r) var y3 = L.ExternalComponent.getDefinition(r), Rt = y3 && !y3.getConfiguration(r), st = (y3 == null ? void 0 : y3.type) == "feaas" ? k3.find((A2) => A2.id == r.getAttribute("component")) : p == null ? void 0 : p.getComponent(String(r.getAttribute("data-external-id")));
    return l.createElement(a, { cdn: tt.cdn, rules: ot, collections: St, themeContext: r, placeholder: e, embed: st, externalComponents: V2, datasources: B2, data: b3, versionId: r == null ? void 0 : r.getAttribute("version"), mode: n || (Rt ? "library" : st ? "context" : null), setAttribute: (A2, $2, U2) => {
      $2 == "data" && U2 && (U2 = JSON.stringify(U2)), this.props.setAttribute(A2, $2, U2), N3();
    }, getAttribute: (A2, $2) => r == null ? void 0 : r.getAttribute($2), dialog: i, context: r, variant: s2, onModeChange: (A2, $2) => {
      this.set({ mode: A2, dialog: $2 });
    } }, o);
  }
};
wt.observedAttributes = ["library", "mode", "frontend", "src", "hidden", "variant", "dialog"];
wt.register("feaas-picker");
function He(t2) {
  var e, r, n, i, o;
  return { library: t2 == null ? void 0 : t2.getAttribute("library"), src: (e = t2 == null ? void 0 : t2.getAttribute("src")) !== null && e !== void 0 ? e : "/context.js", environment: (r = t2 == null ? void 0 : t2.getAttribute("environment")) !== null && r !== void 0 ? r : void 0, frontend: (n = t2 == null ? void 0 : t2.getAttribute("frontend")) !== null && n !== void 0 ? n : "https://components.sitecorecloud.io", backend: (i = t2 == null ? void 0 : t2.getAttribute("backend")) !== null && i !== void 0 ? i : "https://components.sitecorecloud.io/api", cdn: (o = t2 == null ? void 0 : t2.getAttribute("cdn")) !== null && o !== void 0 ? o : "https://feaas.blob.core.windows.net", auth: null, isolate: (t2 == null ? void 0 : t2.getAttribute("isolate")) == null || (t2 == null ? void 0 : t2.getAttribute("isolate")) == "true" };
}
var Z2 = class extends E2 {
  constructor() {
    super(...arguments), this.defaultProps = { isolate: true }, this.onStatusChange = (e, r) => {
      e == "ready" && (this.whenSDKReady.resolve(r), this.dispatchEvent(new CustomEvent("feaasReady", { bubbles: true, composed: true, detail: r })));
    }, this.whenSDKReady = D2((e) => {
      this.sdk = e;
    });
  }
  getProps() {
    return He(this);
  }
  load() {
    return this.import(
      /*@vite-ignore*/
      /* webpackIgnore: true */
      this.formatURL(this.props.src, this.props.frontend)
    );
  }
  isReadyToLoad() {
    return super.isReadyToLoad() && this.props.library != null;
  }
  getTheme(e) {
    return e;
  }
  getRoot() {
    return this.getAttribute("isolate") === "false" ? this : this.shadowRoot || this.attachShadow({ mode: "open" });
  }
  getReactRootElement() {
    return this.reactRootElement || (this.reactRootElement = document.createElement("div"), this.getRoot().appendChild(this.reactRootElement)), this.reactRootElement;
  }
  connectedCallback() {
    this.setAttribute("feaas-role", "ui"), Array.from(this.children).forEach((e) => {
      this.getRoot().appendChild(e);
    }), document.addEventListener("feaasMount", this), document.addEventListener("feaasUnmount", this), super.connectedCallback();
  }
  disconnectedCallback() {
    document.removeEventListener("feaasMount", this), document.removeEventListener("feaasUnmount", this), super.disconnectedCallback();
  }
  getPortalRoot() {
    return this.getRoot();
  }
  render({ children: e, library: r }, { AppContext: n, Chakra: { Button: i, Tooltip: o }, React: s2 }) {
    let a = { containerRef: { current: this.getPortalRoot() } };
    return o.defaultProps = { hasArrow: true, placement: "top", portalProps: a }, s2.createElement(n, { environment: this.props.environment, backend: this.props.backend, libraryId: this.props.library, container: this.getRoot(), auth: this.props.auth, getTheme: this.getTheme, onStatusChange: this.onStatusChange, modalProps: { portalProps: a }, chakraProps: { resetScope: ':where([feaas-role="ui"])', cssVarsRoot: ":host", resetCSS: true, toastOptions: { portalProps: a } } }, e);
  }
};
Z2.observedAttributes = ["library", "component", "version", "revision", "hostname", "template"];
Z2.register("feaas-context");
Z2.prototype.clientside = ee2;
var Ve = be;
function Nr(t2) {
  let e = ie(Array.from(t2.attributes).reduce((r, { name: n, value: i }) => (n == "data-external-id" && (n = "component-name"), Object.assign(r, { [n]: i })), {}));
  return Ve(e).merged;
}
var j2 = class extends E2 {
  load() {
    return Promise.all([import(
      /*@vite-ignore*/
      /* webpackIgnore: true */
      "https://cdn.skypack.dev/react-dom/client"
    )]).then(([e]) => ({ React: import_react5.default, ReactDOM: import_react_dom.default, ReactDOMClient: e }));
  }
  connectedCallback() {
    this._setAttribute || (this._setAttribute = this.setAttribute, this.setAttribute = function(e, r) {
      let n = this.getAttribute(r);
      this._setAttribute(e, r), this.attributeChangedCallback(e, n, r);
    }), super.connectedCallback();
  }
  update() {
    var e;
    if (!(!(!((e = D(this.getComponentName())) === null || e === void 0) && e.component) && this.getAttribute("hydrate") == "false")) return super.update();
  }
  render(e, { React: r }) {
    var n;
    let i = (n = D(this.getComponentName())) === null || n === void 0 ? void 0 : n.component;
    return i || console.warn(`FEAASExternal: \`${this.getComponentName()}\` is not registered`), r.createElement(r.Fragment, null, i && r.createElement(i, { componentName: this.getComponentName(), ...e }));
  }
  getComponentName() {
    return this.getAttribute("data-external-id");
  }
  getProps() {
    return Nr(this);
  }
  static Preview(e) {
    var r;
    let n = (e == null ? void 0 : e.src) || (typeof window != "undefined" ? (r = window.location.search.match(/feaasSrc=([^&]+)/)) === null || r === void 0 ? void 0 : r[1] : null);
    return n ? import_react5.default.createElement(Je, { src: n, ...e }) : null;
  }
  static linkComponents(e) {
    return () => e.map((r) => null);
  }
};
j2.registered = x;
j2.registerComponent = $;
j2.setRegistrationCallback = R;
j2.getComponent = D;
j2.register("feaas-external");
var { linkComponents: kr } = j2;
var re = {};
function Ye(t2) {
  return t2 == null || t2 === true ? ["template", "stylesheet", "data"] : [].concat(t2 || []);
}
function qe({ data: t2, lastModified: e, fetchedData: r, renderNode: n, ...i }) {
  let o = null, s2;
  "template" in i && i.template && (s2 = Jt(i.template, r || t2 || {}).map((d, c) => Ge(d, (h2, u) => {
    if (n) {
      let f = n == null ? void 0 : n(h2, u);
      if (f != null && "type" in f) return [f.type, f.props];
      u = { ...u, ...f };
    }
    if (re[h2.localName]) return [re[h2.localName], u];
    if (h2.localName == "feaas-external") {
      let f = {};
      for (var p in u) {
        let m = p == "data-external-id" ? "componentName" : O(p);
        f[m] = u[p];
      }
      return [_2, f];
    }
  }, c))), "src" in i && (i = { ...X2(i.src), ...i });
  let a = Ye(i.fetch), l = a.includes("data") ? t2 : a.includes("template") ? r || t2 : null;
  return import_react4.default.createElement(import_react4.default.Fragment, null, "preload" in i && o === true && "src" in i && import_react4.default.createElement(import_react4.default.Fragment, null, import_react4.default.createElement("link", { rel: "preload", as: "fetch", href: At(i.src), crossOrigin: "anonymous" }), import_react4.default.createElement("link", { rel: "preload", as: "style", href: Q2(i.src), crossOrigin: "anonymous" })), import_react4.default.createElement("feaas-component", { class: "-feaas", ...i, "last-modified": e ? String(e) : null, fetch: i.fetch == null ? i.fetch : [].concat(i.fetch).join(" "), suppressHydrationWarning: true, template: null, data: typeof l == "string" ? l : l ? JSON.stringify(l) : null }, s2));
}
function Ge(t2, e, r) {
  var n;
  if (t2.nodeType === 3) return t2.textContent;
  let i = Array.from(t2.childNodes).map((c, h2) => Ge(c, e, h2)), o = {};
  for (let c = 0; c < t2.attributes.length; c++) {
    let { name: h2, value: u } = t2.attributes[c];
    h2 == "style" ? o[h2] = String(u || "").trim().split(/\s*;\s*/).reduce((p, f) => {
      let [m, g] = f.split(":");
      return { ...p, [O(m)]: g };
    }, {}) : h2 == "class" ? o.className = u : o[h2] = u;
  }
  let s2 = e == null ? void 0 : e(t2, o), a = (s2 == null ? void 0 : s2[0]) || t2.nodeName.toLowerCase();
  a == "style" && (o.dangerouslySetInnerHTML = { __html: i.join(`
`) });
  let l = Object.assign({ key: r, suppressHydrationWarning: true }, (s2 == null ? void 0 : s2[1]) || o), d = ((n = s2 == null ? void 0 : s2[1]) === null || n === void 0 ? void 0 : n.children) || i;
  return import_react4.default.createElement(a, l, ["img", "br", "input", "style"].includes(a) ? null : d);
}
var Ai = _2;
var Je = qe;

// node_modules/@sitecore-jss/sitecore-jss-react/dist/esm/components/FEaaSComponent.js
var import_layout2 = __toESM(require_layout2());
var __awaiter = function(thisArg, _arguments, P2, generator) {
  function adopt(value) {
    return value instanceof P2 ? value : new P2(function(resolve) {
      resolve(value);
    });
  }
  return new (P2 || (P2 = Promise))(function(resolve, reject) {
    function fulfilled(value) {
      try {
        step(generator.next(value));
      } catch (e) {
        reject(e);
      }
    }
    function rejected(value) {
      try {
        step(generator["throw"](value));
      } catch (e) {
        reject(e);
      }
    }
    function step(result) {
      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
    }
    step((generator = generator.apply(thisArg, _arguments || [])).next());
  });
};
var FEAAS_COMPONENT_RENDERING_NAME = "FEaaSComponent";
var FEaaSComponent = (props) => {
  var _a2, _b, _c, _d, _e2, _f, _g;
  const computedRevision = ((_a2 = props.params) === null || _a2 === void 0 ? void 0 : _a2.ComponentRevision) || props.revisionFallback;
  if (!props.template && (!props.params || !props.params.LibraryId || !props.params.ComponentId || !props.params.ComponentVersion || !props.params.ComponentHostName || !computedRevision)) {
    return null;
  }
  const data = Object.assign(Object.assign({}, props.fetchedData), { _: getDataFromFields((_b = props.fields) !== null && _b !== void 0 ? _b : {}) });
  return import_react6.default.createElement(Je, { data, template: props.template, cdn: (_c = props.params) === null || _c === void 0 ? void 0 : _c.ComponentHostName, library: (_d = props.params) === null || _d === void 0 ? void 0 : _d.LibraryId, version: (_e2 = props.params) === null || _e2 === void 0 ? void 0 : _e2.ComponentVersion, component: (_f = props.params) === null || _f === void 0 ? void 0 : _f.ComponentId, instance: (_g = props.params) === null || _g === void 0 ? void 0 : _g.ComponentInstanceId, revision: computedRevision, fetch: [] });
};
function fetchFEaaSComponentServerProps(params, pageState, endpointOverride) {
  return __awaiter(this, void 0, void 0, function* () {
    const revisionFallback = pageState && pageState !== import_layout2.LayoutServicePageState.Normal ? "staged" : "published";
    const src = endpointOverride || composeComponentEndpoint(params, revisionFallback);
    let template = "";
    let fetchedData = {};
    const fetchDataOptions = params.ComponentDataOverride ? JSON.parse(params.ComponentDataOverride) : {};
    try {
      template = yield fetchComponentTemplate(src, params, revisionFallback);
      fetchedData = yield fetchData2(fetchDataOptions);
    } catch (e) {
      console.error(e);
    }
    return {
      fetchedData,
      revisionFallback,
      template
    };
  });
}
function fetchComponentTemplate(src, params, revisionFallback) {
  return __awaiter(this, void 0, void 0, function* () {
    try {
      const { template } = yield Kt(src);
      return template;
    } catch (error) {
      console.error(`Fetch FEAAS component from ${src} failed. Ensure the component revision "${params.ComponentRevision || revisionFallback}" is present`);
      throw error;
    }
  });
}
function fetchData2(dataOptions) {
  return __awaiter(this, void 0, void 0, function* () {
    try {
      const fetchedData = yield x2.fetch(dataOptions || {});
      return fetchedData;
    } catch (error) {
      console.error("Fetch FEAAS component data settings failed");
      throw error;
    }
  });
}
var composeComponentEndpoint = (params, revisionFallback) => {
  const revision = params.ComponentRevision || revisionFallback;
  const hostname = params.ComponentHostName.startsWith("https://") ? params.ComponentHostName : `https://${params.ComponentHostName}`;
  return `${hostname}/components/${params.LibraryId}/${params.ComponentId}/${params.ComponentVersion}/${revision}`;
};

// node_modules/@sitecore-jss/sitecore-jss-react/dist/esm/components/FEaaSWrapper.js
var import_react7 = __toESM(require_react());
var FEAAS_WRAPPER_RENDERING_NAME = "FEaaSWrapper";
var FEaaSWrapper = (props) => {
  var _a2, _b;
  const styles2 = `component feaas ${(_a2 = props.params) === null || _a2 === void 0 ? void 0 : _a2.styles}`.trimEnd();
  const id = (_b = props.params) === null || _b === void 0 ? void 0 : _b.RenderingIdentifier;
  return import_react7.default.createElement(
    "div",
    { className: styles2, id: id ? id : void 0 },
    import_react7.default.createElement(
      "div",
      { className: "component-content" },
      import_react7.default.createElement(FEaaSComponent, Object.assign({}, props))
    )
  );
};

// node_modules/@sitecore-jss/sitecore-jss-react/dist/esm/components/BYOCComponent.js
var import_react8 = __toESM(require_react());
var __awaiter2 = function(thisArg, _arguments, P2, generator) {
  function adopt(value) {
    return value instanceof P2 ? value : new P2(function(resolve) {
      resolve(value);
    });
  }
  return new (P2 || (P2 = Promise))(function(resolve, reject) {
    function fulfilled(value) {
      try {
        step(generator.next(value));
      } catch (e) {
        reject(e);
      }
    }
    function rejected(value) {
      try {
        step(generator["throw"](value));
      } catch (e) {
        reject(e);
      }
    }
    function step(result) {
      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
    }
    step((generator = generator.apply(thisArg, _arguments || [])).next());
  });
};
var BYOC_COMPONENT_RENDERING_NAME = "BYOCComponent";
var DefaultErrorComponent = (props) => {
  var _a2;
  return import_react8.default.createElement(
    "div",
    null,
    "A rendering error occurred: ",
    (_a2 = props.error) === null || _a2 === void 0 ? void 0 : _a2.message,
    "."
  );
};
var BYOCComponent = class extends import_react8.default.Component {
  constructor(props) {
    super(props);
    this.state = {};
  }
  static getDerivedStateFromError(error) {
    return { error };
  }
  componentDidCatch(error) {
    this.setState({ error });
  }
  render() {
    var _a2, _b, _c;
    const props = this.props;
    if (this.state.error) {
      return this.props.errorComponent ? import_react8.default.createElement(this.props.errorComponent, { error: this.state.error }) : import_react8.default.createElement(DefaultErrorComponent, { error: this.state.error });
    }
    const { ComponentName: componentName } = props.params || {};
    if (!componentName) {
      const noNameProps = {
        errorOverride: "BYOC: The ComponentName for this rendering is missing"
      };
      return props.missingComponentComponent ? import_react8.default.createElement(this.props.missingComponentComponent, Object.assign({}, noNameProps)) : import_react8.default.createElement(MissingComponent, Object.assign({}, noNameProps));
    }
    const unRegisteredComponentProps = {
      rendering: {
        componentName
      },
      errorOverride: "BYOC: This component was not registered."
    };
    const fallbackComponent = this.props.missingComponentComponent ? import_react8.default.createElement(this.props.missingComponentComponent, Object.assign({}, unRegisteredComponentProps)) : import_react8.default.createElement(MissingComponent, Object.assign({}, unRegisteredComponentProps));
    const ErrorComponent = this.props.errorComponent;
    let componentProps = {};
    if ((_a2 = props.params) === null || _a2 === void 0 ? void 0 : _a2.ComponentProps) {
      try {
        componentProps = (_b = JSON.parse(props.params.ComponentProps)) !== null && _b !== void 0 ? _b : {};
      } catch (e) {
        console.error(`Parsing props for ${componentName} component from rendering params failed. Error: ${e}`);
        return ErrorComponent ? import_react8.default.createElement(ErrorComponent, { error: e }) : import_react8.default.createElement(DefaultErrorComponent, { error: e });
      }
    }
    const dataSourcesData = Object.assign(Object.assign({}, props.fetchedData), { _: getDataFromFields((_c = props.fields) !== null && _c !== void 0 ? _c : {}) });
    return import_react8.default.createElement(Ai, Object.assign({ componentName, clientFallback: fallbackComponent, datasources: dataSourcesData }, componentProps));
  }
};
function fetchBYOCComponentServerProps(params) {
  return __awaiter2(this, void 0, void 0, function* () {
    const fetchDataOptions = params.ComponentDataOverride ? JSON.parse(params.ComponentDataOverride) : {};
    const fetchedData = yield x2.fetch(fetchDataOptions || {});
    return {
      fetchedData
    };
  });
}

// node_modules/@sitecore-jss/sitecore-jss-react/dist/esm/components/BYOCWrapper.js
var import_react9 = __toESM(require_react());
var BYOC_WRAPPER_RENDERING_NAME = "BYOCWrapper";
var BYOCWrapper = (props) => {
  var _a2, _b, _c;
  const styles2 = (_b = (_a2 = props.params) === null || _a2 === void 0 ? void 0 : _a2.styles) === null || _b === void 0 ? void 0 : _b.trimEnd();
  const id = (_c = props.params) === null || _c === void 0 ? void 0 : _c.RenderingIdentifier;
  return import_react9.default.createElement(
    "div",
    { className: styles2 ? styles2 : void 0, id: id ? id : void 0 },
    import_react9.default.createElement(
      "div",
      { className: "component-content" },
      import_react9.default.createElement(BYOCComponent, Object.assign({}, props))
    )
  );
};

// node_modules/@sitecore-jss/sitecore-jss-react/dist/esm/components/PlaceholderCommon.js
var __rest2 = function(s2, e) {
  var t2 = {};
  for (var p in s2) if (Object.prototype.hasOwnProperty.call(s2, p) && e.indexOf(p) < 0)
    t2[p] = s2[p];
  if (s2 != null && typeof Object.getOwnPropertySymbols === "function")
    for (var i = 0, p = Object.getOwnPropertySymbols(s2); i < p.length; i++) {
      if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s2, p[i]))
        t2[p[i]] = s2[p[i]];
    }
  return t2;
};
var PlaceholderCommon = class extends import_react10.default.Component {
  constructor(props) {
    super(props);
    this.nodeRefs = [];
    this.state = {};
    this.addRef = this.addRef.bind(this);
    this.updateKeyAttributes = this.updateKeyAttributes.bind(this);
    this.createRawElement = this.createRawElement.bind(this);
  }
  static getPlaceholderDataFromRenderingData(rendering, name) {
    let result;
    if (rendering === null || rendering === void 0 ? void 0 : rendering.placeholders) {
      Object.keys(rendering.placeholders).forEach((placeholder) => {
        const patternPlaceholder = placeholder.indexOf("{*}") !== -1 ? new RegExp(`^${placeholder.replace(/\{\*\}+/i, "\\d+")}$`) : null;
        if (patternPlaceholder && patternPlaceholder.test(name)) {
          rendering.placeholders[name] = rendering.placeholders[placeholder];
          delete rendering.placeholders[placeholder];
        }
      });
    }
    if (rendering && rendering.placeholders && Object.keys(rendering.placeholders).length > 0) {
      result = rendering.placeholders[name];
    } else {
      result = null;
    }
    if (!result) {
      console.warn(`Placeholder '${name}' was not found in the current rendering data`, JSON.stringify(rendering, null, 2));
      return [];
    }
    return result;
  }
  componentDidMount() {
    this.updateKeyAttributes();
  }
  componentDidUpdate() {
    this.updateKeyAttributes();
  }
  componentDidCatch(error) {
    this.setState({ error });
  }
  getSXAParams(rendering) {
    if (!rendering.params)
      return {};
    return rendering.params.FieldNames && {
      styles: `${rendering.params.GridParameters || ""} ${rendering.params.Styles || ""}`
    };
  }
  getComponentsForRenderingData(placeholderData) {
    const _a2 = this.props, { name, fields: placeholderFields, params: placeholderParams, missingComponentComponent, hiddenRenderingComponent } = _a2, placeholderProps = __rest2(_a2, ["name", "fields", "params", "missingComponentComponent", "hiddenRenderingComponent"]);
    return placeholderData.map((rendering, index) => {
      const key = rendering.uid ? rendering.uid : `component-${index}`;
      const commonProps = { key };
      if (!rendering.componentName && rendering.name) {
        return this.createRawElement(rendering, commonProps);
      }
      const componentRendering = rendering;
      let component;
      if (componentRendering.componentName === HIDDEN_RENDERING_NAME) {
        component = hiddenRenderingComponent !== null && hiddenRenderingComponent !== void 0 ? hiddenRenderingComponent : HiddenRendering;
      } else if (!componentRendering.componentName) {
        component = () => import_react10.default.createElement(import_react10.default.Fragment, null);
      } else {
        component = this.getComponentForRendering(componentRendering);
      }
      if (!component) {
        if (componentRendering.componentName === FEAAS_COMPONENT_RENDERING_NAME) {
          component = FEaaSComponent;
        } else if (componentRendering.componentName === FEAAS_WRAPPER_RENDERING_NAME) {
          component = FEaaSWrapper;
        } else if (componentRendering.componentName === BYOC_COMPONENT_RENDERING_NAME) {
          component = BYOCComponent;
        } else if (componentRendering.componentName === BYOC_WRAPPER_RENDERING_NAME) {
          component = BYOCWrapper;
        }
      }
      if (!component) {
        console.error(`Placeholder ${name} contains unknown component ${componentRendering.componentName}. Ensure that a React component exists for it, and that it is registered in your componentFactory.js.`);
        component = missingComponentComponent !== null && missingComponentComponent !== void 0 ? missingComponentComponent : MissingComponent;
      }
      const finalProps = Object.assign(Object.assign(Object.assign(Object.assign(Object.assign({}, commonProps), placeholderProps), (placeholderFields || componentRendering.fields) && {
        fields: Object.assign(Object.assign({}, placeholderFields), componentRendering.fields)
      }), (placeholderParams || componentRendering.params) && {
        params: Object.assign(Object.assign(Object.assign({}, placeholderParams), componentRendering.params), this.getSXAParams(componentRendering))
      }), { rendering: componentRendering });
      return import_react10.default.createElement(component, this.props.modifyComponentProps ? this.props.modifyComponentProps(finalProps) : finalProps);
    }).filter((element) => element);
  }
  getComponentForRendering(renderingDefinition) {
    var _a2;
    const componentFactory = this.props.componentFactory;
    if (!componentFactory || typeof componentFactory !== "function") {
      console.warn(`No componentFactory was available to service request for component ${renderingDefinition}`);
      return null;
    }
    if ((_a2 = renderingDefinition.params) === null || _a2 === void 0 ? void 0 : _a2.FieldNames) {
      return componentFactory(renderingDefinition.componentName, renderingDefinition.params.FieldNames);
    }
    return componentFactory(renderingDefinition.componentName);
  }
  addRef(nodeRef) {
    this.nodeRefs.push(nodeRef);
  }
  createRawElement(elem, baseProps) {
    if (!elem.name) {
      console.error('"elem.name" is undefined in "createRawElement". Something is likely wrong with your component data. Ensure that your components have a name.');
      return null;
    }
    const attributes = convertAttributesToReactProps(elem.attributes);
    const props = Object.assign(Object.assign(Object.assign({}, baseProps), attributes), { dangerouslySetInnerHTML: elem.contents ? { __html: elem.contents } : void 0 });
    if (!Array.isArray(attributes) && attributes && attributes.chrometype === "placeholder") {
      props.phkey = elem.attributes.key;
      props.ref = this.addRef;
    }
    return import_react10.default.createElement(elem.name, props);
  }
  updateKeyAttributes() {
    if (!this.nodeRefs) {
      return;
    }
    this.nodeRefs.forEach((ref) => {
      if (ref && ref.getAttribute) {
        const key = ref.getAttribute("phkey");
        if (key) {
          ref.setAttribute("key", key);
        }
      }
    });
  }
};

// node_modules/@sitecore-jss/sitecore-jss-react/dist/esm/enhancers/withComponentFactory.js
var import_react13 = __toESM(require_react());

// node_modules/@sitecore-jss/sitecore-jss-react/dist/esm/components/SitecoreContext.js
var import_react11 = __toESM(require_react());
var import_react12 = __toESM(require_react2());
var SitecoreContextReactContext = import_react11.default.createContext({});
var ComponentFactoryReactContext = import_react11.default.createContext({});
var SitecoreContext = class extends import_react11.default.Component {
  constructor(props) {
    super(props);
    this.setContext = (value) => {
      this.setState({
        context: value.sitecore ? this.constructContext(value) : Object.assign({}, value)
      });
    };
    const context = this.constructContext(props.layoutData);
    this.state = {
      context,
      setContext: this.setContext
    };
  }
  constructContext(layoutData) {
    var _a2;
    if (!layoutData) {
      return {
        pageEditing: false
      };
    }
    return Object.assign({ route: layoutData.sitecore.route, itemId: (_a2 = layoutData.sitecore.route) === null || _a2 === void 0 ? void 0 : _a2.itemId }, layoutData.sitecore.context);
  }
  componentDidUpdate(prevProps) {
    if (!(0, import_react12.default)(prevProps.layoutData, this.props.layoutData)) {
      this.setContext(this.props.layoutData);
      return;
    }
  }
  render() {
    return import_react11.default.createElement(
      ComponentFactoryReactContext.Provider,
      { value: this.props.componentFactory },
      import_react11.default.createElement(SitecoreContextReactContext.Provider, { value: this.state }, this.props.children)
    );
  }
};
SitecoreContext.displayName = "SitecoreContext";

// node_modules/@sitecore-jss/sitecore-jss-react/dist/esm/enhancers/withComponentFactory.js
var import_react14 = __toESM(require_react());
function withComponentFactory(Component) {
  function WithComponentFactory(props) {
    const context = (0, import_react14.useContext)(ComponentFactoryReactContext);
    return import_react13.default.createElement(Component, Object.assign({}, props, { componentFactory: props.componentFactory || context }));
  }
  WithComponentFactory.displayName = `withComponentFactory(${Component.displayName || Component.name || "Anonymous"})`;
  return WithComponentFactory;
}

// node_modules/@sitecore-jss/sitecore-jss-react/dist/esm/components/Placeholder.js
var import_utils5 = __toESM(require_utils4());
function isRawRendering(rendering) {
  return !rendering.componentName && rendering.name !== void 0;
}
var PlaceholderComponent = class extends PlaceholderCommon {
  constructor(props) {
    super(props);
    this.isEmpty = false;
  }
  componentDidMount() {
    super.componentDidMount();
    if (this.isEmpty && import_utils5.HorizonEditor.isActive()) {
      import_utils5.HorizonEditor.resetChromes();
    }
  }
  /**
   * In case we need to render an empty placeholder, some part of the markup will be inserted by the EE,
   * so we need to separate the empty placeholder's markup and allow React reconciliation to be executed correctly
   * and retain sibling tags
   * @param {React.ReactNode | React.ReactElement[]} node react node
   * @returns react node
   */
  renderEmptyPlaceholder(node) {
    return import_react15.default.createElement("div", { className: "sc-jss-empty-placeholder" }, node);
  }
  render() {
    const childProps = Object.assign({}, this.props);
    delete childProps.componentFactory;
    if (this.state.error) {
      if (childProps.errorComponent) {
        return import_react15.default.createElement(childProps.errorComponent, { error: this.state.error });
      }
      return import_react15.default.createElement(
        "div",
        { className: "sc-jss-placeholder-error" },
        "A rendering error occurred: ",
        this.state.error.message,
        "."
      );
    }
    const renderingData = childProps.rendering;
    const placeholderData = PlaceholderCommon.getPlaceholderDataFromRenderingData(renderingData, this.props.name);
    const components = this.getComponentsForRenderingData(placeholderData);
    this.isEmpty = placeholderData.every((rendering) => isRawRendering(rendering));
    if (this.props.renderEmpty && this.isEmpty) {
      const rendered = this.props.renderEmpty(components);
      return components.length ? this.renderEmptyPlaceholder(rendered) : rendered;
    } else if (components.length && this.isEmpty) {
      return this.renderEmptyPlaceholder(components);
    } else if (this.props.render) {
      return this.props.render(components, placeholderData, childProps);
    } else if (this.props.renderEach) {
      const renderEach = this.props.renderEach;
      return components.map((component, index) => {
        if (component && component.props && component.props.type === "text/sitecore") {
          return component;
        }
        return renderEach(component, index);
      });
    } else {
      return components;
    }
  }
};
PlaceholderComponent.propTypes = PlaceholderCommon.propTypes;
var Placeholder = withComponentFactory(PlaceholderComponent);

// node_modules/@sitecore-jss/sitecore-jss-react/dist/esm/components/Image.js
var import_media = __toESM(require_media2());
var import_react16 = __toESM(require_react());
var __rest3 = function(s2, e) {
  var t2 = {};
  for (var p in s2) if (Object.prototype.hasOwnProperty.call(s2, p) && e.indexOf(p) < 0)
    t2[p] = s2[p];
  if (s2 != null && typeof Object.getOwnPropertySymbols === "function")
    for (var i = 0, p = Object.getOwnPropertySymbols(s2); i < p.length; i++) {
      if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s2, p[i]))
        t2[p[i]] = s2[p[i]];
    }
  return t2;
};
var getEditableWrapper = (editableMarkup, ...otherProps) => (
  // create an inline wrapper and use dangerouslySetInnerHTML.
  // if we try to parse the EE value, the parser will strip invalid or disallowed attributes from html elements - and EE uses several
  import_react16.default.createElement("span", Object.assign({ className: "sc-image-wrapper" }, otherProps, { dangerouslySetInnerHTML: { __html: editableMarkup } }))
);
var getImageAttrs = (_a2, imageParams, mediaUrlPrefix) => {
  var { src, srcSet } = _a2, otherAttrs = __rest3(_a2, ["src", "srcSet"]);
  if (!src) {
    return null;
  }
  addClassName(otherAttrs);
  const newAttrs = Object.assign({}, otherAttrs);
  const resolvedSrc = import_media.mediaApi.updateImageUrl(src, imageParams, mediaUrlPrefix);
  if (srcSet) {
    newAttrs.srcSet = import_media.mediaApi.getSrcSet(resolvedSrc, srcSet, imageParams, mediaUrlPrefix);
  }
  newAttrs.src = resolvedSrc;
  return newAttrs;
};
var getEEMarkup = (imageField, imageParams, mediaUrlPrefix, otherProps) => {
  const foundImg = import_media.mediaApi.findEditorImageTag(imageField.editable);
  if (!foundImg) {
    return getEditableWrapper(imageField.editable);
  }
  const foundImgProps = convertAttributesToReactProps(foundImg.attrs);
  const imgAttrs = getImageAttrs(Object.assign(Object.assign({}, foundImgProps), otherProps), imageParams, mediaUrlPrefix);
  if (!imgAttrs) {
    return getEditableWrapper(imageField.editable);
  }
  const imgHtml = `<img ${getAttributesString(imgAttrs)} />`;
  const editableMarkup = imageField.editable.replace(foundImg.imgTag, imgHtml);
  return getEditableWrapper(editableMarkup);
};
var Image2 = (_a2) => {
  var { media, editable = true, imageParams, field, mediaUrlPrefix } = _a2, otherProps = __rest3(_a2, ["media", "editable", "imageParams", "field", "mediaUrlPrefix"]);
  if (field && !media) {
    media = field;
  }
  const dynamicMedia = media;
  if (!media || !dynamicMedia.editable && !dynamicMedia.value && !dynamicMedia.src) {
    return null;
  }
  const imageField = dynamicMedia;
  if (editable && imageField.editable) {
    return getEEMarkup(imageField, imageParams, mediaUrlPrefix, otherProps);
  }
  const img = dynamicMedia.src ? media : dynamicMedia.value;
  if (!img) {
    return null;
  }
  const attrs = getImageAttrs(Object.assign(Object.assign({}, img), otherProps), imageParams, mediaUrlPrefix);
  if (attrs) {
    return import_react16.default.createElement("img", Object.assign({}, attrs));
  }
  return null;
};
Image2.displayName = "Image";

// node_modules/@sitecore-jss/sitecore-jss-react/dist/esm/components/RichText.js
var import_react17 = __toESM(require_react());
var __rest4 = function(s2, e) {
  var t2 = {};
  for (var p in s2) if (Object.prototype.hasOwnProperty.call(s2, p) && e.indexOf(p) < 0)
    t2[p] = s2[p];
  if (s2 != null && typeof Object.getOwnPropertySymbols === "function")
    for (var i = 0, p = Object.getOwnPropertySymbols(s2); i < p.length; i++) {
      if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s2, p[i]))
        t2[p[i]] = s2[p[i]];
    }
  return t2;
};
var RichText = (0, import_react17.forwardRef)((_a2, ref) => {
  var { field, tag = "div", editable = true } = _a2, otherProps = __rest4(_a2, ["field", "tag", "editable"]);
  if (!field || !field.editable && !field.value) {
    return null;
  }
  const htmlProps = Object.assign({ dangerouslySetInnerHTML: {
    __html: field.editable && editable ? field.editable : field.value
  }, ref }, otherProps);
  return import_react17.default.createElement(tag || "div", htmlProps);
});
RichText.displayName = "RichText";

// node_modules/@sitecore-jss/sitecore-jss-react/dist/esm/components/Text.js
var import_react18 = __toESM(require_react());
var __rest5 = function(s2, e) {
  var t2 = {};
  for (var p in s2) if (Object.prototype.hasOwnProperty.call(s2, p) && e.indexOf(p) < 0)
    t2[p] = s2[p];
  if (s2 != null && typeof Object.getOwnPropertySymbols === "function")
    for (var i = 0, p = Object.getOwnPropertySymbols(s2); i < p.length; i++) {
      if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s2, p[i]))
        t2[p[i]] = s2[p[i]];
    }
  return t2;
};
var Text = (_a2) => {
  var { field, tag, editable = true, encode = true } = _a2, otherProps = __rest5(_a2, ["field", "tag", "editable", "encode"]);
  if (!field || !field.editable && (field.value === void 0 || field.value === "")) {
    return null;
  }
  if (!encode) {
    editable = false;
  }
  const isEditable = field.editable && editable;
  let output = isEditable ? field.editable || "" : field.value === void 0 ? "" : field.value;
  if (!field.editable && typeof output === "string") {
    const splitted = String(output).split("\n");
    if (splitted.length) {
      const formatted = [];
      splitted.forEach((str, i) => {
        const isLast = i === splitted.length - 1;
        formatted.push(str);
        if (!isLast) {
          formatted.push(import_react18.default.createElement("br", { key: i }));
        }
      });
      output = formatted;
    }
  }
  const setDangerously = isEditable || !encode;
  let children = null;
  const htmlProps = Object.assign({}, otherProps);
  if (setDangerously) {
    htmlProps.dangerouslySetInnerHTML = {
      __html: output
    };
  } else {
    children = output;
  }
  if (tag || setDangerously) {
    return import_react18.default.createElement(tag || "span", htmlProps, children);
  } else {
    return import_react18.default.createElement(import_react18.default.Fragment, null, children);
  }
};
Text.displayName = "Text";

// node_modules/@sitecore-jss/sitecore-jss-react/dist/esm/components/Date.js
var import_react19 = __toESM(require_react());
var __rest6 = function(s2, e) {
  var t2 = {};
  for (var p in s2) if (Object.prototype.hasOwnProperty.call(s2, p) && e.indexOf(p) < 0)
    t2[p] = s2[p];
  if (s2 != null && typeof Object.getOwnPropertySymbols === "function")
    for (var i = 0, p = Object.getOwnPropertySymbols(s2); i < p.length; i++) {
      if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s2, p[i]))
        t2[p[i]] = s2[p[i]];
    }
  return t2;
};
var DateField = (_a2) => {
  var { field, tag, editable = true, render } = _a2, otherProps = __rest6(_a2, ["field", "tag", "editable", "render"]);
  if (!field || !field.editable && !field.value) {
    return null;
  }
  let children;
  const htmlProps = Object.assign({}, otherProps);
  if (field.editable && editable) {
    htmlProps.dangerouslySetInnerHTML = {
      __html: field.editable
    };
  } else if (render) {
    children = render(field.value ? new Date(field.value) : null);
  } else {
    children = field.value;
  }
  if (tag || field.editable && editable) {
    return import_react19.default.createElement(tag || "span", htmlProps, children);
  } else {
    return import_react19.default.createElement(import_react19.default.Fragment, null, children);
  }
};
DateField.displayName = "Date";

// node_modules/@sitecore-jss/sitecore-jss-react/dist/esm/components/Link.js
var import_react20 = __toESM(require_react());
var __rest7 = function(s2, e) {
  var t2 = {};
  for (var p in s2) if (Object.prototype.hasOwnProperty.call(s2, p) && e.indexOf(p) < 0)
    t2[p] = s2[p];
  if (s2 != null && typeof Object.getOwnPropertySymbols === "function")
    for (var i = 0, p = Object.getOwnPropertySymbols(s2); i < p.length; i++) {
      if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s2, p[i]))
        t2[p[i]] = s2[p[i]];
    }
  return t2;
};
var Link = (0, import_react20.forwardRef)((_a2, ref) => {
  var { field, editable = true, showLinkTextWithChildrenPresent } = _a2, otherProps = __rest7(_a2, ["field", "editable", "showLinkTextWithChildrenPresent"]);
  const children = otherProps.children;
  const dynamicField = field;
  if (!field || !dynamicField.editableFirstPart && !dynamicField.value && !dynamicField.href) {
    return null;
  }
  const resultTags = [];
  if (editable && dynamicField.editableFirstPart) {
    const markup = dynamicField.editableFirstPart + dynamicField.editableLastPart;
    const htmlProps = Object.assign(Object.assign({ className: "sc-link-wrapper", dangerouslySetInnerHTML: {
      __html: markup
    } }, otherProps), { key: "editable" });
    delete htmlProps.children;
    resultTags.push(import_react20.default.createElement("span", Object.assign({}, htmlProps)));
    if (!children) {
      return resultTags[0];
    }
  }
  const link = dynamicField.href ? field : dynamicField.value;
  if (!link) {
    return null;
  }
  const anchor = link.linktype !== "anchor" && link.anchor ? `#${link.anchor}` : "";
  const querystring = link.querystring ? `?${link.querystring}` : "";
  const anchorAttrs = {
    href: `${link.href}${querystring}${anchor}`,
    className: link.class,
    title: link.title,
    target: link.target
  };
  if (anchorAttrs.target === "_blank" && !anchorAttrs.rel) {
    anchorAttrs.rel = "noopener noreferrer";
  }
  const linkText = showLinkTextWithChildrenPresent || !children ? link.text || link.href : null;
  resultTags.push(import_react20.default.createElement("a", Object.assign(Object.assign(Object.assign({}, anchorAttrs), otherProps), { key: "link", ref }), linkText, children));
  return import_react20.default.createElement(import_react20.default.Fragment, null, resultTags);
});
Link.displayName = "Link";

// node_modules/@sitecore-jss/sitecore-jss-react/dist/esm/components/File.js
var import_react21 = __toESM(require_react());
var __rest8 = function(s2, e) {
  var t2 = {};
  for (var p in s2) if (Object.prototype.hasOwnProperty.call(s2, p) && e.indexOf(p) < 0)
    t2[p] = s2[p];
  if (s2 != null && typeof Object.getOwnPropertySymbols === "function")
    for (var i = 0, p = Object.getOwnPropertySymbols(s2); i < p.length; i++) {
      if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s2, p[i]))
        t2[p[i]] = s2[p[i]];
    }
  return t2;
};
var File2 = (_a2) => {
  var { field, children } = _a2, otherProps = __rest8(_a2, ["field", "children"]);
  const dynamicField = field;
  if (!field || !dynamicField.value && !dynamicField.src) {
    return null;
  }
  const file = dynamicField.src ? field : dynamicField.value;
  if (!file) {
    return null;
  }
  const linkText = !children ? file.title || file.displayName : null;
  const anchorAttrs = {
    href: file.src
  };
  return import_react21.default.createElement("a", Object.assign(Object.assign({}, anchorAttrs), otherProps), linkText, children);
};
File2.displayName = "File";

// node_modules/@sitecore-jss/sitecore-jss-react/dist/esm/enhancers/withSitecoreContext.js
var import_react22 = __toESM(require_react());
function withSitecoreContext(options) {
  return function withSitecoreContextHoc(Component) {
    return function WithSitecoreContext(props) {
      return import_react22.default.createElement(SitecoreContextReactContext.Consumer, null, (context) => import_react22.default.createElement(Component, Object.assign({}, props, { sitecoreContext: context.context, updateSitecoreContext: options && options.updatable && context.setContext })));
    };
  };
}
function useSitecoreContext(options) {
  const reactContext = import_react22.default.useContext(SitecoreContextReactContext);
  const updatable = options === null || options === void 0 ? void 0 : options.updatable;
  return {
    sitecoreContext: reactContext.context,
    updateSitecoreContext: updatable ? reactContext.setContext : void 0
  };
}

// node_modules/@sitecore-jss/sitecore-jss-react/dist/esm/components/VisitorIdentification.js
var emittedVI = false;
var VIComponent = (props) => {
  const { sitecoreContext } = useSitecoreContext();
  if (emittedVI || typeof document === "undefined" || !sitecoreContext.visitorIdentificationTimestamp) {
    return null;
  }
  emittedVI = true;
  const script = document.createElement("script");
  script.src = "/layouts/system/VisitorIdentification.js";
  script.type = "text/javascript";
  script.defer = props.defer;
  const meta = document.createElement("meta");
  meta.name = "VIcurrentDateTime";
  meta.content = sitecoreContext.visitorIdentificationTimestamp.toString();
  const head = document.querySelector("head");
  head && head.appendChild(script);
  head && head.appendChild(meta);
  return null;
};
VIComponent.displayName = "VisitorIdentification";
var VisitorIdentification = VIComponent;

// node_modules/@sitecore-jss/sitecore-jss-react/dist/esm/enhancers/withEditorChromes.js
var import_react23 = __toESM(require_react());
var withEditorChromes = (WrappedComponent) => {
  class Enhancer extends import_react23.default.Component {
    constructor() {
      super(...arguments);
      this.displayName = WrappedComponent.displayName || WrappedComponent.name || "Component";
    }
    componentDidUpdate() {
      (0, import_utils9.resetEditorChromes)();
    }
    render() {
      return import_react23.default.createElement(WrappedComponent, Object.assign({}, this.props));
    }
  }
  return Enhancer;
};

// node_modules/@sitecore-jss/sitecore-jss-react/dist/esm/enhancers/withPlaceholder.js
var import_react24 = __toESM(require_react());
function withPlaceholder(placeholders, options) {
  return (WrappedComponent) => {
    class WithPlaceholder extends PlaceholderCommon {
      constructor(props) {
        super(props);
      }
      render() {
        let childProps = Object.assign({}, this.props);
        delete childProps.componentFactory;
        if (options && options.propsTransformer) {
          childProps = options.propsTransformer(childProps);
        }
        if (this.state.error) {
          if (childProps.errorComponent) {
            return import_react24.default.createElement(childProps.errorComponent, { error: this.state.error });
          }
          return import_react24.default.createElement(
            "div",
            { className: "sc-jss-placeholder-error" },
            "A rendering error occurred: ",
            this.state.error.message,
            "."
          );
        }
        const renderingData = options && options.resolvePlaceholderDataFromProps ? options.resolvePlaceholderDataFromProps(childProps) : childProps.rendering;
        const definitelyArrayPlacholders = !Array.isArray(placeholders) ? [placeholders] : placeholders;
        definitelyArrayPlacholders.forEach((placeholder) => {
          let placeholderData;
          if (typeof placeholder !== "string" && placeholder.placeholder && placeholder.prop) {
            placeholderData = PlaceholderCommon.getPlaceholderDataFromRenderingData(renderingData, placeholder.placeholder);
            if (placeholderData) {
              childProps[placeholder.prop] = this.getComponentsForRenderingData(placeholderData);
            }
          } else {
            placeholderData = PlaceholderCommon.getPlaceholderDataFromRenderingData(renderingData, placeholder);
            if (placeholderData) {
              childProps[placeholder] = this.getComponentsForRenderingData(placeholderData);
            }
          }
        });
        return import_react24.default.createElement(WrappedComponent, Object.assign({}, childProps));
      }
    }
    WithPlaceholder.propTypes = PlaceholderCommon.propTypes;
    return withComponentFactory(WithPlaceholder);
  };
}

// node_modules/@sitecore-jss/sitecore-jss-react/dist/esm/enhancers/withDatasourceCheck.js
var import_react25 = __toESM(require_react());
var DefaultEditingError = () => import_react25.default.createElement("div", { className: "sc-jss-editing-error", role: "alert" }, "Datasource is required. Please choose a content item for this component.");
function withDatasourceCheck(options) {
  return function withDatasourceCheckHoc(Component) {
    return function WithDatasourceCheck(props) {
      var _a2, _b;
      const { sitecoreContext } = useSitecoreContext();
      const EditingError = (_a2 = options === null || options === void 0 ? void 0 : options.editingErrorComponent) !== null && _a2 !== void 0 ? _a2 : DefaultEditingError;
      return ((_b = props.rendering) === null || _b === void 0 ? void 0 : _b.dataSource) ? import_react25.default.createElement(Component, Object.assign({}, props)) : sitecoreContext.pageEditing ? import_react25.default.createElement(EditingError, null) : null;
    };
  };
}

// node_modules/@sitecore-jss/sitecore-jss-react/dist/esm/components/EditFrame.js
var import_react26 = __toESM(require_react());
var import_utils8 = __toESM(require_utils4());
var EditFrame = ({ children, dataSource, buttons, title, tooltip, cssClass, parameters }) => {
  var _a2;
  const { sitecoreContext } = useSitecoreContext();
  if (!sitecoreContext.pageEditing) {
    return import_react26.default.createElement(import_react26.default.Fragment, null, children);
  }
  const chromeData = {
    displayName: title,
    expandedDisplayName: tooltip
  };
  const frameProps = {};
  frameProps.className = "scLooseFrameZone";
  if (cssClass) {
    frameProps.className = `${frameProps.className} ${cssClass}`;
  }
  if (dataSource) {
    const databaseName = dataSource.databaseName || ((_a2 = sitecoreContext.route) === null || _a2 === void 0 ? void 0 : _a2.databaseName);
    const language = dataSource.language || sitecoreContext.language;
    frameProps.sc_item = `sitecore://${databaseName}/${dataSource.itemId}?lang=${language}`;
    chromeData.contextItemUri = frameProps.sc_item;
  }
  chromeData.commands = buttons === null || buttons === void 0 ? void 0 : buttons.map((value) => {
    return (0, import_utils8.mapButtonToCommand)(value, dataSource === null || dataSource === void 0 ? void 0 : dataSource.itemId, parameters);
  });
  return import_react26.default.createElement(
    "div",
    Object.assign({ className: "scLooseFrameZone" }, frameProps),
    import_react26.default.createElement("span", { className: "scChromeData" }, JSON.stringify(chromeData)),
    children
  );
};

// node_modules/@sitecore-jss/sitecore-jss-react/dist/esm/ComponentBuilder.js
var ComponentBuilder = class {
  constructor(config) {
    this.config = config;
    this.components = new Map([...config.components]);
  }
  /**
   * Creates a new instance of component factory
   * @returns {ComponentFactory} Component factory implementation
   */
  getComponentFactory() {
    return (componentName) => {
      const component = this.components.get(componentName);
      if (!component)
        return null;
      return component;
    };
  }
};
var export_ClientError = import_graphql_request2.ClientError;
var export_DefaultEditFrameButton = import_utils9.DefaultEditFrameButton;
var export_DefaultEditFrameButtons = import_utils9.DefaultEditFrameButtons;
var export_DefaultRetryStrategy = import_graphql.DefaultRetryStrategy;
var export_GraphQLDictionaryService = import_i18n.GraphQLDictionaryService;
var export_GraphQLLayoutService = import_layout3.GraphQLLayoutService;
var export_LayoutServicePageState = import_layout3.LayoutServicePageState;
var export_RestDictionaryService = import_i18n.RestDictionaryService;
var export_RestLayoutService = import_layout3.RestLayoutService;
var export_getChildPlaceholder = import_layout3.getChildPlaceholder;
var export_getComponentLibraryStylesheetLinks = import_layout3.getComponentLibraryStylesheetLinks;
var export_getContentStylesheetLink = import_layout3.getContentStylesheetLink;
var export_getFEAASLibraryStylesheetLinks = import_feaas.getFEAASLibraryStylesheetLinks;
var export_getFieldValue = import_layout3.getFieldValue;
var export_isEditorActive = import_utils9.isEditorActive;
var export_mediaApi = import_media2.mediaApi;
var export_resetEditorChromes = import_utils9.resetEditorChromes;
var export_trackingApi = import_tracking.trackingApi;
export {
  BYOCComponent,
  BYOCWrapper,
  export_ClientError as ClientError,
  ComponentBuilder,
  DateField,
  export_DefaultEditFrameButton as DefaultEditFrameButton,
  export_DefaultEditFrameButtons as DefaultEditFrameButtons,
  export_DefaultRetryStrategy as DefaultRetryStrategy,
  EditFrame,
  FEaaSComponent,
  FEaaSWrapper,
  File2 as File,
  export_GraphQLDictionaryService as GraphQLDictionaryService,
  export_GraphQLLayoutService as GraphQLLayoutService,
  Image2 as Image,
  export_LayoutServicePageState as LayoutServicePageState,
  Link,
  Placeholder,
  export_RestDictionaryService as RestDictionaryService,
  export_RestLayoutService as RestLayoutService,
  RichText,
  SitecoreContext,
  SitecoreContextReactContext,
  Text,
  VisitorIdentification,
  constants_exports as constants,
  enableDebug,
  fetchBYOCComponentServerProps,
  fetchFEaaSComponentServerProps,
  export_getChildPlaceholder as getChildPlaceholder,
  export_getComponentLibraryStylesheetLinks as getComponentLibraryStylesheetLinks,
  export_getContentStylesheetLink as getContentStylesheetLink,
  getEEMarkup,
  export_getFEAASLibraryStylesheetLinks as getFEAASLibraryStylesheetLinks,
  export_getFieldValue as getFieldValue,
  export_isEditorActive as isEditorActive,
  export_mediaApi as mediaApi,
  export_resetEditorChromes as resetEditorChromes,
  export_trackingApi as trackingApi,
  useSitecoreContext,
  withDatasourceCheck,
  withEditorChromes,
  withPlaceholder,
  withSitecoreContext
};
//# sourceMappingURL=@sitecore-jss_sitecore-jss-react.js.map
