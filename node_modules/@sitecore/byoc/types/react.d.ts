/// <reference types="@types/react" />
import { MinimalComponentProps } from '@sitecore/byoc';
import React from 'react';
export * from '@sitecore/byoc';
export interface ComponentProps extends MinimalComponentProps {
    fallbackWrapper?: boolean;
    fallback?: any;
    clientFallback?: any;
}
/**
 * A special case of Component designed for Next.js.
 * It uses `next/dynamic` to control rendering on the client, server, or both.
 *
 * @param {ComponentProps} props  - The properties for the component.
 * @returns {JSX.Element} The JSX element representing the component.
 */
export declare function NextComponent(props: ComponentProps): React.JSX.Element;
/**
 * Enables Next.js client/server rendering options for registered components.
 * The `component` argument should be a function exported from a file with a `use client` directive.
 *
 * @param {any} dynamic    - The Next dynamic function.
 * @param {any} component  - The component function.
 * @returns {any} Augmented bundle.
 */
export declare function enableNextClientsideComponents(dynamic: any, component: any): any;
/**
 * Renders a registered external component in a React tree. If enableNextClientsideComponents was called previously,
 * the component is rendered using NextComponentÂ codepath, which allows rendering separate component on client and
 * server.
 *
 * @param {ComponentProps} props  - The properties for the component.
 * @returns {JSX.Element} The JSX element representing the component.
 */
export declare function Component(props: ComponentProps): React.JSX.Element;
/**
 * Pass list of server side component registrations to clients, and embed clientside components to the page.
 */
export declare function Bundle(): React.JSX.Element;
/**
 * A wrapper over External component that accepts a fallback for rendering in case of a missing component.
 * It accepts properties in camelcase format and ensures no hydration errors on the client-side.
 *
 * @param {ComponentProps} props  - The properties for the component.
 * @returns {JSX.Element} The JSX element representing the component.
 */
export declare function RegularComponent(props: ComponentProps): React.JSX.Element;
declare global {
    namespace JSX {
        interface IntrinsicElements {
            'feaas-external': {
                'data-external-id': string;
                children?: any;
                dangerouslySetInnerHTML?: {
                    __html: string;
                };
                [key: string]: any;
            };
        }
    }
}
//# sourceMappingURL=react.d.ts.map